{
	"info": {
		"_postman_id": "638620cc-dc64-4204-98c3-e7b3147bb90d",
		"name": "112020_GlobalGO_Elev_Integration",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "00 - 1 GOELEV SUBS",
			"item": [
				{
					"name": "00 - Generate Login Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"bodyJSON = JSON.parse(responseBody)",
									"value1 = bodyJSON.token",
									"value2 = bodyJSON.refreshToken",
									"pm.environment.set(\"bearerToken\", value1);",
									"pm.environment.set(\"loginToken\", value2);",
									"",
									"pm.test(\"Verify Successful API response\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Verify complete JSON response\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"type\")",
									"    pm.expect(pm.response.text()).to.include(\"token\")",
									"    pm.expect(pm.response.text()).to.include(\"refreshToken\")",
									"    pm.expect(pm.response.text()).to.include(\"user_id\")",
									"});",
									"pm.test(\"Verify correct UID of user\", function () {",
									"    var myUID = bodyJSON.user_id",
									"    var frGigya = pm.environment.get(\"user1UID\");",
									"    pm.expect(myUID).to.be.equals(frGigya) //from Gigya console",
									"    console.log(myUID)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "email",
									"value": "{{email}}",
									"type": "text"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "https://go-api-qa.cambridgedev.org/v1/services/gigya/login/",
							"protocol": "https",
							"host": [
								"go-api-qa",
								"cambridgedev",
								"org"
							],
							"path": [
								"v1",
								"services",
								"gigya",
								"login",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "00 - Get Entitlement",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify complete JSON response\", function () {",
									"        pm.expect(pm.response.text()).to.include(\"book_id\")",
									"        pm.expect(pm.response.text()).to.include(\"name\")",
									"        pm.expect(pm.response.text()).to.include(\"is_active\")",
									"        pm.expect(pm.response.text()).to.include(\"is_public\")",
									"        pm.expect(pm.response.text()).to.include(\"description\")",
									"        pm.expect(pm.response.text()).to.include(\"user_access\")",
									"        pm.expect(pm.response.text()).to.include(\"authorization_type\")",
									"        pm.expect(pm.response.text()).to.include(\"sub_name\")",
									"        pm.expect(pm.response.text()).to.include(\"thumbnail_path\")",
									"        pm.expect(pm.response.text()).to.include(\"ended_at\")",
									"        pm.expect(pm.response.text()).to.include(\"integration\")",
									"        pm.expect(pm.response.text()).to.include(\"metadata\")",
									"        pm.expect(pm.response.text()).to.include(\"private_isbn\")",
									"});",
									"pm.test(\"Verify that Entitlements are not Expired\", function() {",
									"    var currentDate = new Date(); //'2020-10-31 12:00:00'",
									"    var jsonData = pm.response.json();",
									"        for (i = 0; i < jsonData.length; i++){",
									"            expiry = jsonData[i].ended_at;",
									"            var expiryDate = new Date(expiry);",
									"            console.log(currentDate, expiryDate);",
									"            pm.expect(expiryDate).to.be.above(currentDate);",
									"        }",
									"});",
									"pm.test(\"Verify if valid ISBNs\", function() {",
									"    var jsonData = pm.response.json();",
									"        for (i = 0; i < jsonData.length; i++){",
									"        var ISBNcount = jsonData[i].integration.metadata.private_isbn.length;",
									"        pm.expect(ISBNcount).to.be.equals(13)",
									"        console.log(ISBNcount)",
									"        }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://go-api-qa.cambridgedev.org/v1/integrations/{{client_id}}/userResources/",
							"protocol": "https",
							"host": [
								"go-api-qa",
								"cambridgedev",
								"org"
							],
							"path": [
								"v1",
								"integrations",
								"{{client_id}}",
								"userResources",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "00 - Refresh Login Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify Successful API response\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Verify complete JSON response\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"type\")",
									"    pm.expect(pm.response.text()).to.include(\"token\")",
									"    pm.expect(pm.response.text()).to.include(\"refreshToken\")",
									"    pm.expect(pm.response.text()).not.to.include(\"user_id\")",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "refresh_token",
									"value": "{{loginToken}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "https://go-api-qa.cambridgedev.org/v1/token/refresh",
							"protocol": "https",
							"host": [
								"go-api-qa",
								"cambridgedev",
								"org"
							],
							"path": [
								"v1",
								"token",
								"refresh"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "01 - No Books",
			"item": [
				{
					"name": "01 - Generate Login Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"bodyJSON = JSON.parse(responseBody)",
									"value1 = bodyJSON.token",
									"value2 = bodyJSON.refreshToken",
									"pm.environment.set(\"bearerToken\", value1);",
									"pm.environment.set(\"loginToken\", value2);",
									"",
									"pm.test(\"Verify Successful API response\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Verify complete JSON response\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"type\")",
									"    pm.expect(pm.response.text()).to.include(\"token\")",
									"    pm.expect(pm.response.text()).to.include(\"refreshToken\")",
									"    pm.expect(pm.response.text()).to.include(\"user_id\")",
									"});",
									"pm.test(\"Verify correct UID of user\", function () {",
									"    var myUID = bodyJSON.user_id",
									"    var frGigya = pm.environment.get(\"user2UID\");",
									"    pm.expect(myUID).to.be.equals(frGigya) //from Gigya console",
									"    console.log(myUID)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "email",
									"value": "glgoelstudent_qa_test1@pte-mailbox.cambridgedev.org",
									"type": "text"
								},
								{
									"key": "password",
									"value": "password1",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "https://go-api-qa.cambridgedev.org/v1/services/gigya/login/",
							"protocol": "https",
							"host": [
								"go-api-qa",
								"cambridgedev",
								"org"
							],
							"path": [
								"v1",
								"services",
								"gigya",
								"login",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "01 - Get Entitlement",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify complete JSON response\", function () {",
									"        pm.expect(pm.response.text()).to.include(\"\")",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://go-api-qa.cambridgedev.org/v1/integrations/{{client_id}}/userResources/",
							"protocol": "https",
							"host": [
								"go-api-qa",
								"cambridgedev",
								"org"
							],
							"path": [
								"v1",
								"integrations",
								"{{client_id}}",
								"userResources",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "01 - Refresh Login Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify Successful API response\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Verify complete JSON response\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"type\")",
									"    pm.expect(pm.response.text()).to.include(\"token\")",
									"    pm.expect(pm.response.text()).to.include(\"refreshToken\")",
									"    pm.expect(pm.response.text()).not.to.include(\"user_id\")",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "refresh_token",
									"value": "{{loginToken}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "https://go-api-qa.cambridgedev.org/v1/token/refresh",
							"protocol": "https",
							"host": [
								"go-api-qa",
								"cambridgedev",
								"org"
							],
							"path": [
								"v1",
								"token",
								"refresh"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "02 - No GOELEV SUBS",
			"item": [
				{
					"name": "02 - Generate Login Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"bodyJSON = JSON.parse(responseBody)",
									"value1 = bodyJSON.token",
									"value2 = bodyJSON.refreshToken",
									"pm.environment.set(\"bearerToken\", value1);",
									"pm.environment.set(\"loginToken\", value2);",
									"",
									"pm.test(\"Verify Successful API response\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Verify complete JSON response\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"type\")",
									"    pm.expect(pm.response.text()).to.include(\"token\")",
									"    pm.expect(pm.response.text()).to.include(\"refreshToken\")",
									"    pm.expect(pm.response.text()).to.include(\"user_id\")",
									"});",
									"pm.test(\"Verify correct UID of user\", function () {",
									"    var myUID = bodyJSON.user_id",
									"    var frGigya = pm.environment.get(\"user3UID\");",
									"    pm.expect(myUID).to.be.equals(frGigya) //from Gigya console",
									"    console.log(myUID)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "email",
									"value": "glgoelteacher_qa_test2@pte-mailbox.cambridgedev.org",
									"type": "text"
								},
								{
									"key": "password",
									"value": "password1",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "https://go-api-qa.cambridgedev.org/v1/services/gigya/login/",
							"protocol": "https",
							"host": [
								"go-api-qa",
								"cambridgedev",
								"org"
							],
							"path": [
								"v1",
								"services",
								"gigya",
								"login",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "02 - Get Entitlement",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify complete JSON response\", function () {",
									"        pm.expect(pm.response.text()).to.include(\"\")",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://go-api-qa.cambridgedev.org/v1/integrations/{{client_id}}/userResources/",
							"protocol": "https",
							"host": [
								"go-api-qa",
								"cambridgedev",
								"org"
							],
							"path": [
								"v1",
								"integrations",
								"{{client_id}}",
								"userResources",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "02 - Refresh Login Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify Successful API response\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Verify complete JSON response\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"type\")",
									"    pm.expect(pm.response.text()).to.include(\"token\")",
									"    pm.expect(pm.response.text()).to.include(\"refreshToken\")",
									"    pm.expect(pm.response.text()).not.to.include(\"user_id\")",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "refresh_token",
									"value": "{{loginToken}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "https://go-api-qa.cambridgedev.org/v1/token/refresh",
							"protocol": "https",
							"host": [
								"go-api-qa",
								"cambridgedev",
								"org"
							],
							"path": [
								"v1",
								"token",
								"refresh"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "03 - 1 GOELEV + 1 SAMPLE",
			"item": [
				{
					"name": "03 - Generate Login Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"bodyJSON = JSON.parse(responseBody)",
									"value1 = bodyJSON.token",
									"value2 = bodyJSON.refreshToken",
									"pm.environment.set(\"bearerToken\", value1);",
									"pm.environment.set(\"loginToken\", value2);",
									"",
									"pm.test(\"Verify Successful API response\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Verify complete JSON response\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"type\")",
									"    pm.expect(pm.response.text()).to.include(\"token\")",
									"    pm.expect(pm.response.text()).to.include(\"refreshToken\")",
									"    pm.expect(pm.response.text()).to.include(\"user_id\")",
									"});",
									"pm.test(\"Verify correct UID of user\", function () {",
									"    var myUID = bodyJSON.user_id",
									"    var frGigya = pm.environment.get(\"user4UID\");",
									"    pm.expect(myUID).to.be.equals(frGigya) //from Gigya console",
									"    console.log(myUID)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "email",
									"value": "glgoelstudent_qa_test2@pte-mailbox.cambridgedev.org",
									"type": "text"
								},
								{
									"key": "password",
									"value": "password1",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "https://go-api-qa.cambridgedev.org/v1/services/gigya/login/",
							"protocol": "https",
							"host": [
								"go-api-qa",
								"cambridgedev",
								"org"
							],
							"path": [
								"v1",
								"services",
								"gigya",
								"login",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "03 - Get Entitlement",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify complete JSON response\", function () {",
									"        pm.expect(pm.response.text()).to.include(\"book_id\")",
									"        pm.expect(pm.response.text()).to.include(\"name\")",
									"        pm.expect(pm.response.text()).to.include(\"is_active\")",
									"        pm.expect(pm.response.text()).to.include(\"is_public\")",
									"        pm.expect(pm.response.text()).to.include(\"description\")",
									"        pm.expect(pm.response.text()).to.include(\"user_access\")",
									"        pm.expect(pm.response.text()).to.include(\"authorization_type\")",
									"        pm.expect(pm.response.text()).to.include(\"sub_name\")",
									"        pm.expect(pm.response.text()).to.include(\"thumbnail_path\")",
									"        pm.expect(pm.response.text()).to.include(\"ended_at\")",
									"        pm.expect(pm.response.text()).to.include(\"integration\")",
									"        pm.expect(pm.response.text()).to.include(\"metadata\")",
									"        pm.expect(pm.response.text()).to.include(\"private_isbn\")",
									"});",
									"pm.test(\"Verify that Entitlements are not Expired\", function() {",
									"    var currentDate = new Date(); //'2020-10-31 12:00:00'",
									"    var jsonData = pm.response.json();",
									"        for (i = 0; i < jsonData.length; i++){",
									"            expiry = jsonData[i].ended_at;",
									"            var expiryDate = new Date(expiry);",
									"            console.log(currentDate, expiryDate);",
									"            pm.expect(expiryDate).to.be.above(currentDate);",
									"        }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://go-api-qa.cambridgedev.org/v1/integrations/{{client_id}}/userResources/",
							"protocol": "https",
							"host": [
								"go-api-qa",
								"cambridgedev",
								"org"
							],
							"path": [
								"v1",
								"integrations",
								"{{client_id}}",
								"userResources",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "03 - Refresh Login Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify Successful API response\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Verify complete JSON response\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"type\")",
									"    pm.expect(pm.response.text()).to.include(\"token\")",
									"    pm.expect(pm.response.text()).to.include(\"refreshToken\")",
									"    pm.expect(pm.response.text()).not.to.include(\"user_id\")",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "refresh_token",
									"value": "{{loginToken}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "https://go-api-qa.cambridgedev.org/v1/token/refresh",
							"protocol": "https",
							"host": [
								"go-api-qa",
								"cambridgedev",
								"org"
							],
							"path": [
								"v1",
								"token",
								"refresh"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "04 - EXPIRED GOELEV SUBS",
			"item": [
				{
					"name": "04 - Generate Login Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"bodyJSON = JSON.parse(responseBody)",
									"value1 = bodyJSON.token",
									"value2 = bodyJSON.refreshToken",
									"pm.environment.set(\"bearerToken\", value1);",
									"pm.environment.set(\"loginToken\", value2);",
									"",
									"pm.test(\"Verify Successful API response\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Verify complete JSON response\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"type\")",
									"    pm.expect(pm.response.text()).to.include(\"token\")",
									"    pm.expect(pm.response.text()).to.include(\"refreshToken\")",
									"    pm.expect(pm.response.text()).to.include(\"user_id\")",
									"});",
									"pm.test(\"Verify correct UID of user\", function () {",
									"    var myUID = bodyJSON.user_id",
									"    var frGigya = pm.environment.get(\"user5UID\");",
									"    pm.expect(myUID).to.be.equals(frGigya) //from Gigya console",
									"    console.log(myUID)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "email",
									"value": "glgoelteacher_qa_test3@pte-mailbox.cambridgedev.org",
									"type": "text"
								},
								{
									"key": "password",
									"value": "password1",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "https://go-api-qa.cambridgedev.org/v1/services/gigya/login/",
							"protocol": "https",
							"host": [
								"go-api-qa",
								"cambridgedev",
								"org"
							],
							"path": [
								"v1",
								"services",
								"gigya",
								"login",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "04 - Get Entitlement",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify complete JSON response\", function () {",
									"    pm.expect(pm.response.text()).not.to.include(\"book_id\")",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://go-api-qa.cambridgedev.org/v1/integrations/{{client_id}}/userResources/",
							"protocol": "https",
							"host": [
								"go-api-qa",
								"cambridgedev",
								"org"
							],
							"path": [
								"v1",
								"integrations",
								"{{client_id}}",
								"userResources",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "04 - Refresh Login Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify Successful API response\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Verify complete JSON response\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"type\")",
									"    pm.expect(pm.response.text()).to.include(\"token\")",
									"    pm.expect(pm.response.text()).to.include(\"refreshToken\")",
									"    pm.expect(pm.response.text()).not.to.include(\"user_id\")",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "refresh_token",
									"value": "{{loginToken}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "https://go-api-qa.cambridgedev.org/v1/token/refresh",
							"protocol": "https",
							"host": [
								"go-api-qa",
								"cambridgedev",
								"org"
							],
							"path": [
								"v1",
								"token",
								"refresh"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "05 - Multiple GOELEV SUBS",
			"item": [
				{
					"name": "05 - Generate Login Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"bodyJSON = JSON.parse(responseBody)",
									"value1 = bodyJSON.token",
									"value2 = bodyJSON.refreshToken",
									"pm.environment.set(\"bearerToken\", value1);",
									"pm.environment.set(\"loginToken\", value2);",
									"",
									"pm.test(\"Verify Successful API response\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Verify complete JSON response\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"type\")",
									"    pm.expect(pm.response.text()).to.include(\"token\")",
									"    pm.expect(pm.response.text()).to.include(\"refreshToken\")",
									"    pm.expect(pm.response.text()).to.include(\"user_id\")",
									"});",
									"pm.test(\"Verify correct UID of user\", function () {",
									"    var myUID = bodyJSON.user_id",
									"    var frGigya = pm.environment.get(\"user8UID\");",
									"    pm.expect(myUID).to.be.equals(frGigya) //from Gigya console",
									"    console.log(myUID)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "email",
									"value": "glgoelstudent_qa_test3@pte-mailbox.cambridgedev.org",
									"type": "text"
								},
								{
									"key": "password",
									"value": "password1",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "https://go-api-qa.cambridgedev.org/v1/services/gigya/login/",
							"protocol": "https",
							"host": [
								"go-api-qa",
								"cambridgedev",
								"org"
							],
							"path": [
								"v1",
								"services",
								"gigya",
								"login",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "05 - Get Entitlement",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify complete JSON response\", function () {",
									"        pm.expect(pm.response.text()).to.include(\"book_id\")",
									"        pm.expect(pm.response.text()).to.include(\"name\")",
									"        pm.expect(pm.response.text()).to.include(\"is_active\")",
									"        pm.expect(pm.response.text()).to.include(\"is_public\")",
									"        pm.expect(pm.response.text()).to.include(\"description\")",
									"        pm.expect(pm.response.text()).to.include(\"user_access\")",
									"        pm.expect(pm.response.text()).to.include(\"authorization_type\")",
									"        pm.expect(pm.response.text()).to.include(\"sub_name\")",
									"        pm.expect(pm.response.text()).to.include(\"thumbnail_path\")",
									"        pm.expect(pm.response.text()).to.include(\"ended_at\")",
									"        pm.expect(pm.response.text()).to.include(\"integration\")",
									"        pm.expect(pm.response.text()).to.include(\"metadata\")",
									"        pm.expect(pm.response.text()).to.include(\"private_isbn\")",
									"});",
									"pm.test(\"Verify that Entitlements are not Expired\", function() {",
									"    var currentDate = new Date(); //'2020-10-31 12:00:00'",
									"    var jsonData = pm.response.json();",
									"        for (i = 0; i < jsonData.length; i++){",
									"            expiry = jsonData[i].ended_at;",
									"            var expiryDate = new Date(expiry);",
									"            console.log(currentDate, expiryDate);",
									"            pm.expect(expiryDate).to.be.above(currentDate);",
									"        }",
									"});",
									"pm.test(\"Verify if valid ISBNs\", function() {",
									"    var jsonData = pm.response.json();",
									"        for (i = 0; i < jsonData.length; i++){",
									"        var ISBNcount = jsonData[i].integration.metadata.private_isbn.length;",
									"        pm.expect(ISBNcount).to.be.equals(13)",
									"        console.log(ISBNcount)",
									"        }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://go-api-qa.cambridgedev.org/v1/integrations/{{client_id}}/userResources/",
							"protocol": "https",
							"host": [
								"go-api-qa",
								"cambridgedev",
								"org"
							],
							"path": [
								"v1",
								"integrations",
								"{{client_id}}",
								"userResources",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "05 - Refresh Login Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify Successful API response\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Verify complete JSON response\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"type\")",
									"    pm.expect(pm.response.text()).to.include(\"token\")",
									"    pm.expect(pm.response.text()).to.include(\"refreshToken\")",
									"    pm.expect(pm.response.text()).not.to.include(\"user_id\")",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "refresh_token",
									"value": "{{loginToken}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "https://go-api-qa.cambridgedev.org/v1/token/refresh",
							"protocol": "https",
							"host": [
								"go-api-qa",
								"cambridgedev",
								"org"
							],
							"path": [
								"v1",
								"token",
								"refresh"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "06 - Active and Expired GOELEV SUBS",
			"item": [
				{
					"name": "06 - Generate Login Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"bodyJSON = JSON.parse(responseBody)",
									"value1 = bodyJSON.token",
									"value2 = bodyJSON.refreshToken",
									"pm.environment.set(\"bearerToken\", value1);",
									"pm.environment.set(\"loginToken\", value2);",
									"",
									"pm.test(\"Verify Successful API response\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Verify complete JSON response\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"type\")",
									"    pm.expect(pm.response.text()).to.include(\"token\")",
									"    pm.expect(pm.response.text()).to.include(\"refreshToken\")",
									"    pm.expect(pm.response.text()).to.include(\"user_id\")",
									"});",
									"pm.test(\"Verify correct UID of user\", function () {",
									"    var myUID = bodyJSON.user_id",
									"    var frGigya = pm.environment.get(\"user9UID\");",
									"    pm.expect(myUID).to.be.equals(frGigya) //from Gigya console",
									"    console.log(myUID)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "email",
									"value": "glgoelteacher_qa_test4@pte-mailbox.cambridgedev.org",
									"type": "text"
								},
								{
									"key": "password",
									"value": "password1",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "https://go-api-qa.cambridgedev.org/v1/services/gigya/login/",
							"protocol": "https",
							"host": [
								"go-api-qa",
								"cambridgedev",
								"org"
							],
							"path": [
								"v1",
								"services",
								"gigya",
								"login",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "06 - Get Entitlement",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify complete JSON response\", function () {",
									"        pm.expect(pm.response.text()).to.include(\"book_id\")",
									"        pm.expect(pm.response.text()).to.include(\"name\")",
									"        pm.expect(pm.response.text()).to.include(\"is_active\")",
									"        pm.expect(pm.response.text()).to.include(\"is_public\")",
									"        pm.expect(pm.response.text()).to.include(\"description\")",
									"        pm.expect(pm.response.text()).to.include(\"user_access\")",
									"        pm.expect(pm.response.text()).to.include(\"authorization_type\")",
									"        pm.expect(pm.response.text()).to.include(\"sub_name\")",
									"        pm.expect(pm.response.text()).to.include(\"thumbnail_path\")",
									"        pm.expect(pm.response.text()).to.include(\"ended_at\")",
									"        pm.expect(pm.response.text()).to.include(\"integration\")",
									"        pm.expect(pm.response.text()).to.include(\"metadata\")",
									"        pm.expect(pm.response.text()).to.include(\"private_isbn\")",
									"});",
									"pm.test(\"Verify that Entitlements are not Expired\", function() {",
									"    var currentDate = new Date(); //'2020-10-31 12:00:00'",
									"    var jsonData = pm.response.json();",
									"        for (i = 0; i < jsonData.length; i++){",
									"            expiry = jsonData[i].ended_at;",
									"            var expiryDate = new Date(expiry);",
									"            console.log(currentDate, expiryDate);",
									"            pm.expect(expiryDate).to.be.above(currentDate);",
									"        }",
									"});",
									"pm.test(\"Verify if valid ISBNs\", function() {",
									"    var jsonData = pm.response.json();",
									"        for (i = 0; i < jsonData.length; i++){",
									"        var ISBNcount = jsonData[i].integration.metadata.private_isbn.length;",
									"        pm.expect(ISBNcount).to.be.equals(13)",
									"        console.log(ISBNcount)",
									"        }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://go-api-qa.cambridgedev.org/v1/integrations/{{client_id}}/userResources/",
							"protocol": "https",
							"host": [
								"go-api-qa",
								"cambridgedev",
								"org"
							],
							"path": [
								"v1",
								"integrations",
								"{{client_id}}",
								"userResources",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "06 - Refresh Login Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify Successful API response\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Verify complete JSON response\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"type\")",
									"    pm.expect(pm.response.text()).to.include(\"token\")",
									"    pm.expect(pm.response.text()).to.include(\"refreshToken\")",
									"    pm.expect(pm.response.text()).not.to.include(\"user_id\")",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "refresh_token",
									"value": "{{loginToken}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "https://go-api-qa.cambridgedev.org/v1/token/refresh",
							"protocol": "https",
							"host": [
								"go-api-qa",
								"cambridgedev",
								"org"
							],
							"path": [
								"v1",
								"token",
								"refresh"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "07 - GOELEV + GO SUBS",
			"item": [
				{
					"name": "07 - Generate Login Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"bodyJSON = JSON.parse(responseBody)",
									"value1 = bodyJSON.token",
									"value2 = bodyJSON.refreshToken",
									"pm.environment.set(\"bearerToken\", value1);",
									"pm.environment.set(\"loginToken\", value2);",
									"",
									"pm.test(\"Verify Successful API response\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Verify complete JSON response\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"type\")",
									"    pm.expect(pm.response.text()).to.include(\"token\")",
									"    pm.expect(pm.response.text()).to.include(\"refreshToken\")",
									"    pm.expect(pm.response.text()).to.include(\"user_id\")",
									"});",
									"pm.test(\"Verify correct UID of user\", function () {",
									"     var jsonData = pm.response.json();",
									"     var myUID = jsonData.user_id",
									"     var frGigya = pm.environment.get(\"user10UID\");",
									"    pm.expect(myUID).to.be.equals(parseInt(frGigya)) //from Gigya console",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "email",
									"value": "glgoelstudent_qa_test4@pte-mailbox.cambridgedev.org",
									"type": "text"
								},
								{
									"key": "password",
									"value": "password1",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "https://go-api-qa.cambridgedev.org/v1/services/gigya/login/",
							"protocol": "https",
							"host": [
								"go-api-qa",
								"cambridgedev",
								"org"
							],
							"path": [
								"v1",
								"services",
								"gigya",
								"login",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "07 - Get Entitlement",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify complete JSON response\", function () {",
									"        pm.expect(pm.response.text()).to.include(\"book_id\")",
									"        pm.expect(pm.response.text()).to.include(\"name\")",
									"        pm.expect(pm.response.text()).to.include(\"is_active\")",
									"        pm.expect(pm.response.text()).to.include(\"is_public\")",
									"        pm.expect(pm.response.text()).to.include(\"description\")",
									"        pm.expect(pm.response.text()).to.include(\"user_access\")",
									"        pm.expect(pm.response.text()).to.include(\"authorization_type\")",
									"        pm.expect(pm.response.text()).to.include(\"sub_name\")",
									"        pm.expect(pm.response.text()).to.include(\"thumbnail_path\")",
									"        pm.expect(pm.response.text()).to.include(\"ended_at\")",
									"        pm.expect(pm.response.text()).to.include(\"integration\")",
									"        pm.expect(pm.response.text()).to.include(\"metadata\")",
									"        pm.expect(pm.response.text()).to.include(\"private_isbn\")",
									"});",
									"pm.test(\"Verify that Entitlements are not Expired\", function() {",
									"    var currentDate = new Date(); //'2020-10-31 12:00:00'",
									"    var jsonData = pm.response.json();",
									"        for (i = 0; i < jsonData.length; i++){",
									"            expiry = jsonData[i].ended_at;",
									"            var expiryDate = new Date(expiry);",
									"            console.log(currentDate, expiryDate);",
									"            pm.expect(expiryDate).to.be.above(currentDate);",
									"        }",
									"});",
									"pm.test(\"Verify if valid ISBNs\", function() {",
									"    var jsonData = pm.response.json();",
									"        for (i = 0; i < jsonData.length; i++){",
									"        var ISBNcount = jsonData[i].integration.metadata.private_isbn.length;",
									"        pm.expect(ISBNcount).to.be.equals(13)",
									"        console.log(ISBNcount)",
									"        }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://go-api-qa.cambridgedev.org/v1/integrations/{{client_id}}/userResources/",
							"protocol": "https",
							"host": [
								"go-api-qa",
								"cambridgedev",
								"org"
							],
							"path": [
								"v1",
								"integrations",
								"{{client_id}}",
								"userResources",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "07 - Refresh Login Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify Successful API response\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Verify complete JSON response\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"type\")",
									"    pm.expect(pm.response.text()).to.include(\"token\")",
									"    pm.expect(pm.response.text()).to.include(\"refreshToken\")",
									"    pm.expect(pm.response.text()).not.to.include(\"user_id\")",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "refresh_token",
									"value": "{{loginToken}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "https://go-api-qa.cambridgedev.org/v1/token/refresh",
							"protocol": "https",
							"host": [
								"go-api-qa",
								"cambridgedev",
								"org"
							],
							"path": [
								"v1",
								"token",
								"refresh"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "08 - Negative Scenarios",
			"item": [
				{
					"name": "08 - Terms not accepted with Subscription",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"bodyJSON = JSON.parse(responseBody)",
									"value1 = bodyJSON.token",
									"value2 = bodyJSON.refreshToken",
									"pm.environment.set(\"bearerToken\", value1);",
									"pm.environment.set(\"loginToken\", value2);",
									"console.log(value1)",
									"console.log(value2)",
									"",
									"pm.test(\"Verify Successful API response\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"pm.test(\"Verify complete JSON response\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"success\")",
									"    pm.expect(pm.response.text()).to.include(\"message\")",
									"    pm.expect(pm.response.text()).to.include(\"code\")",
									"    pm.expect(pm.response.text()).to.include(\"description\")",
									"});",
									"pm.test(\"Verify correct error message is thrown\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Unable to login. Terms of use is not yet accepted.\")",
									"    pm.expect(pm.response.text()).to.include(\"21000005\")",
									"    pm.expect(pm.response.text()).to.include(\"Unable to login. The user has not accepted the terms of use yet.\")",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "email",
									"value": "glgoelteacher_qa_prvtest1@pte-mailbox.cambridgedev.org",
									"type": "text"
								},
								{
									"key": "password",
									"value": "password1",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "https://go-api-qa.cambridgedev.org/v1/services/gigya/login/",
							"protocol": "https",
							"host": [
								"go-api-qa",
								"cambridgedev",
								"org"
							],
							"path": [
								"v1",
								"services",
								"gigya",
								"login",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "08 - Terms not accepted with No Subscription",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"bodyJSON = JSON.parse(responseBody)",
									"value1 = bodyJSON.token",
									"value2 = bodyJSON.refreshToken",
									"pm.environment.set(\"bearerToken\", value1);",
									"pm.environment.set(\"loginToken\", value2);",
									"console.log(value1)",
									"console.log(value2)",
									"",
									"pm.test(\"Verify Successful API response\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"pm.test(\"Verify complete JSON response\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"success\")",
									"    pm.expect(pm.response.text()).to.include(\"message\")",
									"    pm.expect(pm.response.text()).to.include(\"code\")",
									"    pm.expect(pm.response.text()).to.include(\"description\")",
									"});",
									"pm.test(\"Verify correct error message is thrown\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Unable to login. Terms of use is not yet accepted.\")",
									"    pm.expect(pm.response.text()).to.include(\"21000005\")",
									"    pm.expect(pm.response.text()).to.include(\"Unable to login. The user has not accepted the terms of use yet.\")",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "email",
									"value": "glgoelstudent_qa_prvtest1@pte-mailbox.cambridgedev.org",
									"type": "text"
								},
								{
									"key": "password",
									"value": "password1",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "https://go-api-qa.cambridgedev.org/v1/services/gigya/login/",
							"protocol": "https",
							"host": [
								"go-api-qa",
								"cambridgedev",
								"org"
							],
							"path": [
								"v1",
								"services",
								"gigya",
								"login",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "08 - Invalid Login - No Password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify Successful API response\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"pm.test(\"Verify complete JSON response\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"success\")",
									"    pm.expect(pm.response.text()).to.include(\"message\")",
									"    pm.expect(pm.response.text()).to.include(\"code\")",
									"    pm.expect(pm.response.text()).to.include(\"description\")",
									"    pm.expect(pm.response.text()).to.include(\"errors\")",
									"});",
									"pm.test(\"Verify correct error message is thrown\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Unable to login. Incorrect email or password format\")",
									"    pm.expect(pm.response.text()).to.include(\"21000007\")",
									"    pm.expect(pm.response.text()).to.include(\"Unable to login. Make sure email or password format is correct and is present\")",
									"    pm.expect(pm.response.text()).to.include(\"required validation failed on password\")",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "email",
									"value": "toliva@cambridge.org",
									"type": "text"
								},
								{
									"key": "password",
									"value": "",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "https://go-api-qa.cambridgedev.org/v1/services/gigya/login/",
							"protocol": "https",
							"host": [
								"go-api-qa",
								"cambridgedev",
								"org"
							],
							"path": [
								"v1",
								"services",
								"gigya",
								"login",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "08 - Invalid Login - No Email",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify Successful API response\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"pm.test(\"Verify complete JSON response\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"success\")",
									"    pm.expect(pm.response.text()).to.include(\"message\")",
									"    pm.expect(pm.response.text()).to.include(\"code\")",
									"    pm.expect(pm.response.text()).to.include(\"description\")",
									"    pm.expect(pm.response.text()).to.include(\"errors\")",
									"});",
									"pm.test(\"Verify correct error message is thrown\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Unable to login. Incorrect email or password format\")",
									"    pm.expect(pm.response.text()).to.include(\"21000007\")",
									"    pm.expect(pm.response.text()).to.include(\"Unable to login. Make sure email or password format is correct and is present\")",
									"    pm.expect(pm.response.text()).to.include(\"required validation failed on email\")",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "email",
									"value": "",
									"type": "text"
								},
								{
									"key": "password",
									"value": "password1",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "https://go-api-qa.cambridgedev.org/v1/services/gigya/login/",
							"protocol": "https",
							"host": [
								"go-api-qa",
								"cambridgedev",
								"org"
							],
							"path": [
								"v1",
								"services",
								"gigya",
								"login",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "08 - Invalid Login - No Email and Password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify Successful API response\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"pm.test(\"Verify complete JSON response\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"success\")",
									"    pm.expect(pm.response.text()).to.include(\"message\")",
									"    pm.expect(pm.response.text()).to.include(\"code\")",
									"    pm.expect(pm.response.text()).to.include(\"description\")",
									"    pm.expect(pm.response.text()).to.include(\"errors\")",
									"});",
									"pm.test(\"Verify correct error message is thrown\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Unable to login. Incorrect email or password format\")",
									"    pm.expect(pm.response.text()).to.include(\"21000007\")",
									"    pm.expect(pm.response.text()).to.include(\"Unable to login. Make sure email or password format is correct and is present\")",
									"    pm.expect(pm.response.text()).to.include(\"required validation failed on email\")",
									"    pm.expect(pm.response.text()).to.include(\"required validation failed on password\")",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "email",
									"value": "",
									"type": "text"
								},
								{
									"key": "password",
									"value": "",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "https://go-api-qa.cambridgedev.org/v1/services/gigya/login/",
							"protocol": "https",
							"host": [
								"go-api-qa",
								"cambridgedev",
								"org"
							],
							"path": [
								"v1",
								"services",
								"gigya",
								"login",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "08 - Invalid Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"bodyJSON = JSON.parse(responseBody)",
									"value1 = bodyJSON.token",
									"value2 = bodyJSON.refreshToken",
									"pm.environment.set(\"bearerToken\", value1);",
									"pm.environment.set(\"loginToken\", value2);",
									"console.log(value1)",
									"console.log(value2)",
									"",
									"pm.test(\"Verify Successful API response\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"pm.test(\"Verify complete JSON response\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"success\")",
									"    pm.expect(pm.response.text()).to.include(\"message\")",
									"    pm.expect(pm.response.text()).to.include(\"code\")",
									"    pm.expect(pm.response.text()).to.include(\"description\")",
									"});",
									"pm.test(\"Verify correct error message is thrown\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Unable to login. Incorrect email or password.\")",
									"    pm.expect(pm.response.text()).to.include(\"21000003\")",
									"    pm.expect(pm.response.text()).to.include(\"Unable to login. The email or the password is incorrect.\")",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "email",
									"value": "toliva@cambridge.org",
									"type": "text"
								},
								{
									"key": "password",
									"value": "pashwerd",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "https://go-api-qa.cambridgedev.org/v1/services/gigya/login/",
							"protocol": "https",
							"host": [
								"go-api-qa",
								"cambridgedev",
								"org"
							],
							"path": [
								"v1",
								"services",
								"gigya",
								"login",
								""
							]
						}
					},
					"response": []
				}
			]
		}
	]
}