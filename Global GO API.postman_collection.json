{
	"info": {
		"_postman_id": "29856fa0-25c9-47de-8b2c-08ff3a069e7b",
		"name": "Global GO API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "access code",
			"item": [
				{
					"name": "Access code health",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}accessCodes/{{accessCode}}/health",
							"host": [
								"{{URL}}accessCodes"
							],
							"path": [
								"{{accessCode}}",
								"health"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "announcement",
			"item": [
				{
					"name": "Get all active announcements.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Verify return all announcements is able to get a response code 200\"] = responseCode.code === 200;"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}announcements/",
							"host": [
								"{{URL}}announcements"
							],
							"path": [
								""
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "token",
			"item": [
				{
					"name": "token(Do not Include in Runner)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Verify return list of all books is able to get a response code 200\"] = responseCode.code === 200;\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"postman.setEnvironmentVariable(\"token\", jsonData.token);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"user_id\":\"22cc7beb-a6fc-4075-9089-f7987dd42440\",\r\n    \"token\" : \"eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsImtpZCI6IlJFUTBNVVE1TjBOQ1JUSkVNemszTTBVMVJrTkRRMFUwUTBNMVJFRkJSamhETWpkRU5VRkJRZyIsImtleWlkIjoiUkVRME1VUTVOME5DUlRKRU16azNNMFUxUmtORFEwVTBRME0xUkVGQlJqaERNamRFTlVGQlFnIn0.eyJpc3MiOiJodHRwczovL2ZpZG0uZ2lneWEuY29tL2p3dC8zX2VzRHpodjVfZTdvbF9KUkF5WHV3YUwwN0lVZ25yOXFXWXYxTzJRLVpBRkdXanBhaDEyNzV1SnFOcnppa0xwUTgvIiwiYXBpS2V5IjoiM19lc0R6aHY1X2U3b2xfSlJBeVh1d2FMMDdJVWducjlxV1l2MU8yUS1aQUZHV2pwYWgxMjc1dUpxTnJ6aWtMcFE4IiwiaWF0IjoxNjAyOTAzMzU1LCJleHAiOjE2MDI5MDM2NTUsInN1YiI6IjIyY2M3YmViLWE2ZmMtNDA3NS05MDg5LWY3OTg3ZGQ0MjQ0MCJ9.VRnyf37GCdmmpkERstHZYAcfCrrIfQQHzTCZubtoB4fu6DndBAxXkGTX8ZzQiKLCaeL2wVNC6p7G8EWcUFvyYJn4gm6tcxe0xo5bMoT_VZNge5PrebvyZXZ49ffpw8miAhW1IUpqS9_ABKAYMSAP3Qee1hlHTtwH9hOnBfSKcW09B8IzX21-Z6ImHW0Zep1Dbbwh0ZY_ZK2SYNxF_erILhLy8uV_3Q43QOUrxc3Ym9ANC_JyaRaZb_vNNzVKbi_e67aj_Hk187oBqfFCsi8WRQSdl9tz6TsP9npifzATIkuk6URMZedQi7kXpytgQZQYHNJaZV8EWGXvevWAoLoKlA\"\r\n    }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}token/",
							"host": [
								"{{URL}}token"
							],
							"path": [
								""
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "books",
			"item": [
				{
					"name": "Return all books - paremeters request",
					"item": [
						{
							"name": "via page",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Verify return list of all books filtered via page parameters is able to get a response code 200\"] = responseCode.code === 200;\r",
											"\r",
											"var data = JSON.parse(responseBody);\r",
											"tests[\"Verify return list of all books filtered via page parameters is page = to the page value\"] = data.page === 3;"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{URL}}books?page=3",
									"host": [
										"{{URL}}books"
									],
									"query": [
										{
											"key": "page",
											"value": "3"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "via keyword",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Verify return list of all books filtered via page parameters is able to get a response code 200\"] = responseCode.code === 200;\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{URL}}books?keyword=Trial series",
									"host": [
										"{{URL}}books"
									],
									"query": [
										{
											"key": "keyword",
											"value": "Trial series"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "via country id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Verify return list of all books filtered via curriculum id parameters is able to get a response code 200\"] = responseCode.code === 200;\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{URL}}books?country_id[]=13",
									"host": [
										"{{URL}}books"
									],
									"query": [
										{
											"key": "country_id[]",
											"value": "13"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "via curriculum id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Verify return list of all books filtered via curriculum id parameters is able to get a response code 200\"] = responseCode.code === 200;\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{URL}}books?curriculum_id=3",
									"host": [
										"{{URL}}books"
									],
									"query": [
										{
											"key": "curriculum_id",
											"value": "3"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "via subject id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Verify return list of all books filtered via subject id parameters is able to get a response code 200\"] = responseCode.code === 200;\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{URL}}books?subject_id=3",
									"host": [
										"{{URL}}books"
									],
									"query": [
										{
											"key": "subject_id",
											"value": "3"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "via year level id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Verify return list of all books filtered via year level id parameters is able to get a response code 200\"] = responseCode.code === 200;\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{URL}}books?year_level_id=3",
									"host": [
										"{{URL}}books"
									],
									"query": [
										{
											"key": "year_level_id",
											"value": "3"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "via is series with demo 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Series is demo\",function(){ \r",
											"    var x = [];\r",
											"    for(var i = 0; i < jsonData.data.length; i++){\r",
											"        if (jsonData.data[i].trial_id != null){\r",
											"            console.log(x);\r",
											"            x.push(jsonData.data[i].is_enabled)\r",
											"        }\r",
											"    }\r",
											"    pm.expect(x.length).to.eql(jsonData.data.length);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{URL}}books?is_series_with_trial=1",
									"host": [
										"{{URL}}books"
									],
									"query": [
										{
											"key": "is_series_with_trial",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "via is series with demo 0",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Series is demo\",function(){ \r",
											"    var x = [];\r",
											"    for(var i = 0; i < jsonData.data.length; i++){\r",
											"        if (jsonData.data[i].trial_id == null){\r",
											"            console.log(x);\r",
											"            x.push(jsonData.data[i].is_enabled)\r",
											"        }\r",
											"    }\r",
											"    pm.expect(x.length).to.eql(jsonData.data.length);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{URL}}books?is_series_with_trial=0",
									"host": [
										"{{URL}}books"
									],
									"query": [
										{
											"key": "is_series_with_trial",
											"value": "0"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "via is series is enabled",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Series are enabled\",function(){ \r",
											"    var x = [];\r",
											"    for(var i = 0; i < jsonData.data.length; i++){\r",
											"        if (jsonData.data[i].is_enabled == '1'){\r",
											"            console.log(x);\r",
											"            x.push(jsonData.data[i].is_enabled)\r",
											"        }\r",
											"    }\r",
											"    pm.expect(x.length).to.eql(jsonData.data.length);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{URL}}books?is_enabled=1",
									"host": [
										"{{URL}}books"
									],
									"query": [
										{
											"key": "is_enabled",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "via is series is_trial 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Series is Trial\",function(){ \r",
											"    var x = [];\r",
											"    for(var i = 0; i < jsonData.data.length; i++){\r",
											"        if (jsonData.data[i].trial_id != null){\r",
											"            console.log(x);\r",
											"            x.push(jsonData.data[i].is_trial_id)\r",
											"        }\r",
											"    }\r",
											"    pm.expect(x.length).to.eql(jsonData.data.length);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{URL}}books?is_series_with_trial=1",
									"host": [
										"{{URL}}books"
									],
									"query": [
										{
											"key": "is_series_with_trial",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "via is series is_trial 0",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Series is Trial\",function(){ \r",
											"    var x = [];\r",
											"    for(var i = 0; i < jsonData.data.length; i++){\r",
											"        if (jsonData.data[i].trial_id == null){\r",
											"            console.log(x);\r",
											"            x.push(jsonData.data[i].trial_id)\r",
											"        }\r",
											"    }\r",
											"    pm.expect(x.length).to.eql(jsonData.data.length);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{URL}}books?is_series_with_trial=0",
									"host": [
										"{{URL}}books"
									],
									"query": [
										{
											"key": "is_series_with_trial",
											"value": "0"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "via order field and order direction",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Verify return list of all books filtered via series id and order direction parameters is able to get a response code 200\"] = responseCode.code === 200;\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{URL}}books?order_field=series_id&order_direction=DESC",
									"host": [
										"{{URL}}books"
									],
									"query": [
										{
											"key": "order_field",
											"value": "series_id"
										},
										{
											"key": "order_direction",
											"value": "DESC"
										}
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Return list of all books",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Verify return list of all books is able to get a response code 200\"] = responseCode.code === 200;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}books/",
							"host": [
								"{{URL}}books"
							],
							"path": [
								""
							],
							"query": [
								{
									"key": "page",
									"value": "3",
									"disabled": true
								},
								{
									"key": "keyword",
									"value": "AQA",
									"disabled": true
								},
								{
									"key": "curriculum_id",
									"value": "2",
									"disabled": true
								},
								{
									"key": "is_trial",
									"value": "1",
									"disabled": true
								},
								{
									"key": "is_series_with_demo",
									"value": "1",
									"disabled": true
								},
								{
									"key": "is_enabled",
									"value": "0",
									"disabled": true
								},
								{
									"key": "country_id",
									"value": "13",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Return book details",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Verify return book details is able to get a response code 200\"] = responseCode.code === 200;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}books/2265",
							"host": [
								"{{URL}}books"
							],
							"path": [
								"2265"
							]
						}
					},
					"response": []
				},
				{
					"name": "Return book details not found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Verify return book not found is able to get a response code 404\"] = responseCode.code === 404;\r",
									"\r",
									"var data = JSON.parse(responseBody);\r",
									"tests[\"Verify return book not found is able to get message 'Book not found.'\"] = data.message === \"Book not found.\";\r",
									"\r",
									"tests[\"Verify return book not found is able to get success message false\"] = data.success === false;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}books/1000939",
							"host": [
								"{{URL}}books"
							],
							"path": [
								"1000939"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "contents [for update need token]",
			"item": [
				{
					"name": "Return content details",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Verify return content details is able to get a response code 200\"] = responseCode.code === 200;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}contents/2020",
							"host": [
								"{{URL}}contents"
							],
							"path": [
								"2020"
							]
						}
					},
					"response": []
				},
				{
					"name": "Return content details not found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Verify return content details not found is able to get a response code 404\"] = responseCode.code === 404;\r",
									"\r",
									"var data = JSON.parse(responseBody);\r",
									"tests[\"Verify return content details not found is able to get a message 'Content not found.'\"] = data.message === \"Content not found.\";\r",
									"\r",
									"tests[\"Verify return content details not found is able to get a success = false\"] = data.success === false;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}contents/19192020",
							"host": [
								"{{URL}}contents"
							],
							"path": [
								"19192020"
							]
						}
					},
					"response": []
				},
				{
					"name": "Return list of details of content(Dont Include in Runner)(TBU)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Verify return book details is able to get a response code 200\"] = responseCode.code === 200;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}contents/1669/details",
							"host": [
								"{{URL}}contents"
							],
							"path": [
								"1669",
								"details"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "country",
			"item": [
				{
					"name": "Get all countries",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"249 Countries returned\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.data.length).to.eql(249);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}countries",
							"host": [
								"{{URL}}countries"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all countries invalid endpoint",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}countrie",
							"host": [
								"{{URL}}countrie"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "curriculums",
			"item": [
				{
					"name": "Get all curriculums",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Verify return list of all curriculums is able to get a response code 200\"] = responseCode.code === 200;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}curriculums/",
							"host": [
								"{{URL}}curriculums"
							],
							"path": [
								""
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Edjin",
			"item": [
				{
					"name": "Edjin User Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}services/edjin/user/getToken",
							"host": [
								"{{URL}}services"
							],
							"path": [
								"edjin",
								"user",
								"getToken"
							]
						}
					},
					"response": []
				},
				{
					"name": "Edjin User Invalid Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{invalidtoken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}edjin/user/getToken",
							"host": [
								"{{URL}}edjin"
							],
							"path": [
								"user",
								"getToken"
							]
						}
					},
					"response": []
				},
				{
					"name": "Edjin Product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}services/edjin/product/getProduct/335",
							"host": [
								"{{URL}}services"
							],
							"path": [
								"edjin",
								"product",
								"getProduct",
								"335"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Edjin product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{URL}}services/edjin/product/addProduct?product_id=335",
							"host": [
								"{{URL}}services"
							],
							"path": [
								"edjin",
								"product",
								"addProduct"
							],
							"query": [
								{
									"key": "product_id",
									"value": "335"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Elevate",
			"item": [
				{
					"name": "Elevate Credentials",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"tabID\": 4451,\r\n    \"domain\":\"https://www.anz-go-uat.cambridge.edu.au/go/\",\r\n    \"isbn\":\"9781108580212\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}services/elevate/getCredentials",
							"host": [
								"{{URL}}services"
							],
							"path": [
								"elevate",
								"getCredentials"
							],
							"query": [
								{
									"key": "domain",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Elevate Credentials Invalid token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{invalidtoken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"tabID\": 4451,\r\n    \"domain\":\"https://www.anz-go-uat.cambridge.edu.au/go/\",\r\n    \"isbn\":\"9781108580212\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}services/elevate/getCredentials",
							"host": [
								"{{URL}}services"
							],
							"path": [
								"elevate",
								"getCredentials"
							],
							"query": [
								{
									"key": "",
									"value": "",
									"disabled": true
								},
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "formats",
			"item": [
				{
					"name": "formats - parameter request",
					"item": [
						{
							"name": "Get all formats filtered via page",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Verify return list of all formats filtered via page is able to get a response code 200\"] = responseCode.code === 200;\r",
											"\r",
											"var data = JSON.parse(responseBody);\r",
											"tests[\"Verify return list of all books filtered via page parameters is page = to the page value\"] = data.page === 2;"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{URL}}formats?page=2",
									"host": [
										"{{URL}}formats"
									],
									"query": [
										{
											"key": "page",
											"value": "2"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Get all formats",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Verify return list of all formats is able to get a response code 200\"] = responseCode.code === 200;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}formats/",
							"host": [
								"{{URL}}formats"
							],
							"path": [
								""
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "gigya",
			"item": [
				{
					"name": "User login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Verify return list of all books is able to get a response code 200\"] = responseCode.code === 200;\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"postman.setEnvironmentVariable(\"token\", jsonData.token);\r",
									"postman.setEnvironmentVariable(\"user_id\", jsonData.user_id);\r",
									"postman.setEnvironmentVariable(\"refreshToken\", jsonData.refreshToken);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "email",
									"value": "teacheradmin6@pte-mailbox.cambridgedev.org",
									"type": "text"
								},
								{
									"key": "password",
									"value": "globalgo06",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{URL}}services/gigya/login",
							"host": [
								"{{URL}}services"
							],
							"path": [
								"gigya",
								"login"
							],
							"query": [
								{
									"key": "email",
									"value": "qateach_reg8.pen@pte-mailbox.cambridgedev.org",
									"disabled": true
								},
								{
									"key": "password",
									"value": "d3TEhLb3XeIl",
									"disabled": true
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Institutions",
			"item": [
				{
					"name": "Return institution details via oid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}institutions/ee2333e24e053ae82d16c8105a9c001",
							"host": [
								"{{URL}}institutions"
							],
							"path": [
								"ee2333e24e053ae82d16c8105a9c001"
							]
						}
					},
					"response": []
				},
				{
					"name": "Return error for invalid institution oid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"pm.test(\"Success is false\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.success).to.eql(false);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}institutions/{{invalidOID}}",
							"host": [
								"{{URL}}institutions"
							],
							"path": [
								"{{invalidOID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Return users of institution",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "{{URL}}institutions/ee2333e24e053ae82d16c8105a9c001/users",
							"host": [
								"{{URL}}institutions"
							],
							"path": [
								"ee2333e24e053ae82d16c8105a9c001",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Return error of users with invalid Institution",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}institutions/{{invalidOID}}/users",
							"host": [
								"{{URL}}institutions"
							],
							"path": [
								"{{invalidOID}}",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Return error for users of institution with invalid token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{invalidtoken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}institutions/{{OID}}/users",
							"host": [
								"{{URL}}institutions"
							],
							"path": [
								"{{OID}}",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Institution(Do not include in Runner)",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "Admin School Test",
									"type": "text"
								},
								{
									"key": "city",
									"value": "Manila",
									"type": "text"
								},
								{
									"key": "region",
									"value": "CAR",
									"type": "text"
								},
								{
									"key": "country",
									"value": "Philippines",
									"type": "text"
								},
								{
									"key": "regionCode",
									"value": "1133",
									"type": "text"
								},
								{
									"key": "telephone",
									"value": "092132132131",
									"type": "text"
								},
								{
									"key": "url",
									"value": "Test School",
									"type": "text"
								},
								{
									"key": "addressLine1",
									"value": "Line 412",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{URL}}institutions/",
							"host": [
								"{{URL}}institutions"
							],
							"path": [
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Return error for student creating institution",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"pm.test(\"Role is incompatible\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.eql(\"Unable to proceed with user role\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "Test School",
									"type": "text"
								},
								{
									"key": "city",
									"value": "dasdsadsa",
									"type": "text"
								},
								{
									"key": "region",
									"value": "sdsadsa",
									"type": "text"
								},
								{
									"key": "country",
									"value": "Philippines",
									"type": "text"
								},
								{
									"key": "regionCode",
									"value": "asdsadsa",
									"type": "text"
								},
								{
									"key": "telephone",
									"value": "dasdas",
									"type": "text"
								},
								{
									"key": "url",
									"value": "test.com",
									"type": "text"
								},
								{
									"key": "addressLine1",
									"value": "dasdas",
									"type": "text"
								},
								{
									"key": "addressLine2",
									"value": "adsdasdsa",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{URL}}institutions/",
							"host": [
								"{{URL}}institutions"
							],
							"path": [
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Institution Invalid Authorization",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"pm.test(\"Sucess is false\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.success).to.eql(false);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{invalidtoken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{URL}}institutions/?name=&city&region&coutnry&regionCode&telephone&url&addressLine1&addressLine2",
							"host": [
								"{{URL}}institutions"
							],
							"path": [
								""
							],
							"query": [
								{
									"key": "name",
									"value": ""
								},
								{
									"key": "city",
									"value": null
								},
								{
									"key": "region",
									"value": null
								},
								{
									"key": "coutnry",
									"value": null
								},
								{
									"key": "regionCode",
									"value": null
								},
								{
									"key": "telephone",
									"value": null
								},
								{
									"key": "url",
									"value": null
								},
								{
									"key": "addressLine1",
									"value": null
								},
								{
									"key": "addressLine2",
									"value": null
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Institution Invalid input",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"pm.test(\"Sucess is false\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.success).to.eql(false);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{URL}}institutions/?name=&city=&region=&country=&regionCode=&telephone=&url=&addressLine1=&addressLine2=",
							"host": [
								"{{URL}}institutions"
							],
							"path": [
								""
							],
							"query": [
								{
									"key": "name",
									"value": ""
								},
								{
									"key": "city",
									"value": ""
								},
								{
									"key": "region",
									"value": ""
								},
								{
									"key": "country",
									"value": ""
								},
								{
									"key": "regionCode",
									"value": ""
								},
								{
									"key": "telephone",
									"value": ""
								},
								{
									"key": "url",
									"value": ""
								},
								{
									"key": "addressLine1",
									"value": ""
								},
								{
									"key": "addressLine2",
									"value": ""
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Integrations",
			"item": [
				{
					"name": "Return all Integration",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}integrations/",
							"host": [
								"{{URL}}integrations"
							],
							"path": [
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "HM Integration",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Is Edjin Integration\", function () {\r",
									"  pm.expect(jsonData.name).to.eql(\"Edjin\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}integrations/1",
							"host": [
								"{{URL}}integrations"
							],
							"path": [
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "GoElevate Integration",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Is Elevate Integration\", function () {\r",
									"  pm.expect(jsonData.name).to.eql(\"Elevate\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}integrations/2",
							"host": [
								"{{URL}}integrations"
							],
							"path": [
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "Epub Integration",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Is Epub Integration\", function () {\r",
									"  pm.expect(jsonData.name).to.eql(\"EPub\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}integrations/3",
							"host": [
								"{{URL}}integrations"
							],
							"path": [
								"3"
							]
						}
					},
					"response": []
				},
				{
					"name": "ITB Integration",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Is ITB Integration\", function () {\r",
									"  pm.expect(jsonData.name).to.eql(\"Interactive Textbook\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}integrations/4",
							"host": [
								"{{URL}}integrations"
							],
							"path": [
								"4"
							]
						}
					},
					"response": []
				},
				{
					"name": "Testhub Integration",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Is Invalid Integration\", function () {\r",
									"  pm.expect(jsonData.name).to.eql(\"Testhub\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}integrations/5",
							"host": [
								"{{URL}}integrations"
							],
							"path": [
								"5"
							]
						}
					},
					"response": []
				},
				{
					"name": "Digital Checkpoints Integration",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Is Invalid Integration\", function () {\r",
									"  pm.expect(jsonData.name).to.eql(\"Digital Checkpoints\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}integrations/6",
							"host": [
								"{{URL}}integrations"
							],
							"path": [
								"6"
							]
						}
					},
					"response": []
				},
				{
					"name": "Invalid Integration",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Is Invalid Integration\", function () {\r",
									"  pm.expect(jsonData.message).to.eql(\"Integration not found.\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}integrations/7",
							"host": [
								"{{URL}}integrations"
							],
							"path": [
								"7"
							]
						}
					},
					"response": []
				},
				{
					"name": "Return resources per integration (Do not Include in Runner)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Is Edjin Integration\", function () {\r",
									"  pm.expect(jsonData.name).to.eql(\"Edjin\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}integrations/{{client_id}}/userResources",
							"host": [
								"{{URL}}integrations"
							],
							"path": [
								"{{client_id}}",
								"userResources"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "resources",
			"item": [
				{
					"name": "Loads all user resources which are series details",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}resources/",
							"host": [
								"{{URL}}resources"
							],
							"path": [
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Loads all user resources which are series with valid authorization",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Verify return list of all user resources with invalid authorization is able to get a response code 401\"] = responseCode.code === 401;\r",
									"\r",
									"var data = JSON.parse(responseBody);\r",
									"tests[\"Verify return list of all user resources with invalid authorization is able to get message 'InvalidJwtToken'\"] = data.message === \"InvalidJwtToken\";\r",
									"\r",
									"tests[\"Verify return list of all user resources with invalid authorization is able to get success message false\"] = data.success === false;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{invalidtoken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}resources/",
							"host": [
								"{{URL}}resources"
							],
							"path": [
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Activate Access code (Do not Include in Runner)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Verify return list of all user resources is able to get a response code 200\"] = responseCode.code === 201;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}resources?proof=Y5WN-MR7L-25RU-Q292",
							"host": [
								"{{URL}}resources"
							],
							"query": [
								{
									"key": "proof",
									"value": "Y5WN-MR7L-25RU-Q292"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Activate Access code Invalid Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Verify return list of all user resources is able to get a response code 401\"] = responseCode.code === 401;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{invalidtoken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}resources?proof=987V-86VJ-779C-END7",
							"host": [
								"{{URL}}resources"
							],
							"query": [
								{
									"key": "proof",
									"value": "987V-86VJ-779C-END7"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Activate Reactivation code(Do not Include in Runner)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Verify return list of all user resources is able to get a response code 200\"] = responseCode.code === 201;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}resources?proof=37E8-DRXM-6E3F-VR2R&print_reactivation_proof=R96E-V9WD-28WH-4M9K",
							"host": [
								"{{URL}}resources"
							],
							"query": [
								{
									"key": "proof",
									"value": "37E8-DRXM-6E3F-VR2R"
								},
								{
									"key": "proof",
									"value": "R96E-V9WD-28WH-4M9K",
									"disabled": true
								},
								{
									"key": "print_reactivation_proof",
									"value": "R96E-V9WD-28WH-4M9K"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Activate Reactivation code Invalid Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Verify return list of all user resources is able to get a response code 401\"] = responseCode.code === 401;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{invalidtoken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}resources?proof=37E8-DRXM-6E3F-VR2R&print_reactivation_proof=R96E-V9WD-28WH-4M9K",
							"host": [
								"{{URL}}resources"
							],
							"query": [
								{
									"key": "proof",
									"value": "37E8-DRXM-6E3F-VR2R"
								},
								{
									"key": "proof",
									"value": "R96E-V9WD-28WH-4M9K",
									"disabled": true
								},
								{
									"key": "print_reactivation_proof",
									"value": "R96E-V9WD-28WH-4M9K"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Activate Trial code",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Verify return list of all user resources is able to get a response code 200\"] = responseCode.code === 201;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}resources?trial_id={{trial_id}}",
							"host": [
								"{{URL}}resources"
							],
							"query": [
								{
									"key": "trial_id",
									"value": "{{trial_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Activate using a non trial entitlement id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Verify return list of all user resources is able to get a response code 200\"] = responseCode.code === 404;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}resources?trial_id={{nontrial_id}}",
							"host": [
								"{{URL}}resources"
							],
							"query": [
								{
									"key": "trial_id",
									"value": "{{nontrial_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Activate Trial code Invalid Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Verify return list of all user resources is able to get a response code 401\"] = responseCode.code === 401;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{invalidtoken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}resources?trial_id=4754",
							"host": [
								"{{URL}}resources"
							],
							"query": [
								{
									"key": "trial_id",
									"value": "4754"
								}
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "series",
			"item": [
				{
					"name": "Series titles parameter request",
					"item": [
						{
							"name": "Return the list of series titles via is_enabled 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Verify return list of series details titles is able to get a response code 200\"] = responseCode.code === 200;\r",
											"\r",
											"var responseJson = pm.response.json();\r",
											"pm.test(\"Books are enabled = 1\",function(){ \r",
											"    var x = [];\r",
											"    for(var i = 0; i < responseJson.data.length; i++){\r",
											"        if (responseJson.data[i].is_enabled == '1'){\r",
											"            x.push(responseJson.data[i].is_enabled)\r",
											"        }\r",
											"    }\r",
											"    pm.expect(x.length).to.eql(responseJson.data.length);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{URL}}series/333/titles?is_enabled=1",
									"host": [
										"{{URL}}series"
									],
									"path": [
										"333",
										"titles"
									],
									"query": [
										{
											"key": "is_enabled",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Return the list of series titles via curriculum_id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Verify return list of series details titles is able to get a response code 200\"] = responseCode.code === 200;"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{URL}}series/139/titles?curriculum_id[]=3",
									"host": [
										"{{URL}}series"
									],
									"path": [
										"139",
										"titles"
									],
									"query": [
										{
											"key": "curriculum_id[]",
											"value": "3"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Return the list of series titles via subject_id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Verify return list of series details titles is able to get a response code 200\"] = responseCode.code === 200;"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{URL}}series/139/titles?subject_id[]=1",
									"host": [
										"{{URL}}series"
									],
									"path": [
										"139",
										"titles"
									],
									"query": [
										{
											"key": "subject_id[]",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Return the list of series titles via yearlevel_id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Verify return list of series details titles is able to get a response code 200\"] = responseCode.code === 200;"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{URL}}series/139/titles?year_level_id[]=21",
									"host": [
										"{{URL}}series"
									],
									"path": [
										"139",
										"titles"
									],
									"query": [
										{
											"key": "year_level_id[]",
											"value": "21"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Return the list of series titles via hasdemo_id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Verify return list of series details titles is able to get a response code 200\"] = responseCode.code === 200;\r",
											"\r",
											"pm.test(\"Demo id is not null\", function() {\r",
											"var jsonData = pm.response.json();\r",
											"pm.expect(jsonData.data.demo_id).not.eq(null);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{URL}}series/300/titles?has_demo_id[]=",
									"host": [
										"{{URL}}series"
									],
									"path": [
										"300",
										"titles"
									],
									"query": [
										{
											"key": "has_demo_id[]",
											"value": ""
										}
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "formats - parameter request",
					"item": [
						{
							"name": "Return list of series via pretty url (Don not Include in Runner)(TBU)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Verify return list of all series filtered via pretty url is able to get a response code 200\"] = responseCode.code === 200;\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{URL}}series?pretty_url=A-AS-Level-English-Language-for-AQA-Student-Book",
									"host": [
										"{{URL}}series"
									],
									"query": [
										{
											"key": "pretty_url",
											"value": "A-AS-Level-English-Language-for-AQA-Student-Book"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Return list of series via is enabled",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Verify return list of all series filtered via pretty url is able to get a response code 200\"] = responseCode.code === 200;\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{URL}}series/333/titles?is_enabled=1",
									"host": [
										"{{URL}}series"
									],
									"path": [
										"333",
										"titles"
									],
									"query": [
										{
											"key": "is_enabled",
											"value": "1"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Return list of series",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Verify return list of all series is able to get a response code 200\"] = responseCode.code === 200;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}series/",
							"host": [
								"{{URL}}series"
							],
							"path": [
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Return series details",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Verify return list of series details is able to get a response code 200\"] = responseCode.code === 200;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}series/333",
							"host": [
								"{{URL}}series"
							],
							"path": [
								"333"
							]
						}
					},
					"response": []
				},
				{
					"name": "Return series details not found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Verify return list of series details not found is able to get a response code 404\"] = responseCode.code === 404;\r",
									"\r",
									"var data = JSON.parse(responseBody);\r",
									"tests[\"Verify return list of series details not found is able to get message 'Series not found.'\"] = data.message === \"Series not found.\";\r",
									"\r",
									"tests[\"Verify return list of series details not found is able to get success message false\"] = data.success === false;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}series/333000",
							"host": [
								"{{URL}}series"
							],
							"path": [
								"333000"
							]
						}
					},
					"response": []
				},
				{
					"name": "Return series details tabs",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Verify return list of series details tabs is able to get a response code 200\"] = responseCode.code === 200;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}series/333/tabs",
							"host": [
								"{{URL}}series"
							],
							"path": [
								"333",
								"tabs"
							]
						}
					},
					"response": []
				},
				{
					"name": "Return the list of series titles",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Verify return list of series details titles is able to get a response code 200\"] = responseCode.code === 200;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}series/333/titles",
							"host": [
								"{{URL}}series"
							],
							"path": [
								"333",
								"titles"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "subjects",
			"item": [
				{
					"name": "Return list of all subjects",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Verify return list of all subjects is able to get a response code 200\"] = responseCode.code === 200;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}subjects/",
							"host": [
								"{{URL}}subjects"
							],
							"path": [
								""
							],
							"query": [
								{
									"key": "country_id",
									"value": "",
									"disabled": true
								},
								{
									"key": "is_enabled",
									"value": "1",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Return list of subjects by country_id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Verify return list of all subjects is able to get a response code 200\"] = responseCode.code === 200;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}subjects/?country_id[]=13",
							"host": [
								"{{URL}}subjects"
							],
							"path": [
								""
							],
							"query": [
								{
									"key": "country_id[]",
									"value": "13"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Return list of enabled subjects",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Verify return list of all subjects is able to get a response code 200\"] = responseCode.code === 200;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}subjects/?is_enabled=1",
							"host": [
								"{{URL}}subjects"
							],
							"path": [
								""
							],
							"query": [
								{
									"key": "is_enabled",
									"value": "1"
								}
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "survey",
			"item": []
		},
		{
			"name": "tabs",
			"item": [
				{
					"name": "formats - parameter request Copy",
					"item": [
						{
							"name": "Return the list of tab contents via page filter",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Verify return list of tab contents via page filter is able to get a response code 200\"] = responseCode.code === 200;\r",
											"\r",
											"var data = JSON.parse(responseBody);\r",
											"tests[\"Verify return list of tab contents via page filter is able to get page = 2\"] = data.page === 2;\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{URL}}tabs/4797/contents?page=2",
									"host": [
										"{{URL}}tabs"
									],
									"path": [
										"4797",
										"contents"
									],
									"query": [
										{
											"key": "page",
											"value": "2"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Return the list of tab contents via order field and order direction=ASC",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Verify return list of tab contents via order field and order direction is able to get a response code 200\"] = responseCode.code === 200;\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{URL}}tabs/4797/contents?order_field=heading&order_direction=ASC",
									"host": [
										"{{URL}}tabs"
									],
									"path": [
										"4797",
										"contents"
									],
									"query": [
										{
											"key": "order_field",
											"value": "heading"
										},
										{
											"key": "order_direction",
											"value": "ASC"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Return the list of tab contents",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Verify return list of tab contents is able to get a response code 200\"] = responseCode.code === 200;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}tabs/4797/contents",
							"host": [
								"{{URL}}tabs"
							],
							"path": [
								"4797",
								"contents"
							]
						}
					},
					"response": []
				},
				{
					"name": "Return the list of tab contents not found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Verify return list of tab contents not found is able to get a response code 404\"] = responseCode.code === 404;\r",
									"\r",
									"var data = JSON.parse(responseBody);\r",
									"tests[\"Verify return list of tab contents not found is able to get message 'Tab not found.'\"] = data.message === \"Tab not found.\";\r",
									"\r",
									"tests[\"Verify return list of tab contents not found is able to get success message false\"] = data.success === false;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}tabs/1004797/contents",
							"host": [
								"{{URL}}tabs"
							],
							"path": [
								"1004797",
								"contents"
							]
						}
					},
					"response": []
				},
				{
					"name": "Return tab record",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Verify return tab record is able to get a response code 200\"] = responseCode.code === 200;\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}tabs/3899",
							"host": [
								"{{URL}}tabs"
							],
							"path": [
								"3899"
							]
						}
					},
					"response": []
				},
				{
					"name": "Return tab record not found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Verify return tab record is able to get a response code 404\"] = responseCode.code === 404;\r",
									"\r",
									"var data = JSON.parse(responseBody);\r",
									"tests[\"Verify return tab record is able to get message 'Tab not found.'\"] = data.message === \"Tab not found.\";\r",
									"\r",
									"tests[\"Verify return tab record able to get success message false\"] = data.success === false;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}tabs/1004797",
							"host": [
								"{{URL}}tabs"
							],
							"path": [
								"1004797"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "titles",
			"item": [
				{
					"name": "Return title details",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Verify return title detail is able to get a response code 200\"] = responseCode.code === 200;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}titles/2776",
							"host": [
								"{{URL}}titles"
							],
							"path": [
								"2776"
							]
						}
					},
					"response": []
				},
				{
					"name": "Return title details not found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Verify return title detail not found is able to get a response code 404\"] = responseCode.code === 404;\r",
									"\r",
									"var data = JSON.parse(responseBody);\r",
									"tests[\"Verify return title detail not found is able to get a message 'Title not found.'\"] = data.message === \"Title not found.\";\r",
									"\r",
									"tests[\"Verify return title detail not found is able to get a success message false\"] = data.success === false;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}titles/10000",
							"host": [
								"{{URL}}titles"
							],
							"path": [
								"10000"
							]
						}
					},
					"response": []
				},
				{
					"name": "Return the list of title tabs",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Verify return list of title tabs is able to get a response code 200\"] = responseCode.code === 200;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}titles/2657/tabs",
							"host": [
								"{{URL}}titles"
							],
							"path": [
								"2657",
								"tabs"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "trial",
			"item": [
				{
					"name": "Return tabs of trial",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}trials/{{trial_id}}/tabs",
							"host": [
								"{{URL}}trials"
							],
							"path": [
								"{{trial_id}}",
								"tabs"
							]
						}
					},
					"response": []
				},
				{
					"name": "Return error message for no tabs of trial",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"pm.test(\"Tab not Found\", function(){\r",
									" pm.expect(jsonData.message).to.eql(\"Tab not found.\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}trials/{{notabtrial_id}}/tabs",
							"host": [
								"{{URL}}trials"
							],
							"path": [
								"{{notabtrial_id}}",
								"tabs"
							]
						}
					},
					"response": []
				},
				{
					"name": "Return error message for non trial entitlement",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"pm.test(\"Entitlement is not trial\", function(){\r",
									" pm.expect(jsonData.message).to.eql(\"Unable to search resources.\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}trials/{{nontrial_id}}/tabs",
							"host": [
								"{{URL}}trials"
							],
							"path": [
								"{{nontrial_id}}",
								"tabs"
							]
						}
					},
					"response": []
				},
				{
					"name": "Return error message for trial entitlement not existing",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"pm.test(\"Entitlement not Found\", function(){\r",
									" pm.expect(jsonData.message).to.eql(\"Unable to locate demo entitlement for book.\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}trials/423121/tabs",
							"host": [
								"{{URL}}trials"
							],
							"path": [
								"423121",
								"tabs"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "user",
			"item": [
				{
					"name": "Trial product page",
					"item": [
						{
							"name": "Return flag if user is eligible to activate a Trial resource",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"pm.test(\"User is Eligible\", function () {\r",
											"    pm.expect(jsonData.data.isEligible).to.eql(true);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{URL}}users/trials/{{trial_id}}",
									"host": [
										"{{URL}}users"
									],
									"path": [
										"trials",
										"{{trial_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Return flag if user has active subscription on trial product",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"pm.test(\"User has active subscription on trial\", function () {\r",
											"    pm.expect(jsonData.data.description).to.eql(\"The user has an active trial subscription\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{URL}}users/trials/{{trial_id1}}",
									"host": [
										"{{URL}}users"
									],
									"path": [
										"trials",
										"{{trial_id1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Return flag if user has maxed out the activation of a trial product",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"pm.test(\"User has active subscription on trial\", function () {\r",
											"    pm.expect(jsonData.data.description).to.eql(\"The trial has reached its activation limit\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{URL}}users/trials/{{trial_id}}",
									"host": [
										"{{URL}}users"
									],
									"path": [
										"trials",
										"{{trial_id}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Created Institution",
					"item": [
						{
							"name": "Return user institution via cache = 1",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "cache",
											"value": "1",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{URL}}user/institutions",
									"host": [
										"{{URL}}user"
									],
									"path": [
										"institutions"
									]
								}
							},
							"response": []
						},
						{
							"name": "Return user institution via cache = 0",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "cache",
											"value": "0",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{URL}}user/institutions",
									"host": [
										"{{URL}}user"
									],
									"path": [
										"institutions"
									]
								}
							},
							"response": []
						},
						{
							"name": "Return user institution via cache Invalid Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"pm.test(\"Success is false\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.success).to.eql(false);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{invalidtoken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{URL}}user/institutions?cache=1",
									"host": [
										"{{URL}}user"
									],
									"path": [
										"institutions"
									],
									"query": [
										{
											"key": "cache",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Return error using invalid cache value",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"pm.test(\"Success is false\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.success).to.eql(false);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{URL}}user/institutions?cache=2",
									"host": [
										"{{URL}}user"
									],
									"path": [
										"institutions"
									],
									"query": [
										{
											"key": "cache",
											"value": "2"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Return user institution via skip = 1",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "{{URL}}user/institutions?skip=1",
									"host": [
										"{{URL}}user"
									],
									"path": [
										"institutions"
									],
									"query": [
										{
											"key": "skip",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Return user institution via skip = 0",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "{{URL}}user/institutions?skip=0",
									"host": [
										"{{URL}}user"
									],
									"path": [
										"institutions"
									],
									"query": [
										{
											"key": "skip",
											"value": "0"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Join user to institution via school code",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "schoolCode",
											"value": "{{schoolCode}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{URL}}user/institution",
									"host": [
										"{{URL}}user"
									],
									"path": [
										"institution"
									]
								}
							},
							"response": []
						},
						{
							"name": "Return error for users that has existing institution and is joining a new institution",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "schoolCode",
											"value": "{{schoolCode}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{URL}}user/institution/",
									"host": [
										"{{URL}}user"
									],
									"path": [
										"institution",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Return error for invalid auth joining institution",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{invalidtoken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "schoolCode",
											"value": "{{schoolCode}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{URL}}user/institution/",
									"host": [
										"{{URL}}user"
									],
									"path": [
										"institution",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Return error for user using invalid join school code",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "schoolCode",
											"value": "{{invalidSchoolCode}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{URL}}user/institution/",
									"host": [
										"{{URL}}user"
									],
									"path": [
										"institution",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Return error for user joining unverified school",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "schoolCode",
											"value": "{{unverifiedSchoolCode}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{URL}}user/institution/",
									"host": [
										"{{URL}}user"
									],
									"path": [
										"institution",
										""
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "year levels",
			"item": [
				{
					"name": "Get all year levels.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Verify return all year levels is able to get a response code 200\"] = responseCode.code === 200;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}yearlevels/",
							"host": [
								"{{URL}}yearlevels"
							],
							"path": [
								""
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"",
					"",
					"",
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}