{
	"info": {
		"_postman_id": "24e51254-1a3c-4ea9-a3fc-98241108895a",
		"name": "go-backend_cicd_qa",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
	},
	"item": [
		{
			"name": "accessCodes",
			"item": [
				{
					"name": "Return health of access codes",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"pm.test(\"Permission is not usable\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.eql(\"Permission is not usable.\");\r",
									"});"
								],
								"type": "text/javascript",
								"id": "54805c23-f790-4871-9b20-ae9ea4e05059"
							}
						}
					],
					"_postman_id": "359dd759-5549-4993-a141-e44fd72df0b6",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/xml",
								"type": "text"
							}
						],
						"url": "{{URL}}accessCodes/{{accessCode}}/health"
					},
					"response": []
				}
			],
			"_postman_id": "7a773aa5-c49f-4044-a2e1-d941ff7538cc"
		},
		{
			"name": "announcements",
			"item": [
				{
					"name": "Get all active announcements.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "6878adaa-5038-4312-8c43-b9e7214290a4"
							}
						}
					],
					"_postman_id": "10488c11-51e2-4d36-adb1-f174b3cbadc1",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{URL}}announcements/"
					},
					"response": []
				}
			],
			"_postman_id": "8bc2a193-9283-4a9b-91d2-fe5c4dd2bbef"
		},
		{
			"name": "books",
			"item": [
				{
					"name": "Return list of all books",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "7ede13bb-cdd5-4363-b97c-632518bc177f"
							}
						}
					],
					"_postman_id": "62b6c152-2bc4-460b-85a8-d2090e1a687f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}books/",
							"host": [
								"{{URL}}books"
							],
							"path": [
								""
							],
							"query": [
								{
									"key": "page",
									"value": "3",
									"disabled": true
								},
								{
									"key": "keyword",
									"value": "AQA",
									"disabled": true
								},
								{
									"key": "curriculum_id",
									"value": "2",
									"disabled": true
								},
								{
									"key": "is_trial",
									"value": "1",
									"disabled": true
								},
								{
									"key": "is_series_with_demo",
									"value": "1",
									"disabled": true
								},
								{
									"key": "is_enabled",
									"value": "0",
									"disabled": true
								},
								{
									"key": "country_id",
									"value": "13",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Return book details",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "fbe46ed6-8489-4003-84d1-449915af58ab"
							}
						}
					],
					"_postman_id": "0bcb652f-564a-4ddb-8b46-2550531320a8",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{URL}}books/2265"
					},
					"response": []
				},
				{
					"name": "Return book details not found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Book is not found\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.data.description).to.eql(\"Book not found. Make sure id is correct.\");\r",
									"});"
								],
								"type": "text/javascript",
								"id": "ef533c73-48c1-44f7-9bed-bc06b5ce88d3"
							}
						}
					],
					"_postman_id": "271d0261-3225-4825-8c76-cd1acab7ce8e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{URL}}books/1000939"
					},
					"response": []
				},
				{
					"name": "Return book via page",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Is on page 3\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.page).to.eql(3);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "22ac89af-d510-42a7-b197-95897aba79f9"
							}
						}
					],
					"_postman_id": "4474ce75-e628-46e8-bf8e-7bc7189573ee",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}books?page=3",
							"host": [
								"{{URL}}books"
							],
							"query": [
								{
									"key": "page",
									"value": "3"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Return book via keyword",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"pm.test(\"has Trial\",function(){ \r",
									"    var x = [];\r",
									"    for(var i = 0; i < jsonData.data.length; i++){\r",
									"        if (jsonData.data[i].name.toLowerCase().match(\"trial\")){\r",
									"            x.push(jsonData.data[i].name)\r",
									"        }\r",
									"    }\r",
									"    pm.expect(x.length).to.eql(jsonData.data.length);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "499f1667-8455-478b-a4e4-6dd7235be722"
							}
						}
					],
					"_postman_id": "7d0f0dbe-00c6-40d6-93b1-593350eea004",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}books?keyword=Trial series",
							"host": [
								"{{URL}}books"
							],
							"query": [
								{
									"key": "keyword",
									"value": "Trial series"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Return book via country id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "c45c59c0-2912-4bb1-9c58-9a3245709339"
							}
						}
					],
					"_postman_id": "7d6313b8-1e18-4ce0-8186-9f2e017042fb",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}books?country_id[]=13",
							"host": [
								"{{URL}}books"
							],
							"query": [
								{
									"key": "country_id[]",
									"value": "13"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Return book via curriculum id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "d1c0e692-35ec-4177-a51a-89b2f8064d92"
							}
						}
					],
					"_postman_id": "4b6235f1-1a84-4a98-bfcd-e820fba876d2",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}books?curriculum_id=3",
							"host": [
								"{{URL}}books"
							],
							"query": [
								{
									"key": "curriculum_id",
									"value": "3"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Return book via subject id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "e41f8ffe-1bcf-423e-853d-750355edc606"
							}
						}
					],
					"_postman_id": "c536ec41-6a58-4cbb-9584-5cb64678d094",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}books?subject_id=3",
							"host": [
								"{{URL}}books"
							],
							"query": [
								{
									"key": "subject_id",
									"value": "3"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Return book via year level id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "58062b6f-12ca-48dc-9cdb-a0e73f83e0f8"
							}
						}
					],
					"_postman_id": "bd1605eb-972a-4eba-8651-95fb58e6f69f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}books?year_level_id=3",
							"host": [
								"{{URL}}books"
							],
							"query": [
								{
									"key": "year_level_id",
									"value": "3"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Return book via is series demo 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Series is demo\",function(){ \r",
									"    var x = [];\r",
									"    for(var i = 0; i < jsonData.data.length; i++){\r",
									"        if (jsonData.data[i].trial_id != null){\r",
									"            console.log(x);\r",
									"            x.push(jsonData.data[i].is_enabled)\r",
									"        }\r",
									"    }\r",
									"    pm.expect(x.length).to.eql(jsonData.data.length);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "8440102f-a887-4b30-93a7-bbf6e688356c"
							}
						}
					],
					"_postman_id": "ef863c79-5abf-4967-8202-1ef08056c156",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}books?is_series_with_trial=1",
							"host": [
								"{{URL}}books"
							],
							"query": [
								{
									"key": "is_series_with_trial",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Return book via is series with demo 0",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Series is demo\",function(){ \r",
									"    var x = [];\r",
									"    for(var i = 0; i < jsonData.data.length; i++){\r",
									"        if (jsonData.data[i].trial_id == null){\r",
									"            console.log(x);\r",
									"            x.push(jsonData.data[i].is_enabled)\r",
									"        }\r",
									"    }\r",
									"    pm.expect(x.length).to.eql(jsonData.data.length);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "82af3048-6564-4c71-a9a0-db666aa4cfb9"
							}
						}
					],
					"_postman_id": "f85de91f-6448-4271-848b-14d51dbc0615",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}books?is_series_with_trial=0",
							"host": [
								"{{URL}}books"
							],
							"query": [
								{
									"key": "is_series_with_trial",
									"value": "0"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Return book via is series is enabled",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Series are enabled\",function(){ \r",
									"    var x = [];\r",
									"    for(var i = 0; i < jsonData.data.length; i++){\r",
									"        if (jsonData.data[i].is_enabled == '1'){\r",
									"            console.log(x);\r",
									"            x.push(jsonData.data[i].is_enabled)\r",
									"        }\r",
									"    }\r",
									"    pm.expect(x.length).to.eql(jsonData.data.length);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "dea720ec-d989-428e-8655-c6d4d4252ea2"
							}
						}
					],
					"_postman_id": "104bd525-2043-4bcf-b717-e74f5964864e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}books?is_enabled=1",
							"host": [
								"{{URL}}books"
							],
							"query": [
								{
									"key": "is_enabled",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Return book via is series is_trial 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Series is Trial\",function(){ \r",
									"    var x = [];\r",
									"    for(var i = 0; i < jsonData.data.length; i++){\r",
									"        if (jsonData.data[i].trial_id != null){\r",
									"            console.log(x);\r",
									"            x.push(jsonData.data[i].is_trial_id)\r",
									"        }\r",
									"    }\r",
									"    pm.expect(x.length).to.eql(jsonData.data.length);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "18e28185-0e83-4189-8bf6-6fa2dcb003ea"
							}
						}
					],
					"_postman_id": "b802e3e6-7fc6-4757-8062-cd7b0b13b492",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}books?is_series_with_trial=1",
							"host": [
								"{{URL}}books"
							],
							"query": [
								{
									"key": "is_series_with_trial",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Return book via is series is_trial 0",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Series is Trial\",function(){ \r",
									"    var x = [];\r",
									"    for(var i = 0; i < jsonData.data.length; i++){\r",
									"        if (jsonData.data[i].trial_id == null){\r",
									"            console.log(x);\r",
									"            x.push(jsonData.data[i].trial_id)\r",
									"        }\r",
									"    }\r",
									"    pm.expect(x.length).to.eql(jsonData.data.length);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "5a5d98d1-9bb3-4ac0-a006-bd0d90d77d95"
							}
						}
					],
					"_postman_id": "cf74378a-ba9c-4772-9b6d-134a601871e4",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}books?is_series_with_trial=0",
							"host": [
								"{{URL}}books"
							],
							"query": [
								{
									"key": "is_series_with_trial",
									"value": "0"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Return book via order field and order direction",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"id": "3893ded3-924b-4c9f-b8f4-4218237d78df"
							}
						}
					],
					"_postman_id": "053788d7-ada3-46b3-a85b-f92ab129c194",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}books?order_field=name&order_direction=DESC",
							"host": [
								"{{URL}}books"
							],
							"query": [
								{
									"key": "order_field",
									"value": "name"
								},
								{
									"key": "order_direction",
									"value": "DESC"
								}
							]
						}
					},
					"response": []
				}
			],
			"_postman_id": "6986d44d-5eca-4562-a428-71a4f7f6e377"
		},
		{
			"name": "contents",
			"item": [
				{
					"name": "Return content details",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "ab8e1ab7-9e8c-4acc-962b-b2c38d774d13"
							}
						}
					],
					"_postman_id": "49e216a9-fc67-43f8-8c69-6a351a92fe67",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{token}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{URL}}contents/2020"
					},
					"response": []
				},
				{
					"name": "Return content details not found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"pm.test(\"Content not found\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.data.description).to.eql(\"Content not found. Make sure id is correct.\");\r",
									"});"
								],
								"type": "text/javascript",
								"id": "eef0f27b-d17d-449f-aee2-5e0c3f41eeb1"
							}
						}
					],
					"_postman_id": "d330d866-4277-4d35-b54b-ffbc4610ea96",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{token}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{URL}}contents/19192020"
					},
					"response": []
				},
				{
					"name": "Return list of details of content",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"id": "ddb7e914-8fb7-4cac-899d-6df6976060b2"
							}
						}
					],
					"_postman_id": "63fb4f4d-3107-4bc7-8717-6d9b731da39b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{token}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{URL}}contents/2000/details"
					},
					"response": []
				}
			],
			"_postman_id": "fdea2295-202a-4aba-afda-41f9c71254b3",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						],
						"id": "1d9c14a1-7a91-4ae4-ad6d-5a34a75c53d4"
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						],
						"id": "fa165bb9-7dd5-4713-9dcc-ff5ecc05632c"
					}
				}
			]
		},
		{
			"name": "countries",
			"item": [
				{
					"name": "Return list of countries",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"249 Countries returned\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.data.length).to.eql(249);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "6be2b045-dba7-420e-abd1-e52b2d539a1d"
							}
						}
					],
					"_postman_id": "2034e003-19aa-4a95-9197-b2ea0e3b91dd",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{URL}}countries"
					},
					"response": []
				},
				{
					"name": "Return list of countries with invalid endpoint",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "ee2067e6-e06c-48b3-b09a-b8e5a2738e24"
							}
						}
					],
					"_postman_id": "6dcd133b-abe2-4e0c-8416-9f49217a68bc",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{URL}}countrie"
					},
					"response": []
				}
			],
			"_postman_id": "ae56ecf1-8ab7-4d2a-b6f0-fe53c66cbf5d"
		},
		{
			"name": "curriculums",
			"item": [
				{
					"name": "Return all curriculums",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Verify return list of all curriculums is able to get a response code 200\"] = responseCode.code === 200;"
								],
								"type": "text/javascript",
								"id": "c63cdb68-0069-49bb-b239-ab4cb2e16462"
							}
						}
					],
					"_postman_id": "c23ee02f-c50b-4a3e-b2fb-f0b64cfe5a85",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{URL}}curriculums/"
					},
					"response": []
				},
				{
					"name": "Return all curriculums via country_id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Country is Australia\",function(){ \r",
									"    var x = [];\r",
									"    for(var i = 0; i < jsonData.data.length; i++){\r",
									"        if (jsonData.data[i].country_id = 13){\r",
									"            console.log(x);\r",
									"            x.push(jsonData.data[i].country_id)\r",
									"        }\r",
									"    }\r",
									"    pm.expect(x.length).to.eql(jsonData.data.length);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "e1e22704-698a-4c45-8d8e-df7e0d0a5999"
							}
						}
					],
					"_postman_id": "418921ba-f5ec-4949-8351-4f454e864387",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}curriculums/?country_id[]=13",
							"host": [
								"{{URL}}curriculums"
							],
							"path": [
								""
							],
							"query": [
								{
									"key": "country_id[]",
									"value": "13"
								}
							]
						}
					},
					"response": []
				}
			],
			"_postman_id": "27033170-1d4f-4bfb-af41-1455640cc017",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						],
						"id": "d9c4fe4f-c9b6-47b7-a171-f2f951cce060"
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						],
						"id": "648cac81-41ff-493c-96a8-dfcdd313ecb1"
					}
				}
			]
		},
		{
			"name": "elevate",
			"item": [
				{
					"name": "Return elevate credentials",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "3f322fd4-c885-4120-9458-e87fa6f55b42"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let url = pm.environment.get('URL');\r",
									"url += 'services/gigya/login';\r",
									"\r",
									"pm.sendRequest(\r",
									"    {\r",
									"        url: url,\r",
									"        method: 'POST',\r",
									"        header: {\r",
									"            \"Content-Type\": \"application/json\"\r",
									"        },\r",
									"        body: {\r",
									"            mode: 'form-data',\r",
									"            raw: JSON.stringify({\r",
									"                  \"email\": pm.environment.get('elevateUser'),\r",
									"                  \"password\": pm.environment.get('password')\r",
									"            })\r",
									"        }\r",
									"    },\r",
									"    function (err, response) {\r",
									"        pm.environment.set('token', response.json().token);\r",
									"    },\r",
									"\r",
									"    function (err, response) {\r",
									"        pm.environment.set('refreshtoken', response.json().refreshToken);\r",
									"    }\r",
									");"
								],
								"type": "text/javascript",
								"id": "b10fbb49-6830-413d-ad90-d660095b6807"
							}
						}
					],
					"_postman_id": "e404ad8d-8d0e-4a80-9e4c-56baabe353a8",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{token}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"tabID\": 4451,\r\n    \"domain\":\"https://www.anz-go-uat.cambridge.edu.au/go/\",\r\n    \"isbn\":\"9781108580212\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}services/elevate/getCredentials",
							"host": [
								"{{URL}}services"
							],
							"path": [
								"elevate",
								"getCredentials"
							],
							"query": [
								{
									"key": "domain",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Return elevate credentials with invalid token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "5158f77e-387d-4593-af57-0f5b15b4608b"
							}
						}
					],
					"_postman_id": "6926faab-2fd8-4c74-b430-cadf6e109b95",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{invalidtoken}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"tabID\": 4451,\r\n    \"domain\":\"https://www.anz-go-uat.cambridge.edu.au/go/\",\r\n    \"isbn\":\"9781108580212\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}services/elevate/getCredentials",
							"host": [
								"{{URL}}services"
							],
							"path": [
								"elevate",
								"getCredentials"
							],
							"query": [
								{
									"key": "",
									"value": "",
									"disabled": true
								},
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				}
			],
			"_postman_id": "4163ec0f-e932-4eeb-b0a9-8f7078fb01fc"
		},
		{
			"name": "formats",
			"item": [
				{
					"name": "Get all formats",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Verify return list of all formats is able to get a response code 200\"] = responseCode.code === 200;"
								],
								"type": "text/javascript",
								"id": "85a75600-6b89-4c89-b9f1-b9fb1480c74f"
							}
						}
					],
					"_postman_id": "c9f0305d-b1ba-4abf-ad87-2f51b880cc8c",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{URL}}formats/"
					},
					"response": []
				},
				{
					"name": "Get all formats filtered via specific page",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"is Page 2\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.page).to.eql(2);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "5e4888e2-1488-446e-a344-08c6042d8d22"
							}
						}
					],
					"_postman_id": "2a4d3ee6-7107-4bd1-9ea2-3b524b2190da",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}formats?page=2",
							"host": [
								"{{URL}}formats"
							],
							"query": [
								{
									"key": "page",
									"value": "2"
								}
							]
						}
					},
					"response": []
				}
			],
			"_postman_id": "bef91c47-89da-4197-92b7-cd98e9696e3d",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						],
						"id": "68da83ef-90c5-4d74-bd31-eeb5e70d5663"
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						],
						"id": "224ae70c-eeea-408a-a720-05d0cec26259"
					}
				}
			]
		},
		{
			"name": "gigya",
			"item": [
				{
					"name": "Login using email and password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Verify return list of all books is able to get a response code 200\"] = responseCode.code === 200;\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"postman.setEnvironmentVariable(\"token\", jsonData.token);\r",
									"postman.setEnvironmentVariable(\"user_id\", jsonData.user_id);\r",
									"postman.setEnvironmentVariable(\"refreshToken\", jsonData.refreshToken);"
								],
								"type": "text/javascript",
								"id": "f7be9ea4-c31f-451b-a698-942890f480e8"
							}
						}
					],
					"_postman_id": "50da2f8e-2096-4599-87ac-d6bd6552e4e4",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "email",
									"value": "qateachadmin@pte-mailbox.cambridgedev.org",
									"type": "text"
								},
								{
									"key": "password",
									"value": "globalgo22",
									"type": "text"
								}
							],
							"options": {}
						},
						"url": {
							"raw": "{{URL}}services/gigya/login",
							"host": [
								"{{URL}}services"
							],
							"path": [
								"gigya",
								"login"
							],
							"query": [
								{
									"key": "email",
									"value": "qateach_reg8.pen@pte-mailbox.cambridgedev.org",
									"disabled": true
								},
								{
									"key": "password",
									"value": "d3TEhLb3XeIl",
									"disabled": true
								}
							]
						}
					},
					"response": []
				}
			],
			"_postman_id": "a5d1a55a-aecc-4ffe-928a-11a29eace328"
		},
		{
			"name": "integrations",
			"item": [
				{
					"name": "Return all Integration",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"id": "f56d4d2a-a23f-49cc-9392-43ea95ba3db5"
							}
						}
					],
					"_postman_id": "84583230-1508-4d91-a329-3cbd0186e2b1",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{URL}}integrations/"
					},
					"response": []
				},
				{
					"name": "Return HM integration",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Is Edjin Integration\", function () {\r",
									"  pm.expect(jsonData.name).to.eql(\"Edjin\");\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"postman.setEnvironmentVariable(\"edjinClientId\", jsonData.client_id);"
								],
								"type": "text/javascript",
								"id": "c3dbc84a-9be7-4629-9f34-db209355b0b6"
							}
						}
					],
					"_postman_id": "650dbee4-8688-4142-a212-e036174998db",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{URL}}integrations/1"
					},
					"response": []
				},
				{
					"name": "Return GoElevate integration",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Is Elevate Integration\", function () {\r",
									"  pm.expect(jsonData.name).to.eql(\"Elevate\");\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"postman.setEnvironmentVariable(\"goelevateClientId\", jsonData.client_id);"
								],
								"type": "text/javascript",
								"id": "17877683-c982-4fae-b983-0e2afc996ed7"
							}
						}
					],
					"_postman_id": "d5d4a2a8-6ce3-4d8c-8356-925b19043d6d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{URL}}integrations/2"
					},
					"response": []
				},
				{
					"name": "Return Epub integration",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Is Epub Integration\", function () {\r",
									"  pm.expect(jsonData.name).to.eql(\"EPub\");\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"postman.setEnvironmentVariable(\"epubClientId\", jsonData.client_id);"
								],
								"type": "text/javascript",
								"id": "45eb8d54-ee13-4e4c-841c-22db7d6f1bbe"
							}
						}
					],
					"_postman_id": "5e917e16-ef81-413e-881d-1f45ae3b288f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{URL}}integrations/3"
					},
					"response": []
				},
				{
					"name": "Return ITB integration",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Is ITB Integration\", function () {\r",
									"  pm.expect(jsonData.name).to.eql(\"Interactive Textbook\");\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"postman.setEnvironmentVariable(\"itbClientId\", jsonData.client_id);"
								],
								"type": "text/javascript",
								"id": "3996ae32-fff7-4552-98ac-5165853ce272"
							}
						}
					],
					"_postman_id": "d33a72ed-0ec5-4f73-b1e5-7c8e8812776d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{URL}}integrations/4"
					},
					"response": []
				},
				{
					"name": "Return Testhub integration",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Is Invalid Integration\", function () {\r",
									"  pm.expect(jsonData.name).to.eql(\"Testhub\");\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"postman.setEnvironmentVariable(\"testhubClientId\", jsonData.client_id);"
								],
								"type": "text/javascript",
								"id": "99c376d2-cf7c-49db-91a5-d8ad5597144b"
							}
						}
					],
					"_postman_id": "184fb284-9a31-4196-bd1d-7891ae2c083e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{URL}}integrations/5"
					},
					"response": []
				},
				{
					"name": "Return Digital Checkpoints integration",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Is Invalid Integration\", function () {\r",
									"  pm.expect(jsonData.name).to.eql(\"Digital Checkpoints\");\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"postman.setEnvironmentVariable(\"checkpointsClientId\", jsonData.client_id);"
								],
								"type": "text/javascript",
								"id": "a59d0d6c-d2e7-46e6-8e58-af31356ca563"
							}
						}
					],
					"_postman_id": "d3c87323-fd49-46c3-a727-c20b2d1a6e38",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{URL}}integrations/6"
					},
					"response": []
				},
				{
					"name": "Return Go Provisioning integration",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Go Provisioning Integration\", function () {\r",
									"  pm.expect(jsonData.name).to.eql(\"GO Provisioning\");\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"postman.setEnvironmentVariable(\"gopovisioningClientId\", jsonData.client_id);"
								],
								"type": "text/javascript",
								"id": "7090eb02-26ae-4625-be56-24b96fbfdabe"
							}
						}
					],
					"_postman_id": "fdccaccb-2403-45f5-bef6-b4519de505ae",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{URL}}integrations/7"
					},
					"response": []
				},
				{
					"name": "Return invalid integration",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Is Invalid Integration\", function () {\r",
									"  pm.expect(jsonData.message).to.eql(\"Integration not found.\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"id": "c54f5c7d-83a3-4edd-a53d-077d86b0d0fd"
							}
						}
					],
					"_postman_id": "e13952b2-629a-43b9-ad50-01a7a63a5fa4",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{URL}}integrations/8"
					},
					"response": []
				},
				{
					"name": "Return user edjin resources",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"id": "07e80e20-cc34-4f21-94b0-414058f0aadd"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let url = pm.environment.get('URL');\r",
									"url += 'services/gigya/login';\r",
									"\r",
									"pm.sendRequest(\r",
									"    {\r",
									"        url: url,\r",
									"        method: 'POST',\r",
									"        header: {\r",
									"            \"Content-Type\": \"application/json\"\r",
									"        },\r",
									"        body: {\r",
									"            mode: 'form-data',\r",
									"            raw: JSON.stringify({\r",
									"                  \"email\": pm.environment.get('userWithAllResource'),\r",
									"                  \"password\": pm.environment.get('password')\r",
									"            })\r",
									"        }\r",
									"    },\r",
									"    function (err, response) {\r",
									"        pm.environment.set('token', response.json().token);\r",
									"    },\r",
									"\r",
									"    function (err, response) {\r",
									"        pm.environment.set('refreshtoken', response.json().refreshToken);\r",
									"    }\r",
									");"
								],
								"type": "text/javascript",
								"id": "ca7048c0-d1ce-41be-b768-b57deb90cb68"
							}
						}
					],
					"_postman_id": "96ef06fa-5ef6-4a64-9088-0f5e5f365b9b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{token}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{URL}}integrations/{{edjinClientId}}/userResources"
					},
					"response": []
				},
				{
					"name": "Return user elevate resources",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"id": "8a13a57b-c274-4670-9a82-9b71846d4d7b"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let url = pm.environment.get('URL');\r",
									"url += 'services/gigya/login';\r",
									"\r",
									"pm.sendRequest(\r",
									"    {\r",
									"        url: url,\r",
									"        method: 'POST',\r",
									"        header: {\r",
									"            \"Content-Type\": \"application/json\"\r",
									"        },\r",
									"        body: {\r",
									"            mode: 'form-data',\r",
									"            raw: JSON.stringify({\r",
									"                  \"email\": pm.environment.get('userWithAllResource'),\r",
									"                  \"password\": pm.environment.get('password')\r",
									"            })\r",
									"        }\r",
									"    },\r",
									"    function (err, response) {\r",
									"        pm.environment.set('token', response.json().token);\r",
									"    },\r",
									"\r",
									"    function (err, response) {\r",
									"        pm.environment.set('refreshtoken', response.json().refreshToken);\r",
									"    }\r",
									");"
								],
								"type": "text/javascript",
								"id": "c896c750-544e-46b7-8ac0-6672488304a3"
							}
						}
					],
					"_postman_id": "6ad85d73-aad5-476c-b87b-647704dc1089",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{token}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{URL}}integrations/{{goelevateClientId}}/userResources"
					},
					"response": []
				},
				{
					"name": "Return user Epub resources",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"id": "8141e981-5e85-4ebb-af5b-1aac22969cd7"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let url = pm.environment.get('URL');\r",
									"url += 'services/gigya/login';\r",
									"\r",
									"pm.sendRequest(\r",
									"    {\r",
									"        url: url,\r",
									"        method: 'POST',\r",
									"        header: {\r",
									"            \"Content-Type\": \"application/json\"\r",
									"        },\r",
									"        body: {\r",
									"            mode: 'form-data',\r",
									"            raw: JSON.stringify({\r",
									"                  \"email\": pm.environment.get('userWithAllResource'),\r",
									"                  \"password\": pm.environment.get('password')\r",
									"            })\r",
									"        }\r",
									"    },\r",
									"    function (err, response) {\r",
									"        pm.environment.set('token', response.json().token);\r",
									"    },\r",
									"\r",
									"    function (err, response) {\r",
									"        pm.environment.set('refreshtoken', response.json().refreshToken);\r",
									"    }\r",
									");"
								],
								"type": "text/javascript",
								"id": "bf6c57fc-840a-4a2b-867f-5a908e18a2c5"
							}
						}
					],
					"_postman_id": "39bcc7be-684e-4f60-9938-5dd65dd903c2",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{token}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{URL}}integrations/{{epubClientId}}/userResources"
					},
					"response": []
				},
				{
					"name": "Return user ITB resources",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"id": "a5e49e15-abcf-4e45-b493-af5949edb7e1"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let url = pm.environment.get('URL');\r",
									"url += 'services/gigya/login';\r",
									"\r",
									"pm.sendRequest(\r",
									"    {\r",
									"        url: url,\r",
									"        method: 'POST',\r",
									"        header: {\r",
									"            \"Content-Type\": \"application/json\"\r",
									"        },\r",
									"        body: {\r",
									"            mode: 'form-data',\r",
									"            raw: JSON.stringify({\r",
									"                  \"email\": pm.environment.get('userWithAllResource'),\r",
									"                  \"password\": pm.environment.get('password')\r",
									"            })\r",
									"        }\r",
									"    },\r",
									"    function (err, response) {\r",
									"        pm.environment.set('token', response.json().token);\r",
									"    },\r",
									"\r",
									"    function (err, response) {\r",
									"        pm.environment.set('refreshtoken', response.json().refreshToken);\r",
									"    }\r",
									");"
								],
								"type": "text/javascript",
								"id": "8fc7ec4c-abc8-4656-a793-6499651426f3"
							}
						}
					],
					"_postman_id": "aa16208d-21a3-41d3-92cf-082b7b73fe23",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{token}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{URL}}integrations/{{itbClientId}}/userResources"
					},
					"response": []
				},
				{
					"name": "Return user Testhub resources",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"id": "973335bd-9983-424f-ad0c-32b47d2e41c2"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let url = pm.environment.get('URL');\r",
									"url += 'services/gigya/login';\r",
									"\r",
									"pm.sendRequest(\r",
									"    {\r",
									"        url: url,\r",
									"        method: 'POST',\r",
									"        header: {\r",
									"            \"Content-Type\": \"application/json\"\r",
									"        },\r",
									"        body: {\r",
									"            mode: 'form-data',\r",
									"            raw: JSON.stringify({\r",
									"                  \"email\": pm.environment.get('userWithAllResource'),\r",
									"                  \"password\": pm.environment.get('password')\r",
									"            })\r",
									"        }\r",
									"    },\r",
									"    function (err, response) {\r",
									"        pm.environment.set('token', response.json().token);\r",
									"    },\r",
									"\r",
									"    function (err, response) {\r",
									"        pm.environment.set('refreshtoken', response.json().refreshToken);\r",
									"    }\r",
									");"
								],
								"type": "text/javascript",
								"id": "95a4c3be-c5d0-4338-9d8f-7c7f2caf63ee"
							}
						}
					],
					"_postman_id": "1395cbb3-178a-45c7-9348-483ccced4e78",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{token}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{URL}}integrations/{{testhubClientId}}/userResources"
					},
					"response": []
				},
				{
					"name": "Return user Digital Checkpoints resources",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"id": "30125f95-360d-434f-a1e2-ff92ef70c8f6"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let url = pm.environment.get('URL');\r",
									"url += 'services/gigya/login';\r",
									"\r",
									"pm.sendRequest(\r",
									"    {\r",
									"        url: url,\r",
									"        method: 'POST',\r",
									"        header: {\r",
									"            \"Content-Type\": \"application/json\"\r",
									"        },\r",
									"        body: {\r",
									"            mode: 'form-data',\r",
									"            raw: JSON.stringify({\r",
									"                  \"email\": pm.environment.get('userWithAllResource'),\r",
									"                  \"password\": pm.environment.get('password')\r",
									"            })\r",
									"        }\r",
									"    },\r",
									"    function (err, response) {\r",
									"        pm.environment.set('token', response.json().token);\r",
									"    },\r",
									"\r",
									"    function (err, response) {\r",
									"        pm.environment.set('refreshtoken', response.json().refreshToken);\r",
									"    }\r",
									");"
								],
								"type": "text/javascript",
								"id": "2bae8979-8cde-40fa-b365-a02fbbe71c79"
							}
						}
					],
					"_postman_id": "2a6931f1-150a-4018-9188-a853eeeef2d0",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{token}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{URL}}integrations/{{checkpointsClientId}}/userResources"
					},
					"response": []
				}
			],
			"_postman_id": "9e7ce8b4-9753-4959-ab2c-03fcaffd5a46"
		},
		{
			"name": "series",
			"item": [
				{
					"name": "Return list of series",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Verify return list of all series is able to get a response code 200\"] = responseCode.code === 200;"
								],
								"type": "text/javascript",
								"id": "40b2f012-9908-44dc-a2d9-0bb49f2bd2b4"
							}
						}
					],
					"_postman_id": "7941dd5d-d070-4787-8466-18ef538f2a15",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{URL}}series/"
					},
					"response": []
				},
				{
					"name": "Return list of series via pretty url",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Series is Step Up: Health and Physical Education for Queensland\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.data[0].name).to.eql(\"Step Up: Health and Physical Education for Queensland\");\r",
									"});"
								],
								"type": "text/javascript",
								"id": "6779ea8c-22d7-4947-9924-424a0c2624ff"
							}
						}
					],
					"_postman_id": "f562f658-e1af-478a-919a-d26797b180af",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}series?pretty_url=Step-Up-Health-and-Physical-Education-for-Queensland",
							"host": [
								"{{URL}}series"
							],
							"query": [
								{
									"key": "pretty_url",
									"value": "Step-Up-Health-and-Physical-Education-for-Queensland"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Return series details",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Series id is 333\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.series_id).to.eql(333);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "0e6483ed-5795-4a9b-ab87-587c513abde2"
							}
						}
					],
					"_postman_id": "6759f88e-dfb7-4b6a-9df6-6be4d8db06d7",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{URL}}series/333"
					},
					"response": []
				},
				{
					"name": "Return series details not found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Verify return list of series details not found is able to get a response code 404\"] = responseCode.code === 404;\r",
									"\r",
									"var data = JSON.parse(responseBody);\r",
									"tests[\"Verify return list of series details not found is able to get message 'Series not found.'\"] = data.message === \"Series not found.\";\r",
									"\r",
									"tests[\"Verify return list of series details not found is able to get success message false\"] = data.success === false;"
								],
								"type": "text/javascript",
								"id": "9efb367b-f57a-4691-a4b8-35ab09d875aa"
							}
						}
					],
					"_postman_id": "20fbfda3-01c1-4829-9790-82bac9ca404c",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{URL}}series/333000"
					},
					"response": []
				},
				{
					"name": "Return series details tabs",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Verify return list of series details tabs is able to get a response code 200\"] = responseCode.code === 200;"
								],
								"type": "text/javascript",
								"id": "8e632abd-2f5d-4966-ba3f-5e6919ca6048"
							}
						}
					],
					"_postman_id": "36b902a7-3f9d-4f0f-acaf-dfc63ae92593",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{URL}}series/333/tabs"
					},
					"response": []
				},
				{
					"name": "Return the list of series titles",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Verify return list of series details titles is able to get a response code 200\"] = responseCode.code === 200;"
								],
								"type": "text/javascript",
								"id": "3e9319ff-49e0-459b-8b14-3241b4e96185"
							}
						}
					],
					"_postman_id": "4f00380d-03ab-4e7b-a4e7-6be3881f34cc",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{URL}}series/333/titles"
					},
					"response": []
				},
				{
					"name": "Return the specific series tab via seriesID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"id": "509010e5-7eac-46b4-9345-930d4fcc6a5f"
							}
						}
					],
					"_postman_id": "24afde5c-f26f-4c28-834d-603b85e274a7",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{URL}}series/333/tabs"
					},
					"response": []
				},
				{
					"name": "Return the specific series tab via is_public",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"id": "fe2981de-4a5e-473e-b6b1-2cdc273ed31e"
							}
						}
					],
					"_postman_id": "ec1fd5b4-f1d8-4652-a049-9749fa75006a",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}series/333/tabs?is_public=1",
							"host": [
								"{{URL}}series"
							],
							"path": [
								"333",
								"tabs"
							],
							"query": [
								{
									"key": "is_public",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Return the specific series tab via user_access",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"id": "bb04ceda-88c6-42e8-8ea8-64957322058c"
							}
						}
					],
					"_postman_id": "321d6779-2ac9-46f3-b01b-17234434eb30",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}series/333/tabs?user_access=teacher",
							"host": [
								"{{URL}}series"
							],
							"path": [
								"333",
								"tabs"
							],
							"query": [
								{
									"key": "user_access",
									"value": "teacher"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Return the specific series tab via authorization_type",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"id": "0860d060-d262-492c-b6ce-551a1cac69e6"
							}
						}
					],
					"_postman_id": "b056a9b4-4209-4c65-b9cb-c5e561bd02e2",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}series/333/tabs?authorization_type=free",
							"host": [
								"{{URL}}series"
							],
							"path": [
								"333",
								"tabs"
							],
							"query": [
								{
									"key": "authorization_type",
									"value": "free"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Return the specific series tab via include",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"id": "1b5db2a0-a0a5-4f84-b138-d8abd8f14a42"
							}
						}
					],
					"_postman_id": "25e33781-47a3-4693-9cd8-253dcbf577f7",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}series/333/tabs?inlcude[]=configuration",
							"host": [
								"{{URL}}series"
							],
							"path": [
								"333",
								"tabs"
							],
							"query": [
								{
									"key": "inlcude[]",
									"value": "configuration"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Return the specific series tab via order_field and order_direction",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"id": "7951d01b-3fd3-483f-a6a0-6b7af0600c45"
							}
						}
					],
					"_postman_id": "83134eef-9c21-4bcb-87c7-8b82a5ed3749",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}series/333/tabs?order_field=name&order_direction=desc",
							"host": [
								"{{URL}}series"
							],
							"path": [
								"333",
								"tabs"
							],
							"query": [
								{
									"key": "order_field",
									"value": "name"
								},
								{
									"key": "order_direction",
									"value": "desc"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Return the specific series title via series_id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"id": "a516882b-c0b5-4eb6-bc7f-a4e3c5afda3e"
							}
						}
					],
					"_postman_id": "e54ea4d2-8894-4a9a-9b0c-8d59b5d28ef3",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{URL}}series/333/titles"
					},
					"response": []
				},
				{
					"name": "Return the specific series title via is_enabled 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var responseJson = pm.response.json();\r",
									"pm.test(\"Series are enabled = 1\",function(){ \r",
									"    var x = [];\r",
									"    for(var i = 0; i < responseJson.data.length; i++){\r",
									"        if (responseJson.data[i].is_enabled == '1'){\r",
									"            x.push(responseJson.data[i].is_enabled)\r",
									"        }\r",
									"    }\r",
									"    pm.expect(x.length).to.eql(responseJson.data.length);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "1ed82f94-ce49-47be-a790-fbd799213441"
							}
						}
					],
					"_postman_id": "e7351086-2596-49be-92fe-db2bb9ae7cc9",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}series/333/titles?is_enabled=1",
							"host": [
								"{{URL}}series"
							],
							"path": [
								"333",
								"titles"
							],
							"query": [
								{
									"key": "is_enabled",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Return list of series via is enabled 0",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var responseJson = pm.response.json();\r",
									"pm.test(\"Series not enabled\",function(){ \r",
									"    var x = [];\r",
									"    for(var i = 0; i < responseJson.data.length; i++){\r",
									"        if (responseJson.data[i].is_enabled == '0'){\r",
									"            x.push(responseJson.data[i].is_enabled)\r",
									"        }\r",
									"    }\r",
									"    pm.expect(x.length).to.eql(responseJson.data.length);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "68ad653a-9182-48fc-8275-c053ddb2e6d5"
							}
						}
					],
					"_postman_id": "b069dbc4-ba63-40e9-9073-1b19de2efaa6",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}series/333/titles?is_enabled=0",
							"host": [
								"{{URL}}series"
							],
							"path": [
								"333",
								"titles"
							],
							"query": [
								{
									"key": "is_enabled",
									"value": "0"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Return the list of series titles via curriculum_id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "9f5117d5-f306-479d-95ae-db2cddc45ff0"
							}
						}
					],
					"_postman_id": "a104db03-83f8-4505-9857-1608251b3f94",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}series/139/titles?curriculum_id[]=3",
							"host": [
								"{{URL}}series"
							],
							"path": [
								"139",
								"titles"
							],
							"query": [
								{
									"key": "curriculum_id[]",
									"value": "3"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Return the list of series titles via subject_id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "054e5c32-40b2-476a-b225-233d87d3fc08"
							}
						}
					],
					"_postman_id": "e74319a3-b3b5-4733-9b41-94531db4f71e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}series/139/titles?subject_id[]=1",
							"host": [
								"{{URL}}series"
							],
							"path": [
								"139",
								"titles"
							],
							"query": [
								{
									"key": "subject_id[]",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Return the list of series titles via yearlevel_id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "0efea67f-1165-46f1-b16d-db350b62aeea"
							}
						}
					],
					"_postman_id": "4796edf9-d1e9-4e19-bf44-c46f99d141b1",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}series/139/titles?year_level_id[]=21",
							"host": [
								"{{URL}}series"
							],
							"path": [
								"139",
								"titles"
							],
							"query": [
								{
									"key": "year_level_id[]",
									"value": "21"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Return the list of series titles via hasdemo_id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Demo id is not null\", function() {\r",
									"var jsonData = pm.response.json();\r",
									"pm.expect(jsonData.data.demo_id).not.eq(null);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "d758a9b1-d40a-40be-b3ef-48ce213f4cce"
							}
						}
					],
					"_postman_id": "599f7473-bc42-459b-99ef-af371db53dfa",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}series/300/titles?has_demo_id=1",
							"host": [
								"{{URL}}series"
							],
							"path": [
								"300",
								"titles"
							],
							"query": [
								{
									"key": "has_demo_id",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Return the list of series titles via order_field and order_direction",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"id": "7600145e-2190-4843-acc9-a601b69f15e0"
							}
						}
					],
					"_postman_id": "d677ed54-129b-479c-9cad-378059ab8e63",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}series/300/titles?order_field=name&order_direction=desc",
							"host": [
								"{{URL}}series"
							],
							"path": [
								"300",
								"titles"
							],
							"query": [
								{
									"key": "order_field",
									"value": "name"
								},
								{
									"key": "order_direction",
									"value": "desc"
								}
							]
						}
					},
					"response": []
				}
			],
			"_postman_id": "d49f44c2-902a-40c1-879a-35d745c11c80",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						],
						"id": "2a590c5b-ab8f-422f-89a2-50d416a9fe41"
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						],
						"id": "3bd018b6-b7a3-4e48-b527-b7ec21845557"
					}
				}
			]
		},
		{
			"name": "subjects",
			"item": [
				{
					"name": "Return list of all subjects",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "67ab66e3-1ae1-477c-93f5-dd36413dd2f1"
							}
						}
					],
					"_postman_id": "9a6e21bc-dd0e-4028-b6ae-c61295dbe627",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}subjects/",
							"host": [
								"{{URL}}subjects"
							],
							"path": [
								""
							],
							"query": [
								{
									"key": "country_id",
									"value": "",
									"disabled": true
								},
								{
									"key": "is_enabled",
									"value": "1",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Return list of subjects via country_id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "915a37a8-c437-424a-851b-5e5e9fcbc715"
							}
						}
					],
					"_postman_id": "7d3bdb87-d6fb-4f8d-b29e-33d3d3c29492",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}subjects/?country_id[]=13",
							"host": [
								"{{URL}}subjects"
							],
							"path": [
								""
							],
							"query": [
								{
									"key": "country_id[]",
									"value": "13"
								}
							]
						}
					},
					"response": []
				}
			],
			"_postman_id": "38cf938a-44c6-44d1-8239-ed5b3c3d7aa2",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						],
						"id": "835deddf-cac8-4b5c-86c0-4a4aa37652e1"
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						],
						"id": "9322318e-c1e8-4e1c-9e79-152f676b25c9"
					}
				}
			]
		},
		{
			"name": "tabs",
			"item": [
				{
					"name": "Return the list of tab contents",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Verify return list of tab contents is able to get a response code 200\"] = responseCode.code === 200;"
								],
								"type": "text/javascript",
								"id": "2c3e1d66-b0c5-4b8d-b10a-f6920a4e6f34"
							}
						}
					],
					"_postman_id": "c590a398-9e2e-4f08-a726-0dc406c4b8c9",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{URL}}tabs/4797/contents"
					},
					"response": []
				},
				{
					"name": "Return the list of tab contents not found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Verify return list of tab contents not found is able to get a response code 404\"] = responseCode.code === 404;\r",
									"\r",
									"var data = JSON.parse(responseBody);\r",
									"tests[\"Verify return list of tab contents not found is able to get message 'Tab not found.'\"] = data.message === \"Tab not found.\";\r",
									"\r",
									"tests[\"Verify return list of tab contents not found is able to get success message false\"] = data.success === false;"
								],
								"type": "text/javascript",
								"id": "348fbffc-d222-49d8-a190-1816fe87d230"
							}
						}
					],
					"_postman_id": "fbabb8fb-f46f-4b08-82f3-ec7f4c2821f3",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{URL}}tabs/1004797/contents"
					},
					"response": []
				},
				{
					"name": "Return tab record",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Verify return tab record is able to get a response code 200\"] = responseCode.code === 200;\r",
									""
								],
								"type": "text/javascript",
								"id": "182c5b9a-41bc-4bfc-a77a-f23f5f12932b"
							}
						}
					],
					"_postman_id": "9e4be455-9f9a-4552-b603-76e1eb0085c1",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{URL}}tabs/3899"
					},
					"response": []
				},
				{
					"name": "Return tab via include",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Verify return tab record is able to get a response code 200\"] = responseCode.code === 200;\r",
									""
								],
								"type": "text/javascript",
								"id": "04f28dfd-d847-4c4a-9bc7-475a57227936"
							}
						}
					],
					"_postman_id": "0fab91b3-03de-4525-b022-d5f52fb9ba9c",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}tabs/3899?include[]=configuration",
							"host": [
								"{{URL}}tabs"
							],
							"path": [
								"3899"
							],
							"query": [
								{
									"key": "include[]",
									"value": "configuration"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Return tab record not found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Verify return tab record is able to get a response code 404\"] = responseCode.code === 404;\r",
									"\r",
									"var data = JSON.parse(responseBody);\r",
									"tests[\"Verify return tab record is able to get message 'Tab not found.'\"] = data.message === \"Tab not found.\";\r",
									"\r",
									"tests[\"Verify return tab record able to get success message false\"] = data.success === false;"
								],
								"type": "text/javascript",
								"id": "90b9f695-7505-4d32-a7d7-8c63778f7f26"
							}
						}
					],
					"_postman_id": "05cb385e-bef0-48f8-a7f0-b5caa5d0cf9b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{URL}}tabs/1004797"
					},
					"response": []
				},
				{
					"name": "Return the list of tab contents via page filter",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var data = JSON.parse(responseBody);\r",
									"tests[\"Verify return list of tab contents via page filter is able to get page = 2\"] = data.page === 2;\r",
									""
								],
								"type": "text/javascript",
								"id": "c855f721-bf6a-4b88-814a-638c23c9506f"
							}
						}
					],
					"_postman_id": "1f7898d7-f01f-48b8-b6e2-e7c2835be811",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}tabs/4797/contents?page=2",
							"host": [
								"{{URL}}tabs"
							],
							"path": [
								"4797",
								"contents"
							],
							"query": [
								{
									"key": "page",
									"value": "2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Return the list of tab contents via order field and order direction=ASC",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Verify return list of tab contents via order field and order direction is able to get a response code 200\"] = responseCode.code === 200;\r",
									""
								],
								"type": "text/javascript",
								"id": "c133fbd8-0d21-417d-ab08-46505d980474"
							}
						}
					],
					"_postman_id": "6fa21b93-ecaf-4b71-adf6-bd568c28aa70",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}tabs/4797/contents?order_field=heading&order_direction=ASC",
							"host": [
								"{{URL}}tabs"
							],
							"path": [
								"4797",
								"contents"
							],
							"query": [
								{
									"key": "order_field",
									"value": "heading"
								},
								{
									"key": "order_direction",
									"value": "ASC"
								}
							]
						}
					},
					"response": []
				}
			],
			"_postman_id": "1074e0f2-6997-450d-b93f-857c71bcfd33",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						],
						"id": "e24d5e0a-ad14-4c54-abaa-6eaaa070e3d0"
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						],
						"id": "945dd510-61a9-4838-9741-09f4222c932f"
					}
				}
			]
		},
		{
			"name": "titles",
			"item": [
				{
					"name": "Return title details",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Verify return title detail is able to get a response code 200\"] = responseCode.code === 200;"
								],
								"type": "text/javascript",
								"id": "40a7588f-b515-4e5d-acb6-a3222cddfffa"
							}
						}
					],
					"_postman_id": "128518be-fc13-4d92-a53d-2b993f2105de",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{URL}}titles/2776"
					},
					"response": []
				},
				{
					"name": "Return title details not found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Verify return title detail not found is able to get a response code 404\"] = responseCode.code === 404;\r",
									"\r",
									"var data = JSON.parse(responseBody);\r",
									"tests[\"Verify return title detail not found is able to get a message 'Title not found.'\"] = data.message === \"Title not found.\";\r",
									"\r",
									"tests[\"Verify return title detail not found is able to get a success message false\"] = data.success === false;"
								],
								"type": "text/javascript",
								"id": "e7db3f3c-df43-4664-952b-8d31292ee892"
							}
						}
					],
					"_postman_id": "821a5d48-c632-46b9-8462-7ab4b60cbf70",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{URL}}titles/10000"
					},
					"response": []
				},
				{
					"name": "Return titlevia is_enabled",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Verify return title detail is able to get a response code 200\"] = responseCode.code === 200;"
								],
								"type": "text/javascript",
								"id": "2d994300-2f0e-4a5b-b923-f1f9166f3fd7"
							}
						}
					],
					"_postman_id": "910ce55b-5240-46a8-b8d1-109a3881091e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}titles/?is_enabled=1",
							"host": [
								"{{URL}}titles"
							],
							"path": [
								""
							],
							"query": [
								{
									"key": "is_enabled",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Return title via pretty_url",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Verify return title detail is able to get a response code 200\"] = responseCode.code === 200;"
								],
								"type": "text/javascript",
								"id": "4c637831-e76e-4689-84dc-e43d482cb6ab"
							}
						}
					],
					"_postman_id": "5e1758ea-09ca-43a3-aba9-c95180f0070b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}titles/?pretty_url=Dynamic-English-Skills-for-the-Australian-Curriculum-A-multilevel-approach-Year-7",
							"host": [
								"{{URL}}titles"
							],
							"path": [
								""
							],
							"query": [
								{
									"key": "pretty_url",
									"value": "Dynamic-English-Skills-for-the-Australian-Curriculum-A-multilevel-approach-Year-7"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Return title via include",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Verify return title detail is able to get a response code 200\"] = responseCode.code === 200;"
								],
								"type": "text/javascript",
								"id": "8c9ae934-b719-41c9-b0bc-c70204062e10"
							}
						}
					],
					"_postman_id": "941a929f-1fe0-4706-b7ac-fdc2a503dd1d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}titles/?include[]=configuration",
							"host": [
								"{{URL}}titles"
							],
							"path": [
								""
							],
							"query": [
								{
									"key": "include[]",
									"value": "configuration"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Return the list of tabs of titles via titleID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Verify return list of title tabs is able to get a response code 200\"] = responseCode.code === 200;"
								],
								"type": "text/javascript",
								"id": "9d2308c0-3041-4b49-b9b1-6534231b3922"
							}
						}
					],
					"_postman_id": "f2c1274e-043f-4b00-a7b4-0af0776d442b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{URL}}titles/2657/tabs"
					},
					"response": []
				},
				{
					"name": "Return the list of tabs of title via include",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Verify return list of title tabs is able to get a response code 200\"] = responseCode.code === 200;"
								],
								"type": "text/javascript",
								"id": "6539e37f-48c2-41f6-b41f-f3526a6429d8"
							}
						}
					],
					"_postman_id": "e291d99d-9c43-4b25-8990-fe33fb8dc5a5",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}titles/2657/tabs?include[]=configuration",
							"host": [
								"{{URL}}titles"
							],
							"path": [
								"2657",
								"tabs"
							],
							"query": [
								{
									"key": "include[]",
									"value": "configuration"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Return the list of tabs of title via is_restricted",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Verify return list of title tabs is able to get a response code 200\"] = responseCode.code === 200;"
								],
								"type": "text/javascript",
								"id": "f2d87adb-de0d-439c-82bf-e1c4f1c84ecc"
							}
						}
					],
					"_postman_id": "d92dbb7f-be28-4beb-9d6b-1960194ac798",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}titles/2657/tabs?is_restricted=1",
							"host": [
								"{{URL}}titles"
							],
							"path": [
								"2657",
								"tabs"
							],
							"query": [
								{
									"key": "is_restricted",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Return the list of title tabs via order_field and order_direction",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Verify return list of title tabs is able to get a response code 200\"] = responseCode.code === 200;"
								],
								"type": "text/javascript",
								"id": "c071527c-b98c-48be-a46c-ba125bd1c008"
							}
						}
					],
					"_postman_id": "97bfcefd-efe7-4257-bcf3-f4fca994c437",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}titles/2657/tabs?order_field=name&order_direction=desc",
							"host": [
								"{{URL}}titles"
							],
							"path": [
								"2657",
								"tabs"
							],
							"query": [
								{
									"key": "order_field",
									"value": "name"
								},
								{
									"key": "order_direction",
									"value": "desc"
								}
							]
						}
					},
					"response": []
				}
			],
			"_postman_id": "3866ed6a-baa2-44c5-a7a5-26d3bb37319e",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						],
						"id": "dcf2506f-eada-4e60-8e80-70ad2f1101ae"
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						],
						"id": "686de98c-f890-48ad-82d4-85e18239d582"
					}
				}
			]
		},
		{
			"name": "trials",
			"item": [
				{
					"name": "Return tabs of trial",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"id": "1512c649-e550-421d-9b73-f18abff700a5"
							}
						}
					],
					"_postman_id": "a7452760-a5ea-4b58-b9ba-856bbfcc9dca",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": "{{URL}}trials/{{trial_id}}/tabs"
					},
					"response": []
				},
				{
					"name": "Return error message for no tabs of trial",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"pm.test(\"Tab not Found\", function(){\r",
									" pm.expect(jsonData.message).to.eql(\"Tab not found.\")\r",
									"});"
								],
								"type": "text/javascript",
								"id": "aa70c80e-9628-464f-a05e-7017da2ad075"
							}
						}
					],
					"_postman_id": "382a3dca-cc3d-48bc-b82b-fca812ec5adf",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{URL}}trials/{{notabtrial_id}}/tabs"
					},
					"response": []
				},
				{
					"name": "Return error message for non trial entitlement",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"pm.test(\"Entitlement is not trial\", function(){\r",
									" pm.expect(jsonData.message).to.eql(\"Unable to search resources.\")\r",
									"});"
								],
								"type": "text/javascript",
								"id": "b6673b2b-d888-4934-abc4-15b2563711fe"
							}
						}
					],
					"_postman_id": "9bb179fa-a061-432a-a401-f4ac9bb6fe33",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{URL}}trials/{{nontrial_id}}/tabs"
					},
					"response": []
				},
				{
					"name": "Return error message for trial entitlement not existing",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"pm.test(\"Entitlement not Found\", function(){\r",
									" pm.expect(jsonData.message).to.eql(\"Unable to locate demo entitlement for book.\")\r",
									"});"
								],
								"type": "text/javascript",
								"id": "881b3007-4e1b-4259-a3a0-c75c6a10a5c8"
							}
						}
					],
					"_postman_id": "ad0b6fc4-1c22-44b1-a9c5-fb77b1577419",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{URL}}trials/423121/tabs"
					},
					"response": []
				}
			],
			"_postman_id": "5461871b-cb5d-423c-b61a-1112543a7505"
		},
		{
			"name": "userUploads",
			"item": [
				{
					"name": "[TA] Uploading user via user_uploads endpoint",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var data = JSON.parse(responseBody);\r",
									"tests[\"Verify that a teacher admin is able to get a message = 'Bulk User Upload success.'\"] = data.message === 'Bulk User Upload success.';\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"postman.setEnvironmentVariable(\"userUploadId\", jsonData.data.user_upload.id);"
								],
								"type": "text/javascript",
								"id": "94fee729-fc01-480d-a2e9-d9ea362d34ac"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var moment = require('moment');\r",
									"\r",
									"if (pm.environment.get('currentdate') != moment().format((\"YYYYMMDD\"))){\r",
									"    pm.environment.set('counter', 0);\r",
									"    pm.environment.set('currentdate', moment().format((\"YYYYMMDD\")));\r",
									"}\r",
									"\r",
									"pm.environment.set('counter', (pm.environment.get('counter') + 1));\r",
									"let useremail = \"APIauto\" + pm.environment.get('currentdate') + pm.environment.get('env') + pm.environment.get('counter') + \"@pte-mailbox.cambridgedev.org\";\r",
									"let filename = \"APIauto\" + pm.environment.get('currentdate') + pm.environment.get('env') + pm.environment.get('counter') + \".xlsx\";\r",
									"\r",
									"var body = {\r",
									"  \"users\": [\r",
									"    {\r",
									"      \"first_name\": \"APIauto\",\r",
									"      \"last_name\": \"Student 1\",\r",
									"      \"role\": \"student\",\r",
									"      \"password\": \"qapass@123\",\r",
									"      \"email_address\": useremail\r",
									"    }\r",
									"  ],\r",
									"  \"filename\": filename\r",
									"};\r",
									"\r",
									"var body_str = JSON.stringify(body); //body was defined in the previous step\r",
									" pm.environment.set ('bodyUpload', body_str);\r",
									"\r",
									"let url = pm.environment.get('URL');\r",
									"url += 'services/gigya/login';\r",
									"\r",
									"pm.sendRequest(\r",
									"    {\r",
									"        url: url,\r",
									"        method: 'POST',\r",
									"        header: {\r",
									"            \"Content-Type\": \"application/json\"\r",
									"        },\r",
									"        body: {\r",
									"            mode: 'form-data',\r",
									"            raw: JSON.stringify({\r",
									"                  \"email\": pm.environment.get('teacherAdmin'),\r",
									"                  \"password\": pm.environment.get('password')\r",
									"            })\r",
									"        }\r",
									"    },\r",
									"    function (err, response) {\r",
									"        pm.environment.set('token', response.json().token);\r",
									"    }\r",
									");\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"id": "7b668c50-8a05-4b5e-8641-1f397eb333b2"
							}
						}
					],
					"_postman_id": "39d9d571-0648-430b-87eb-eaade9af7c0f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{token}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{bodyUpload}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{URL}}user_uploads"
					},
					"response": []
				},
				{
					"name": "[T] Uploading user in user_uploads endpoint",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});\r",
									"\r",
									"var data = JSON.parse(responseBody);\r",
									"tests[\"Verify that a teacher client accessing user_upload endpoint will get a message = 'Forbidden'\"] = data.message === 'Forbidden';"
								],
								"type": "text/javascript",
								"id": "d625bc54-01c5-4d95-a2e8-19d885240a1e"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let url = pm.environment.get('URL');\r",
									"url += 'services/gigya/login';\r",
									"\r",
									"pm.sendRequest(\r",
									"    {\r",
									"        url: url,\r",
									"        method: 'POST',\r",
									"        header: {\r",
									"            \"Content-Type\": \"application/json\"\r",
									"        },\r",
									"        body: {\r",
									"            mode: 'form-data',\r",
									"            raw: JSON.stringify({\r",
									"                  \"email\": pm.environment.get('teacher'),\r",
									"                  \"password\": pm.environment.get('password')\r",
									"            })\r",
									"        }\r",
									"    },\r",
									"    function (err, response) {\r",
									"        pm.environment.set('token', response.json().token);\r",
									"    }\r",
									");"
								],
								"type": "text/javascript",
								"id": "9ec405a7-c240-4e5a-83c0-59aa5c95cc6f"
							}
						}
					],
					"_postman_id": "bc4fca45-8e0e-46dd-b87e-1a46153070ac",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{token}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"users\": [\r\n    {\r\n      \"first_name\": \"Bulk\",\r\n      \"last_name\": \"Student 1\",\r\n      \"role\": \"student\",\r\n      \"password\": \"qapass@123\",\r\n      \"email_address\": \"bulk1stud112621qa1@pte-mailbox.cambridgedev.org\"\r\n    },\r\n    {\r\n      \"first_name\": \"Bulk\",\r\n      \"last_name\": \"Student 2\",\r\n      \"role\": \"student\",\r\n      \"password\": \"qapass@123\",\r\n      \"email_address\": \"bulk1stud112621qa2@pte-mailbox.cambridgedev.org\"\r\n    },\r\n    {\r\n      \"first_name\": \"Bulk\",\r\n      \"last_name\": \"Student 3\",\r\n      \"role\": \"student\",\r\n      \"password\": \"qapass@123\",\r\n      \"email_address\": \"bulk1stud112621qa3@pte-mailbox.cambridgedev.org\"\r\n    },\r\n    {\r\n      \"first_name\": \"Bulk\",\r\n      \"last_name\": \"Teacher 4\",\r\n      \"role\": \"teacher\",\r\n      \"password\": \"qapass@123\",\r\n      \"email_address\": \"bulk1tch112621qa4@pte-mailbox.cambridgedev.org\"\r\n    },\r\n    {\r\n      \"first_name\": \"Bulk\",\r\n      \"last_name\": \"Student 5\",\r\n      \"role\": \"student\",\r\n      \"password\": \"qapass@123\",\r\n      \"email_address\": \"bulk1stud112621qa5@pte-mailbox.cambridgedev.org\"\r\n    }\r\n  ],\r\n  \"filename\": \"test.xslx\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{URL}}user_uploads"
					},
					"response": []
				},
				{
					"name": "[S] Uploading user in user_uploads endpoint",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});\r",
									"\r",
									"var data = JSON.parse(responseBody);\r",
									"tests[\"Verify that a student client posting on user_upload endpoint will get a message = 'Forbidden'\"] = data.message === 'Forbidden';"
								],
								"type": "text/javascript",
								"id": "7f866679-f9fc-4534-aba6-ac8f41fd1d31"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let url = pm.environment.get('URL');\r",
									"url += 'services/gigya/login';\r",
									"\r",
									"pm.sendRequest(\r",
									"    {\r",
									"        url: url,\r",
									"        method: 'POST',\r",
									"        header: {\r",
									"            \"Content-Type\": \"application/json\"\r",
									"        },\r",
									"        body: {\r",
									"            mode: 'form-data',\r",
									"            raw: JSON.stringify({\r",
									"                  \"email\": pm.environment.get('student'),\r",
									"                  \"password\": pm.environment.get('password')\r",
									"            })\r",
									"        }\r",
									"    },\r",
									"    function (err, response) {\r",
									"        pm.environment.set('token', response.json().token);\r",
									"    }\r",
									");"
								],
								"type": "text/javascript",
								"id": "9887090d-bf3b-48f4-8417-5d9e9a4517e6"
							}
						}
					],
					"_postman_id": "1e5f0364-ebc6-4e5f-8d0d-2d8a454135b2",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{token}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"users\": [\r\n    {\r\n      \"first_name\": \"Bulk\",\r\n      \"last_name\": \"Student 1\",\r\n      \"role\": \"student\",\r\n      \"password\": \"qapass@123\",\r\n      \"email_address\": \"bulk1stud112621qa1@pte-mailbox.cambridgedev.org\"\r\n    },\r\n    {\r\n      \"first_name\": \"Bulk\",\r\n      \"last_name\": \"Student 2\",\r\n      \"role\": \"student\",\r\n      \"password\": \"qapass@123\",\r\n      \"email_address\": \"bulk1stud112621qa2@pte-mailbox.cambridgedev.org\"\r\n    },\r\n    {\r\n      \"first_name\": \"Bulk\",\r\n      \"last_name\": \"Student 3\",\r\n      \"role\": \"student\",\r\n      \"password\": \"qapass@123\",\r\n      \"email_address\": \"bulk1stud112621qa3@pte-mailbox.cambridgedev.org\"\r\n    },\r\n    {\r\n      \"first_name\": \"Bulk\",\r\n      \"last_name\": \"Teacher 4\",\r\n      \"role\": \"teacher\",\r\n      \"password\": \"qapass@123\",\r\n      \"email_address\": \"bulk1tch112621qa4@pte-mailbox.cambridgedev.org\"\r\n    },\r\n    {\r\n      \"first_name\": \"Bulk\",\r\n      \"last_name\": \"Student 5\",\r\n      \"role\": \"student\",\r\n      \"password\": \"qapass@123\",\r\n      \"email_address\": \"bulk1stud112621qa5@pte-mailbox.cambridgedev.org\"\r\n    }\r\n  ],\r\n  \"filename\": \"test.xslx\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{URL}}user_uploads"
					},
					"response": []
				},
				{
					"name": "Status updates [COMPLETED] using user_uploads endpoint",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var data = JSON.parse(responseBody);\r",
									"tests[\"Verify that a valid client request is able to get a message = 'User upload successfully updated.'\"] = data.message === 'User upload successfully updated.';"
								],
								"type": "text/javascript",
								"id": "a587929c-7275-4112-9fa5-62beab0a98a2"
							}
						}
					],
					"_postman_id": "718167a2-592d-475d-84ea-cb87975ad432",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{token_userupload}}"
							}
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"status\" : \"COMPLETED\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{URL}}user_uploads/{{userUploadId}}"
					},
					"response": []
				},
				{
					"name": "Status updates using user_uploads with invalid authorization",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"var data = JSON.parse(responseBody);\r",
									"tests[\"Verify that a client with invalid auth token will get a message = 'InvalidApiToken'\"] = data.message === 'InvalidApiToken';"
								],
								"type": "text/javascript",
								"id": "827d20d7-b09e-421a-8b7c-4e2c6950c77e"
							}
						}
					],
					"_postman_id": "eebcf159-ab06-42eb-966f-2d491fb2b021",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{invalidtoken_userupload}}"
							}
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"status\" : \"IN_PROGRESS\",\r\n   \"event_id\" : \"event12022101\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{URL}}user_uploads/6"
					},
					"response": []
				}
			],
			"_postman_id": "cf877672-7a4e-47a7-a180-e6a1356a4773"
		},
		{
			"name": "yearLevels",
			"item": [
				{
					"name": "Get all year levels.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Verify return all year levels is able to get a response code 200\"] = responseCode.code === 200;"
								],
								"type": "text/javascript",
								"id": "42ebff05-d130-4e51-a2c8-ef326b9885fb"
							}
						}
					],
					"_postman_id": "2c83974c-90c9-4f30-a7ae-90124f8faa2a",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{URL}}yearlevels/"
					},
					"response": []
				},
				{
					"name": "Get all year level via country_id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Verify return all year levels is able to get a response code 200\"] = responseCode.code === 200;"
								],
								"type": "text/javascript",
								"id": "938138bf-db45-4693-935b-2365f3afcc23"
							}
						}
					],
					"_postman_id": "5d39f7e7-f8c4-47ef-aa95-717682bad08e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}yearlevels/?country_id[]=13",
							"host": [
								"{{URL}}yearlevels"
							],
							"path": [
								""
							],
							"query": [
								{
									"key": "country_id[]",
									"value": "13"
								}
							]
						}
					},
					"response": []
				}
			],
			"_postman_id": "abf6f396-c19e-4763-a1eb-b6d5fa1bd68e",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						],
						"id": "5a5654ad-c837-47a8-a211-014a9846a698"
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						],
						"id": "649d6e1f-a650-44e5-ba25-623f0d9bff68"
					}
				}
			]
		},
		{
			"name": "userReports",
			"item": [
				{
					"name": "[TA] Return list of onboarding file uploaded within the institution",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"postman.setEnvironmentVariable(\"userUploadId\", jsonData.data[0].id);\r",
									""
								],
								"type": "text/javascript",
								"id": "fcbf1c7e-28a0-4dfc-9357-c2f97bb9baaf"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let url = pm.environment.get('URL');\r",
									"url += 'services/gigya/login';\r",
									"\r",
									"pm.sendRequest(\r",
									"    {\r",
									"        url: url,\r",
									"        method: 'POST',\r",
									"        header: {\r",
									"            \"Content-Type\": \"application/json\"\r",
									"        },\r",
									"        body: {\r",
									"            mode: 'form-data',\r",
									"            raw: JSON.stringify({\r",
									"                  \"email\": pm.environment.get('teacherAdmin'),\r",
									"                  \"password\": pm.environment.get('password')\r",
									"            })\r",
									"        }\r",
									"    },\r",
									"    function (err, response) {\r",
									"        pm.environment.set('token', response.json().token);\r",
									"    }\r",
									");"
								],
								"type": "text/javascript",
								"id": "ff276082-de6e-4dc1-b9f7-361ef130f699"
							}
						}
					],
					"_postman_id": "d337974c-2048-4259-96e7-c8380aafac14",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{token}}"
							}
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [],
							"options": {}
						},
						"url": "{{URL}}user_uploads/"
					},
					"response": []
				},
				{
					"name": "[T] Return list of onboarding file uploaded within the institution",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});\r",
									"\r",
									"var data = JSON.parse(responseBody);\r",
									"tests[\"Verify that a teacher client accessing user_upload endpoint will get a message = 'Forbidden'\"] = data.message === 'Forbidden';"
								],
								"type": "text/javascript",
								"id": "979952cf-b2f1-43f5-ae6b-0ce3aeb7de8f"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let url = pm.environment.get('URL');\r",
									"url += 'services/gigya/login';\r",
									"\r",
									"pm.sendRequest(\r",
									"    {\r",
									"        url: url,\r",
									"        method: 'POST',\r",
									"        header: {\r",
									"            \"Content-Type\": \"application/json\"\r",
									"        },\r",
									"        body: {\r",
									"            mode: 'form-data',\r",
									"            raw: JSON.stringify({\r",
									"                  \"email\": pm.environment.get('teacher'),\r",
									"                  \"password\": pm.environment.get('password')\r",
									"            })\r",
									"        }\r",
									"    },\r",
									"    function (err, response) {\r",
									"        pm.environment.set('token', response.json().token);\r",
									"    }\r",
									");"
								],
								"type": "text/javascript",
								"id": "95a2d7af-1bee-43b5-8a14-298781ade69f"
							}
						}
					],
					"_postman_id": "f1bb5728-1bf2-474d-8aea-529785b086e4",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{token}}"
							}
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [],
							"options": {}
						},
						"url": "{{URL}}user_uploads/"
					},
					"response": []
				},
				{
					"name": "[T] Return specific user file upload within the institution",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});\r",
									"\r",
									"var data = JSON.parse(responseBody);\r",
									"tests[\"Verify that a teacher client accessing user_upload endpoint will get a message = 'Forbidden'\"] = data.message === 'Forbidden';"
								],
								"type": "text/javascript",
								"id": "93584377-2bd5-4ba0-bd72-a90890038168"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "56ba7b18-7219-4692-9768-11ffc0b19e35"
							}
						}
					],
					"_postman_id": "73c018ec-fe7d-45d6-bafb-a0bb371b7c97",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{token}}"
							}
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [],
							"options": {}
						},
						"url": "{{URL}}user_uploads/{{userUploadId}}"
					},
					"response": []
				},
				{
					"name": "[S] Return list of onboarding file uploaded within the institution",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});\r",
									"\r",
									"var data = JSON.parse(responseBody);\r",
									"tests[\"Verify that a student client accessing user_upload endpoint will get a message = 'Forbidden'\"] = data.message === 'Forbidden';"
								],
								"type": "text/javascript",
								"id": "471de1e5-4c1e-48b8-9eab-1a6775ac6ed2"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let url = pm.environment.get('URL');\r",
									"url += 'services/gigya/login';\r",
									"let caDate = pm.cDate;\r",
									"\r",
									"pm.sendRequest(\r",
									"    {\r",
									"        url: url,\r",
									"        method: 'POST',\r",
									"        header: {\r",
									"            \"Content-Type\": \"application/json\"\r",
									"        },\r",
									"        body: {\r",
									"            mode: 'form-data',\r",
									"            raw: JSON.stringify({\r",
									"                  \"email\": pm.environment.get('student'),\r",
									"                  \"password\": pm.environment.get('password')\r",
									"            })\r",
									"        }\r",
									"    },\r",
									"    function (err, response) {\r",
									"        pm.environment.set('token', response.json().token);\r",
									"    }\r",
									");"
								],
								"type": "text/javascript",
								"id": "8905231e-fdc9-44dc-839b-3b39e72e87fa"
							}
						}
					],
					"_postman_id": "625c85bd-3e56-4f83-98be-906b39308488",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{token}}"
							}
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [],
							"options": {}
						},
						"url": "{{URL}}user_uploads/"
					},
					"response": []
				},
				{
					"name": "[S] Return specific user file upload within the institution",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});\r",
									"\r",
									"var data = JSON.parse(responseBody);\r",
									"tests[\"Verify that a student client accessing user_upload endpoint will get a message = 'Forbidden'\"] = data.message === 'Forbidden';"
								],
								"type": "text/javascript",
								"id": "d57347ff-e2a1-4694-9c5c-6b9a76662e4d"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"id": "303c81b9-b500-4714-8ffa-800fe47835df"
							}
						}
					],
					"_postman_id": "2c3846ac-2219-4334-b2b5-fe2e712753ed",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{token}}"
							}
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [],
							"options": {}
						},
						"url": "{{URL}}user_uploads/{{userUploadId}}"
					},
					"response": []
				}
			],
			"_postman_id": "e60e9d83-69f4-4ae3-aa6d-03429572073b"
		},
		{
			"name": "[m] institutions",
			"item": [
				{
					"name": "Return institution details via oid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "0ed98e55-8e17-441e-9898-82dc58c162b3"
							}
						}
					],
					"_postman_id": "4990fafd-e040-4aef-a42b-371603f697ff",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{URL}}institutions/{{OID}}"
					},
					"response": []
				},
				{
					"name": "Return error for invalid institution oid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"pm.test(\"Success is false\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.success).to.eql(false);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "ff7bda0e-8baf-483e-b6bf-8ddbd39a4f41"
							}
						}
					],
					"_postman_id": "4e4b7de1-4533-45a2-b292-466acb02c272",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{URL}}institutions/{{invalidOID}}"
					},
					"response": []
				},
				{
					"name": "Return users of institution",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "80c1d267-0610-4eee-9fdd-f44abe501f12"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let url = pm.environment.get('URL');\r",
									"url += 'services/gigya/login';\r",
									"\r",
									"pm.sendRequest(\r",
									"    {\r",
									"        url: url,\r",
									"        method: 'POST',\r",
									"        header: {\r",
									"            \"Content-Type\": \"application/json\"\r",
									"        },\r",
									"        body: {\r",
									"            mode: 'form-data',\r",
									"            raw: JSON.stringify({\r",
									"                  \"email\": pm.environment.get('teacherAdminUser'),\r",
									"                  \"password\": pm.environment.get('password')\r",
									"            })\r",
									"        }\r",
									"    },\r",
									"\r",
									"    function (err, response) {\r",
									"        pm.environment.set('token', response.json().token);\r",
									"    },\r",
									"\r",
									"    function (err, response) {\r",
									"        pm.environment.set('refreshtoken', response.json().refreshToken);\r",
									"    }\r",
									");"
								],
								"type": "text/javascript",
								"id": "50d0c682-6961-415f-b0cd-792189d90ceb"
							}
						}
					],
					"_postman_id": "90bba4bf-8b29-4912-92b3-7e5bac1bca5e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{token}}"
							}
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [],
							"options": {}
						},
						"url": "{{URL}}institutions/{{OID}}/users"
					},
					"response": []
				},
				{
					"name": "Return error of users with invalid Institution",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "e8997ba2-af09-4110-b775-225e991bcc33"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let url = pm.environment.get('URL');\r",
									"let email = pm.environment.get('teacherAdminUser');\r",
									"let password = pm.environment.get('password');\r",
									"url += 'services/gigya/login';\r",
									"\r",
									"pm.sendRequest(\r",
									"    {\r",
									"        url: url,\r",
									"        method: 'POST',\r",
									"        header: {\r",
									"            \"Content-Type\": \"application/json\"\r",
									"        },\r",
									"        body: {\r",
									"            mode: 'form-data',\r",
									"            raw: JSON.stringify({\r",
									"                  \"email\": email,\r",
									"                  \"password\": password\r",
									"            })\r",
									"        }\r",
									"    },\r",
									"    function (err, response) {\r",
									"        pm.environment.set('token', response.json().token);\r",
									"    },\r",
									"\r",
									"    function (err, response) {\r",
									"        pm.environment.set('refreshtoken', response.json().refreshToken);\r",
									"    }\r",
									");"
								],
								"type": "text/javascript",
								"id": "131eebc6-74c6-459d-a60d-b823a0f715e3"
							}
						}
					],
					"_postman_id": "a1dc965f-690e-455c-b213-2571b2a271b1",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{token}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{URL}}institutions/{{invalidOID}}/users"
					},
					"response": []
				},
				{
					"name": "Return error for users of institution with invalid token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"id": "b71754c5-f5f5-4ee3-93f3-603534488854"
							}
						}
					],
					"_postman_id": "5d17b87c-c367-4ba9-9229-379442cf9181",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{invalidtoken}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{URL}}institutions/{{OID}}/users"
					},
					"response": []
				},
				{
					"name": "Create Institution Invalid Authorization",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"pm.test(\"Sucess is false\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.success).to.eql(false);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "2827cdc8-3805-4a87-8075-3ef6d89a1230"
							}
						}
					],
					"_postman_id": "f7dfb0b8-17b5-4c99-9ac9-7945adea2647",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{invalidtoken}}"
							}
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{URL}}institutions/?name=&city=&region=&coutnry=&regionCode=&telephone=&url=&addressLine1=&addressLine2=",
							"host": [
								"{{URL}}institutions"
							],
							"path": [
								""
							],
							"query": [
								{
									"key": "name",
									"value": ""
								},
								{
									"key": "city",
									"value": ""
								},
								{
									"key": "region",
									"value": ""
								},
								{
									"key": "coutnry",
									"value": ""
								},
								{
									"key": "regionCode",
									"value": ""
								},
								{
									"key": "telephone",
									"value": ""
								},
								{
									"key": "url",
									"value": ""
								},
								{
									"key": "addressLine1",
									"value": ""
								},
								{
									"key": "addressLine2",
									"value": ""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Institution Invalid input",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"pm.test(\"Sucess is false\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.success).to.eql(false);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "d00713b8-8d05-4e3f-b4ba-41d30e834fc0"
							}
						}
					],
					"_postman_id": "fe398103-4e4c-453a-b524-dc958eef5aa6",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{token}}"
							}
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{URL}}institutions/?name=&city=&region=&country=&regionCode=&telephone=&url=&addressLine1=&addressLine2=",
							"host": [
								"{{URL}}institutions"
							],
							"path": [
								""
							],
							"query": [
								{
									"key": "name",
									"value": ""
								},
								{
									"key": "city",
									"value": ""
								},
								{
									"key": "region",
									"value": ""
								},
								{
									"key": "country",
									"value": ""
								},
								{
									"key": "regionCode",
									"value": ""
								},
								{
									"key": "telephone",
									"value": ""
								},
								{
									"key": "url",
									"value": ""
								},
								{
									"key": "addressLine1",
									"value": ""
								},
								{
									"key": "addressLine2",
									"value": ""
								}
							]
						}
					},
					"response": []
				}
			],
			"_postman_id": "6d67a5e3-d3df-45bb-90c9-dab0dd48c536"
		},
		{
			"name": "[m] resources",
			"item": [
				{
					"name": "Loads all user resources which are series details",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "61c9d778-ac50-4d77-bb35-76de08e4d754"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let url = pm.environment.get('URL');\r",
									"url += 'services/gigya/login';\r",
									"\r",
									"pm.sendRequest(\r",
									"    {\r",
									"        url: url,\r",
									"        method: 'POST',\r",
									"        header: {\r",
									"            \"Content-Type\": \"application/json\"\r",
									"        },\r",
									"        body: {\r",
									"            mode: 'form-data',\r",
									"            raw: JSON.stringify({\r",
									"                  \"email\": pm.environment.get('userWithAllResource'),\r",
									"                  \"password\": pm.environment.get('password')\r",
									"            })\r",
									"        }\r",
									"    },\r",
									"    function (err, response) {\r",
									"        pm.environment.set('token', response.json().token);\r",
									"    },\r",
									"\r",
									"    function (err, response) {\r",
									"        pm.environment.set('refreshtoken', response.json().refreshToken);\r",
									"    }\r",
									");"
								],
								"type": "text/javascript",
								"id": "85b8019d-6691-4d24-960c-8370501f8821"
							}
						}
					],
					"_postman_id": "dbec5925-83d1-420f-a854-92c6ac5ab626",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{token}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{URL}}resources/"
					},
					"response": []
				},
				{
					"name": "Loads all user resources which are series with valid authorization",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Verify return list of all user resources with invalid authorization is able to get a response code 401\"] = responseCode.code === 401;\r",
									"\r",
									"var data = JSON.parse(responseBody);\r",
									"tests[\"Verify return list of all user resources with invalid authorization is able to get message 'InvalidJwtToken'\"] = data.message === \"InvalidJwtToken\";\r",
									"\r",
									"tests[\"Verify return list of all user resources with invalid authorization is able to get success message false\"] = data.success === false;"
								],
								"type": "text/javascript",
								"id": "6205918a-ad1e-4e3e-94ef-d72843706a90"
							}
						}
					],
					"_postman_id": "01b2ec9a-3608-455c-ab29-e3ef376b3a8d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{invalidtoken}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{URL}}resources/"
					},
					"response": []
				},
				{
					"name": "Activate Access code Invalid Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Verify return list of all user resources is able to get a response code 401\"] = responseCode.code === 401;"
								],
								"type": "text/javascript",
								"id": "3d4e6f24-4c56-45f7-904d-d133bd61b768"
							}
						}
					],
					"_postman_id": "732418e2-df56-46e1-903c-7d1d64f2d6e0",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{invalidtoken}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}resources?proof={{accessCode}}",
							"host": [
								"{{URL}}resources"
							],
							"query": [
								{
									"key": "proof",
									"value": "{{accessCode}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Activate Reactivation code Invalid Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Verify return list of all user resources is able to get a response code 401\"] = responseCode.code === 401;"
								],
								"type": "text/javascript",
								"id": "0d304d28-7229-4000-9ab1-df9be54086bd"
							}
						}
					],
					"_postman_id": "656b4faf-daa8-41c3-8b0a-a3cde4d1924c",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{invalidtoken}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}resources?proof=37E8-DRXM-6E3F-VR2R&print_reactivation_proof=R96E-V9WD-28WH-4M9K",
							"host": [
								"{{URL}}resources"
							],
							"query": [
								{
									"key": "proof",
									"value": "37E8-DRXM-6E3F-VR2R"
								},
								{
									"key": "proof",
									"value": "R96E-V9WD-28WH-4M9K",
									"disabled": true
								},
								{
									"key": "print_reactivation_proof",
									"value": "R96E-V9WD-28WH-4M9K"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Activate using a non trial entitlement id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Verify return list of all user resources is able to get a response code 200\"] = responseCode.code === 404;"
								],
								"type": "text/javascript",
								"id": "f79e2d01-7fc8-499e-8094-47b71bf630fe"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let url = pm.environment.get('URL');\r",
									"url += 'services/gigya/login';\r",
									"\r",
									"pm.sendRequest(\r",
									"    {\r",
									"        url: url,\r",
									"        method: 'POST',\r",
									"        header: {\r",
									"            \"Content-Type\": \"application/json\"\r",
									"        },\r",
									"        body: {\r",
									"            mode: 'form-data',\r",
									"            raw: JSON.stringify({\r",
									"                  \"email\": pm.environment.get('edjinUser'),\r",
									"                  \"password\": pm.environment.get('password')\r",
									"            })\r",
									"        }\r",
									"    },\r",
									"    function (err, response) {\r",
									"        pm.environment.set('token', response.json().token);\r",
									"    },\r",
									"\r",
									"    function (err, response) {\r",
									"        pm.environment.set('refreshtoken', response.json().refreshToken);\r",
									"    }\r",
									");"
								],
								"type": "text/javascript",
								"id": "5359396f-346e-40c0-bb57-2fbcbb94c79c"
							}
						}
					],
					"_postman_id": "a9064453-d35c-4825-8b5a-ab134d133263",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{token}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}resources?trial_id={{nontrial_id}}",
							"host": [
								"{{URL}}resources"
							],
							"query": [
								{
									"key": "trial_id",
									"value": "{{nontrial_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Activate Trial code Invalid Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Verify return list of all user resources is able to get a response code 401\"] = responseCode.code === 401;"
								],
								"type": "text/javascript",
								"id": "ec2f35cc-4f94-4045-9875-cb1f1b8af063"
							}
						}
					],
					"_postman_id": "ed99c4b9-1ea6-419d-9c42-690a1c65e2d6",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{invalidtoken}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}resources?trial_id=4754",
							"host": [
								"{{URL}}resources"
							],
							"query": [
								{
									"key": "trial_id",
									"value": "4754"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Loads all user resources by page",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"is page 1\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.page).to.eql(1);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "279efc9f-c46b-4c9d-8dde-3fc546cc2bd9"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let url = pm.environment.get('URL');\r",
									"url += 'services/gigya/login';\r",
									"\r",
									"pm.sendRequest(\r",
									"    {\r",
									"        url: url,\r",
									"        method: 'POST',\r",
									"        header: {\r",
									"            \"Content-Type\": \"application/json\"\r",
									"        },\r",
									"        body: {\r",
									"            mode: 'form-data',\r",
									"            raw: JSON.stringify({\r",
									"                  \"email\": pm.environment.get('userWithAllResource'),\r",
									"                  \"password\": pm.environment.get('password')\r",
									"            })\r",
									"        }\r",
									"    },\r",
									"    function (err, response) {\r",
									"        pm.environment.set('token', response.json().token);\r",
									"    },\r",
									"\r",
									"    function (err, response) {\r",
									"        pm.environment.set('refreshtoken', response.json().refreshToken);\r",
									"    }\r",
									");"
								],
								"type": "text/javascript",
								"id": "25e2d5d7-b113-4f96-a7b4-0fb08f5f5544"
							}
						}
					],
					"_postman_id": "f9515154-dace-478d-9e98-f8c3716d0848",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{token}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}resources/?page=1",
							"host": [
								"{{URL}}resources"
							],
							"path": [
								""
							],
							"query": [
								{
									"key": "page",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Loads all user resources by order and order direction",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "9e5fb6a4-fac2-4ceb-b799-da4fe9d5b2e4"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let url = pm.environment.get('URL');\r",
									"url += 'services/gigya/login';\r",
									"\r",
									"pm.sendRequest(\r",
									"    {\r",
									"        url: url,\r",
									"        method: 'POST',\r",
									"        header: {\r",
									"            \"Content-Type\": \"application/json\"\r",
									"        },\r",
									"        body: {\r",
									"            mode: 'form-data',\r",
									"            raw: JSON.stringify({\r",
									"                  \"email\": pm.environment.get('userWithAllResource'),\r",
									"                  \"password\": pm.environment.get('password')\r",
									"            })\r",
									"        }\r",
									"    },\r",
									"    function (err, response) {\r",
									"        pm.environment.set('token', response.json().token);\r",
									"    },\r",
									"\r",
									"    function (err, response) {\r",
									"        pm.environment.set('refreshtoken', response.json().refreshToken);\r",
									"    }\r",
									");"
								],
								"type": "text/javascript",
								"id": "061cadfc-bafa-47aa-b5af-d4f0373d4c62"
							}
						}
					],
					"_postman_id": "e925c460-75e5-4b6d-bab5-875ba3edf8b8",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{token}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}resources/?order_field=name&order_direction=desc",
							"host": [
								"{{URL}}resources"
							],
							"path": [
								""
							],
							"query": [
								{
									"key": "order_field",
									"value": "name"
								},
								{
									"key": "order_direction",
									"value": "desc"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Loads all user resources by is_active",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"id": "2a13cdce-08fd-4b3a-af56-38dd23df1f13"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let url = pm.environment.get('URL');\r",
									"url += 'services/gigya/login';\r",
									"\r",
									"pm.sendRequest(\r",
									"    {\r",
									"        url: url,\r",
									"        method: 'POST',\r",
									"        header: {\r",
									"            \"Content-Type\": \"application/json\"\r",
									"        },\r",
									"        body: {\r",
									"            mode: 'form-data',\r",
									"            raw: JSON.stringify({\r",
									"                  \"email\": pm.environment.get('userWithAllResource'),\r",
									"                  \"password\": pm.environment.get('password')\r",
									"            })\r",
									"        }\r",
									"    },\r",
									"    function (err, response) {\r",
									"        pm.environment.set('token', response.json().token);\r",
									"    },\r",
									"\r",
									"    function (err, response) {\r",
									"        pm.environment.set('refreshtoken', response.json().refreshToken);\r",
									"    }\r",
									");"
								],
								"type": "text/javascript",
								"id": "59e9c052-658c-4265-96a3-a4f4cd989788"
							}
						}
					],
					"_postman_id": "23121b31-0de5-4fa3-b876-68f9e79d5d1d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{token}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}resources/?is_active=1",
							"host": [
								"{{URL}}resources"
							],
							"path": [
								""
							],
							"query": [
								{
									"key": "is_active",
									"value": "1"
								}
							]
						}
					},
					"response": []
				}
			],
			"_postman_id": "b88cc919-f2f7-4d5c-bd86-613ef28a2062",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						],
						"id": "5bcf482b-f202-41fb-b596-3b2c627375c5"
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						],
						"id": "994f35ab-e33a-4c39-a3a9-6ca5111b8bb5"
					}
				}
			]
		},
		{
			"name": "[m] siteLicenses",
			"item": [
				{
					"name": "[TA] Loads all site license resources that attributed to the institution",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "722f9092-36cf-436e-8c14-e93738d7fa52"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let url = pm.environment.get('URL');\r",
									"url += 'services/gigya/login';\r",
									"\r",
									"pm.sendRequest(\r",
									"    {\r",
									"        url: url,\r",
									"        method: 'POST',\r",
									"        header: {\r",
									"            \"Content-Type\": \"application/json\"\r",
									"        },\r",
									"        body: {\r",
									"            mode: 'form-data',\r",
									"            raw: JSON.stringify({\r",
									"                  \"email\": pm.environment.get('teacherSitelicence'),\r",
									"                  \"password\": pm.environment.get('password')\r",
									"            })\r",
									"        }\r",
									"    },\r",
									"    function (err, response) {\r",
									"        pm.environment.set('token', response.json().token);\r",
									"    }\r",
									");"
								],
								"type": "text/javascript",
								"id": "339a21db-0799-412a-bcc2-a4c43691099c"
							}
						}
					],
					"_postman_id": "a4123677-2f08-4e04-a28f-0484fa85bd98",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{token}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}siteLicenses/?page=1",
							"host": [
								"{{URL}}siteLicenses"
							],
							"path": [
								""
							],
							"query": [
								{
									"key": "page",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[S] Accessing the siteLicense endpoint",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});\r",
									"\r",
									"var data = JSON.parse(responseBody);\r",
									"tests[\"Verify that a Student accessing siteLicences endpoint will get a message = 'Unable to retrive data due to user role restrictions.'\"] = data.message === 'Unable to retrive data due to user role restrictions.';"
								],
								"type": "text/javascript",
								"id": "85c1dfa3-242d-4e5a-8ef0-19201645f7f0"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let url = pm.environment.get('URL');\r",
									"url += 'services/gigya/login';\r",
									"let caDate = pm.cDate;\r",
									"\r",
									"pm.sendRequest(\r",
									"    {\r",
									"        url: url,\r",
									"        method: 'POST',\r",
									"        header: {\r",
									"            \"Content-Type\": \"application/json\"\r",
									"        },\r",
									"        body: {\r",
									"            mode: 'form-data',\r",
									"            raw: JSON.stringify({\r",
									"                  \"email\": pm.environment.get('student'),\r",
									"                  \"password\": pm.environment.get('password')\r",
									"            })\r",
									"        }\r",
									"    },\r",
									"    function (err, response) {\r",
									"        pm.environment.set('token', response.json().token);\r",
									"    }\r",
									");"
								],
								"type": "text/javascript",
								"id": "31eff6c1-e96e-481c-918f-1e1b43bae3f8"
							}
						}
					],
					"_postman_id": "affb4b8b-353d-4dc7-8003-b938a033df13",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{token}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}siteLicenses/?page=1",
							"host": [
								"{{URL}}siteLicenses"
							],
							"path": [
								""
							],
							"query": [
								{
									"key": "page",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[T] Activate site license access code",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Verify Teacher who activate a site license code is able to get a response code 403\"] = responseCode.code === 403;\r",
									"\r",
									"var data = JSON.parse(responseBody);\r",
									"tests[\"Verify Teacher who activate a site license code is able to get a code == 73270047\"] = data.data.code === 73270047;\r",
									"\r",
									"tests[\"Verify Teacher who activate a site license code is able to get a description = 'Make sure user role is teacher admin.'\"] = data.data.description === \"Make sure user role is teacher admin.\";"
								],
								"type": "text/javascript",
								"id": "743a76b8-0016-45a2-9344-f520479f5516"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let url = pm.environment.get('URL');\r",
									"url += 'services/gigya/login';\r",
									"\r",
									"pm.sendRequest(\r",
									"    {\r",
									"        url: url,\r",
									"        method: 'POST',\r",
									"        header: {\r",
									"            \"Content-Type\": \"application/json\"\r",
									"        },\r",
									"        body: {\r",
									"            mode: 'form-data',\r",
									"            raw: JSON.stringify({\r",
									"                  \"email\": pm.environment.get('teacher'),\r",
									"                  \"password\": pm.environment.get('password')\r",
									"            })\r",
									"        }\r",
									"    },\r",
									"    function (err, response) {\r",
									"        pm.environment.set('token', response.json().token);\r",
									"    }\r",
									");"
								],
								"type": "text/javascript",
								"id": "957f272d-f746-4b5a-82f6-3c0039ad13dc"
							}
						}
					],
					"_postman_id": "7a027056-e54c-49f4-b39d-6a43fd4a30e0",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{token}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "proof",
									"value": "SITE-QX48-N86B-JWDZ",
									"type": "text"
								}
							],
							"options": {}
						},
						"url": "{{URL}}siteLicenses/"
					},
					"response": []
				},
				{
					"name": "[S] Activate site license access code",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Verify Teacher who activate a site license code is able to get a response code 403\"] = responseCode.code === 403;\r",
									"\r",
									"var data = JSON.parse(responseBody);\r",
									"tests[\"Verify Teacher who activate a site license code is able to get a code == 73270047\"] = data.data.code === 73270047;\r",
									"\r",
									"tests[\"Verify Teacher who activate a site license code is able to get a description = 'Make sure user role is teacher admin.'\"] = data.data.description === \"Make sure user role is teacher admin.\";"
								],
								"type": "text/javascript",
								"id": "76b70431-feed-49b4-b065-84da9720ea94"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let url = pm.environment.get('URL');\r",
									"url += 'services/gigya/login';\r",
									"let caDate = pm.cDate;\r",
									"\r",
									"pm.sendRequest(\r",
									"    {\r",
									"        url: url,\r",
									"        method: 'POST',\r",
									"        header: {\r",
									"            \"Content-Type\": \"application/json\"\r",
									"        },\r",
									"        body: {\r",
									"            mode: 'form-data',\r",
									"            raw: JSON.stringify({\r",
									"                  \"email\": pm.environment.get('student'),\r",
									"                  \"password\": pm.environment.get('password')\r",
									"            })\r",
									"        }\r",
									"    },\r",
									"    function (err, response) {\r",
									"        pm.environment.set('token', response.json().token);\r",
									"    }\r",
									");"
								],
								"type": "text/javascript",
								"id": "55bd8f3b-ebc8-432f-a61a-e6a60d166967"
							}
						}
					],
					"_postman_id": "8a0e79f6-c5ec-4262-b523-881613c96286",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{token}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "proof",
									"value": "SITE-QX48-N86B-JWDZ",
									"type": "text"
								}
							],
							"options": {}
						},
						"url": "{{URL}}siteLicenses/"
					},
					"response": []
				},
				{
					"name": "[T] Activate access code with teacher not attributed to an institution",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Verify teacher not attributed to an institution is able to get a response code 422\"] = responseCode.code === 422;\r",
									"\r",
									"var data = JSON.parse(responseBody);\r",
									"tests[\"Verify Teacher not attributed to an institution who activate a site license code is able to get a message = 'Unable to store site license.'\"] = data.message === 'Unable to store site license.';"
								],
								"type": "text/javascript",
								"id": "e6f0725c-e222-4e79-807c-e4129d69d96e"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let url = pm.environment.get('URL');\r",
									"url += 'services/gigya/login';\r",
									"\r",
									"pm.sendRequest(\r",
									"    {\r",
									"        url: url,\r",
									"        method: 'POST',\r",
									"        header: {\r",
									"            \"Content-Type\": \"application/json\"\r",
									"        },\r",
									"        body: {\r",
									"            mode: 'form-data',\r",
									"            raw: JSON.stringify({\r",
									"                  \"email\": pm.environment.get('teacherwithoutInstitution'),\r",
									"                  \"password\": pm.environment.get('password')\r",
									"            })\r",
									"        }\r",
									"    },\r",
									"    function (err, response) {\r",
									"        pm.environment.set('token', response.json().token);\r",
									"    }\r",
									");"
								],
								"type": "text/javascript",
								"id": "7c4f1ae5-681e-44fc-bfea-2d4d0626d975"
							}
						}
					],
					"_postman_id": "41a8f0d0-49ac-4d1a-a60d-10ac3c1c81c2",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{token}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "proof",
									"value": "NX24-YNKX-Z6RC-6M6R",
									"type": "text"
								}
							],
							"options": {}
						},
						"url": "{{URL}}siteLicenses/"
					},
					"response": []
				}
			],
			"_postman_id": "7f933d81-6567-4f93-9abb-9a1386e49653",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						],
						"id": "8734cafa-14bc-4557-8e3b-bcea24679c8b"
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						],
						"id": "404c8e45-9765-4a51-a8ea-cabb5d4460b6"
					}
				}
			]
		},
		{
			"name": "[m] edjin",
			"item": [
				{
					"name": "Edjin User Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Demo id is not null\", function() {\r",
									"var jsonData = pm.response.toJSON();\r",
									"pm.expect(jsonData).not.eq(null);\r",
									"\r",
									"});"
								],
								"type": "text/javascript",
								"id": "bd49318c-55cf-4f7c-826b-6310ec04ebc0"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let url = pm.environment.get('URL');\r",
									"url += 'services/gigya/login';\r",
									"\r",
									"pm.sendRequest(\r",
									"    {\r",
									"        url: url,\r",
									"        method: 'POST',\r",
									"        header: {\r",
									"            \"Content-Type\": \"application/json\"\r",
									"        },\r",
									"        body: {\r",
									"            mode: 'form-data',\r",
									"            raw: JSON.stringify({\r",
									"                  \"email\": pm.environment.get('edjinUser'),\r",
									"                  \"password\": pm.environment.get('password')\r",
									"            })\r",
									"        }\r",
									"    },\r",
									"    function (err, response) {\r",
									"        pm.environment.set('token', response.json().token);\r",
									"    },\r",
									"\r",
									"    function (err, response) {\r",
									"        pm.environment.set('refreshtoken', response.json().refreshToken);\r",
									"    }\r",
									");"
								],
								"type": "text/javascript",
								"id": "67c20857-f637-4730-a586-07c9b9cbe286"
							}
						}
					],
					"_postman_id": "d6278558-20a1-49df-a2d8-2363639c4142",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{token}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{URL}}services/edjin/user/getToken"
					},
					"response": []
				},
				{
					"name": "Go user not existing in edjin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"pm.test(\"User is not existing in Edjin\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.data.description).to.eql(\"User needs to be created first in Edjin.\");\r",
									"});"
								],
								"type": "text/javascript",
								"id": "f6694d12-9ff8-49a0-a993-c0c8504e90ef"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let url = pm.environment.get('URL');\r",
									"let email = pm.environment.get('noResourceUser');\r",
									"let password = pm.environment.get('password');\r",
									"url += 'services/gigya/login';\r",
									"\r",
									"pm.sendRequest(\r",
									"    {\r",
									"        url: url,\r",
									"        method: 'POST',\r",
									"        header: {\r",
									"            \"Content-Type\": \"application/json\"\r",
									"        },\r",
									"        body: {\r",
									"            mode: 'form-data',\r",
									"            raw: JSON.stringify({\r",
									"                  \"email\": email,\r",
									"                  \"password\": password\r",
									"            })\r",
									"        }\r",
									"    },\r",
									"    function (err, response) {\r",
									"        pm.environment.set('token', response.json().token);\r",
									"    },\r",
									"\r",
									"    function (err, response) {\r",
									"        pm.environment.set('refreshtoken', response.json().refreshToken);\r",
									"    }\r",
									");"
								],
								"type": "text/javascript",
								"id": "12221144-b000-4e79-a088-a29ed11cb227"
							}
						}
					],
					"_postman_id": "143412c1-5894-433d-99e4-6c8a89ef603c",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{token}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{URL}}services/edjin/user/getToken"
					},
					"response": []
				},
				{
					"name": "Edjin User Invalid Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"pm.test(\"Invalid JWT token\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.data.description).to.eql(\"E_INVALID_JWT_TOKEN: jwt malformed\");\r",
									"});"
								],
								"type": "text/javascript",
								"id": "592d6df6-b44f-466b-a4f3-811478a9f0ba"
							}
						}
					],
					"_postman_id": "22e43b5f-3e76-487f-862b-084ea8c9bc47",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{invalidtoken}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{URL}}services/edjin/user/getToken"
					},
					"response": []
				},
				{
					"name": "Edjin Product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Product id is 335\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.productId).to.eql(335);\r",
									"});"
								],
								"type": "text/javascript",
								"id": "31e654ce-74ff-45a8-97a0-f3f365e1892f"
							}
						}
					],
					"_postman_id": "0c4fab70-ad8f-42f5-b2a1-21fdca580f9a",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{URL}}services/edjin/product/getProduct/335"
					},
					"response": []
				}
			],
			"_postman_id": "5faa40e3-a8bf-4cd2-88ac-fe35a646c3ee"
		},
		{
			"name": "[m] user",
			"item": [
				{
					"name": "Trial product page",
					"item": [
						{
							"name": "Return flag if user is eligible to activate a trial resource",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"pm.test(\"User is Eligible\", function () {\r",
											"    pm.expect(jsonData.data.isEligible).to.eql(true);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"id": "1c16f36d-80c7-47ab-a3a7-9f4a22aaf80c"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let url = pm.environment.get('URL');\r",
											"url += 'services/gigya/login';\r",
											"\r",
											"pm.sendRequest(\r",
											"    {\r",
											"        url: url,\r",
											"        method: 'POST',\r",
											"        header: {\r",
											"            \"Content-Type\": \"application/json\"\r",
											"        },\r",
											"        body: {\r",
											"            mode: 'form-data',\r",
											"            raw: JSON.stringify({\r",
											"                  \"email\": pm.environment.get('trialUser'),\r",
											"                  \"password\": pm.environment.get('password')\r",
											"            })\r",
											"        }\r",
											"    },\r",
											"    function (err, response) {\r",
											"        pm.environment.set('token', response.json().token);\r",
											"    },\r",
											"\r",
											"    function (err, response) {\r",
											"        pm.environment.set('refreshtoken', response.json().refreshToken);\r",
											"    }\r",
											");"
										],
										"type": "text/javascript",
										"id": "2254248e-9667-4481-9165-ee0c3e20ac28"
									}
								}
							],
							"_postman_id": "83c9d032-3656-42b3-bf57-0e91b3e3983b",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{token}}"
									}
								},
								"method": "GET",
								"header": [],
								"url": "{{URL}}users/trials/{{trialGeo}}"
							},
							"response": []
						},
						{
							"name": "Return flag if user has active subscription on trial product",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"pm.test(\"User has active subscription on trial\", function () {\r",
											"    pm.expect(jsonData.data.description).to.eql(\"The user has an active trial subscription\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"id": "cde4fb7b-74ed-4631-a842-c187a155f91d"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let url = pm.environment.get('URL');\r",
											"url += 'services/gigya/login';\r",
											"\r",
											"pm.sendRequest(\r",
											"    {\r",
											"        url: url,\r",
											"        method: 'POST',\r",
											"        header: {\r",
											"            \"Content-Type\": \"application/json\"\r",
											"        },\r",
											"        body: {\r",
											"            mode: 'form-data',\r",
											"            raw: JSON.stringify({\r",
											"                  \"email\": pm.environment.get('trialUser'),\r",
											"                  \"password\": pm.environment.get('password')\r",
											"            })\r",
											"        }\r",
											"    },\r",
											"    function (err, response) {\r",
											"        pm.environment.set('token', response.json().token);\r",
											"    },\r",
											"\r",
											"    function (err, response) {\r",
											"        pm.environment.set('refreshtoken', response.json().refreshToken);\r",
											"    }\r",
											");"
										],
										"type": "text/javascript",
										"id": "d7608b67-80cd-4233-a6e0-bbce1b609e65"
									}
								}
							],
							"_postman_id": "b2027007-d0a3-4747-a09e-0ef6b370b751",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{token}}"
									}
								},
								"method": "GET",
								"header": [],
								"url": "{{URL}}users/trials/{{trialVCE}}"
							},
							"response": []
						},
						{
							"name": "Return flag if user has maxed out the activation of a trial product",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"pm.test(\"User has active subscription on trial\", function () {\r",
											"    pm.expect(jsonData.data.description).to.eql(\"The trial has reached its activation limit\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"id": "44eda9be-ac8d-4338-ba2a-a8ca9b33dcd6"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let url = pm.environment.get('URL');\r",
											"url += 'services/gigya/login';\r",
											"\r",
											"pm.sendRequest(\r",
											"    {\r",
											"        url: url,\r",
											"        method: 'POST',\r",
											"        header: {\r",
											"            \"Content-Type\": \"application/json\"\r",
											"        },\r",
											"        body: {\r",
											"            mode: 'form-data',\r",
											"            raw: JSON.stringify({\r",
											"                  \"email\": pm.environment.get('trialUser'),\r",
											"                  \"password\": pm.environment.get('password')\r",
											"            })\r",
											"        }\r",
											"    },\r",
											"    function (err, response) {\r",
											"        pm.environment.set('token', response.json().token);\r",
											"    },\r",
											"\r",
											"    function (err, response) {\r",
											"        pm.environment.set('refreshtoken', response.json().refreshToken);\r",
											"    }\r",
											");"
										],
										"type": "text/javascript",
										"id": "ddd2f265-6eae-426f-9526-ddecdbe42786"
									}
								}
							],
							"_postman_id": "946cab41-2b42-44c2-94cd-025f90a2259a",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{token}}"
									}
								},
								"method": "GET",
								"header": [],
								"url": "{{URL}}users/trials/{{trialBS}}"
							},
							"response": []
						}
					],
					"_postman_id": "ff38e368-ce39-46e1-912e-1e3a4df91833",
					"_postman_isSubFolder": true
				},
				{
					"name": "[M] Created Institution",
					"item": [
						{
							"name": "Return user institution via cache = 1",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let url = pm.environment.get('URL');\r",
											"url += 'services/gigya/login';\r",
											"\r",
											"pm.sendRequest(\r",
											"    {\r",
											"        url: url,\r",
											"        method: 'POST',\r",
											"        header: {\r",
											"            \"Content-Type\": \"application/json\"\r",
											"        },\r",
											"        body: {\r",
											"            mode: 'form-data',\r",
											"            raw: JSON.stringify({\r",
											"                  \"email\": pm.environment.get('teacherAdminUser'),\r",
											"                  \"password\": pm.environment.get('password')\r",
											"            })\r",
											"        }\r",
											"    },\r",
											"    function (err, response) {\r",
											"        pm.environment.set('token', response.json().token);\r",
											"    },\r",
											"\r",
											"    function (err, response) {\r",
											"        pm.environment.set('refreshtoken', response.json().refreshToken);\r",
											"    }\r",
											");"
										],
										"type": "text/javascript",
										"id": "f6d8e135-389f-4dbf-9600-add00869973a"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"id": "041fb2a4-fa0f-4135-a78a-ffab85a5bd74"
									}
								}
							],
							"_postman_id": "f5437264-8a09-4d2c-8154-7a6c29e488d7",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{token}}"
									}
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "cache",
											"value": "1",
											"type": "text"
										}
									],
									"options": {}
								},
								"url": "{{URL}}user/institutions"
							},
							"response": []
						},
						{
							"name": "Return user institution via cache = 0",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let url = pm.environment.get('URL');\r",
											"url += 'services/gigya/login';\r",
											"\r",
											"pm.sendRequest(\r",
											"    {\r",
											"        url: url,\r",
											"        method: 'POST',\r",
											"        header: {\r",
											"            \"Content-Type\": \"application/json\"\r",
											"        },\r",
											"        body: {\r",
											"            mode: 'form-data',\r",
											"            raw: JSON.stringify({\r",
											"                  \"email\": pm.environment.get('teacherAdminUser'),\r",
											"                  \"password\": pm.environment.get('password')\r",
											"            })\r",
											"        }\r",
											"    },\r",
											"    function (err, response) {\r",
											"        pm.environment.set('token', response.json().token);\r",
											"    },\r",
											"\r",
											"    function (err, response) {\r",
											"        pm.environment.set('refreshtoken', response.json().refreshToken);\r",
											"    }\r",
											");"
										],
										"type": "text/javascript",
										"id": "7929860b-51fc-4301-8790-5742bbe7640f"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"id": "ed493290-e500-4ade-9997-d861125d96b9"
									}
								}
							],
							"_postman_id": "ff081ac7-7b6d-47ba-ba20-d7fb68a75db7",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{token}}"
									}
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "cache",
											"value": "0",
											"type": "text"
										}
									],
									"options": {}
								},
								"url": "{{URL}}user/institutions"
							},
							"response": []
						},
						{
							"name": "Return user institution via cache invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"pm.test(\"Success is false\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.success).to.eql(false);\r",
											"});"
										],
										"type": "text/javascript",
										"id": "e47b6368-c8cf-427e-9456-16424ede828c"
									}
								}
							],
							"_postman_id": "4f2fc8eb-36e9-4558-8cb9-7af7b5fcecc2",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{invalidtoken}}"
									}
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{URL}}user/institutions?cache=1",
									"host": [
										"{{URL}}user"
									],
									"path": [
										"institutions"
									],
									"query": [
										{
											"key": "cache",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Return error using invalid cache value",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"pm.test(\"Success is false\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.success).to.eql(false);\r",
											"});"
										],
										"type": "text/javascript",
										"id": "091a5642-a31a-4c43-8ffa-d1798d51a6c9"
									}
								}
							],
							"_postman_id": "269a61a2-25d5-4b91-83de-424e2d04556b",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{token}}"
									}
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{URL}}user/institutions?cache=2",
									"host": [
										"{{URL}}user"
									],
									"path": [
										"institutions"
									],
									"query": [
										{
											"key": "cache",
											"value": "2"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Return user institution via skip = 1",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let url = pm.environment.get('URL');\r",
											"url += 'services/gigya/login';\r",
											"\r",
											"pm.sendRequest(\r",
											"    {\r",
											"        url: url,\r",
											"        method: 'POST',\r",
											"        header: {\r",
											"            \"Content-Type\": \"application/json\"\r",
											"        },\r",
											"        body: {\r",
											"            mode: 'form-data',\r",
											"            raw: JSON.stringify({\r",
											"                  \"email\": pm.environment.get('teachSkip'),\r",
											"                  \"password\": pm.environment.get('password')\r",
											"            })\r",
											"        }\r",
											"    },\r",
											"    function (err, response) {\r",
											"        pm.environment.set('token', response.json().token);\r",
											"    },\r",
											"\r",
											"    function (err, response) {\r",
											"        pm.environment.set('refreshtoken', response.json().refreshToken);\r",
											"    }\r",
											");"
										],
										"type": "text/javascript",
										"id": "dedd5f8e-ee11-4e32-aba2-9d32094ef6fe"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"has skipped true\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.isSkipped).to.eql(true);\r",
											"});"
										],
										"type": "text/javascript",
										"id": "03d08442-d754-431e-ae5c-70269295fc0d"
									}
								}
							],
							"_postman_id": "4f7185fb-6676-4bdc-a8d6-53280c58c54a",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{token}}"
									}
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [],
									"options": {}
								},
								"url": {
									"raw": "{{URL}}user/institutions?skip=1",
									"host": [
										"{{URL}}user"
									],
									"path": [
										"institutions"
									],
									"query": [
										{
											"key": "skip",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Return user institution via skip = 0",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let url = pm.environment.get('URL');\r",
											"url += 'services/gigya/login';\r",
											"\r",
											"pm.sendRequest(\r",
											"    {\r",
											"        url: url,\r",
											"        method: 'POST',\r",
											"        header: {\r",
											"            \"Content-Type\": \"application/json\"\r",
											"        },\r",
											"        body: {\r",
											"            mode: 'form-data',\r",
											"            raw: JSON.stringify({\r",
											"                  \"email\": pm.environment.get('teachSkip'),\r",
											"                  \"password\": pm.environment.get('password')\r",
											"            })\r",
											"        }\r",
											"    },\r",
											"    function (err, response) {\r",
											"        pm.environment.set('token', response.json().token);\r",
											"    },\r",
											"\r",
											"    function (err, response) {\r",
											"        pm.environment.set('refreshtoken', response.json().refreshToken);\r",
											"    }\r",
											");"
										],
										"type": "text/javascript",
										"id": "8c2f9cf0-8ff2-4433-83b1-94153207c81b"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"has not skipped false\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.isSkipped).to.eql(false);\r",
											"});"
										],
										"type": "text/javascript",
										"id": "c77f62b0-386d-47d4-837e-1bf2c5362e36"
									}
								}
							],
							"_postman_id": "3b1d8e93-4241-4d1b-92ab-f303a51d4069",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{token}}"
									}
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [],
									"options": {}
								},
								"url": {
									"raw": "{{URL}}user/institutions?skip=0",
									"host": [
										"{{URL}}user"
									],
									"path": [
										"institutions"
									],
									"query": [
										{
											"key": "skip",
											"value": "0"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Return error for users that has existing institution and is joining a new institution",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"pm.test(\"User already has existing institution\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.data.description).to.eql(\"Make sure no institution already exists.\");\r",
											"});"
										],
										"type": "text/javascript",
										"id": "50e98c8e-790c-4223-abab-af2119d46d72"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let url = pm.environment.get('URL');\r",
											"url += 'services/gigya/login';\r",
											"\r",
											"pm.sendRequest(\r",
											"    {\r",
											"        url: url,\r",
											"        method: 'POST',\r",
											"        header: {\r",
											"            \"Content-Type\": \"application/json\"\r",
											"        },\r",
											"        body: {\r",
											"            mode: 'form-data',\r",
											"            raw: JSON.stringify({\r",
											"                  \"email\": pm.environment.get('teacherAdminUser'),\r",
											"                  \"password\": pm.environment.get('password')\r",
											"            })\r",
											"        }\r",
											"    },\r",
											"    function (err, response) {\r",
											"        pm.environment.set('token', response.json().token);\r",
											"    },\r",
											"\r",
											"    function (err, response) {\r",
											"        pm.environment.set('refreshtoken', response.json().refreshToken);\r",
											"    }\r",
											");"
										],
										"type": "text/javascript",
										"id": "79d60f92-f632-4898-baa6-7b6ad8db0aa0"
									}
								}
							],
							"_postman_id": "e7e1364e-d471-4b64-8a06-8344ac6b25b2",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{token}}"
									}
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "schoolCode",
											"value": "{{schoolCode}}",
											"type": "text"
										}
									],
									"options": {}
								},
								"url": "{{URL}}user/institution/"
							},
							"response": []
						},
						{
							"name": "Return error for invalid auth joining institution",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript",
										"id": "bb120c7b-5a5d-4c30-9c80-60901d184bd7"
									}
								}
							],
							"_postman_id": "2242ccad-8af4-4843-8c5a-1689d986f9a0",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{invalidtoken}}"
									}
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "schoolCode",
											"value": "{{schoolCode}}",
											"type": "text"
										}
									],
									"options": {}
								},
								"url": "{{URL}}user/institution/"
							},
							"response": []
						},
						{
							"name": "Return error for user using invalid join school code",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"pm.test(\"Institution not found\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"Institution not found.\");\r",
											"});"
										],
										"type": "text/javascript",
										"id": "b96ac45f-8833-4a74-a117-81499ee25f7e"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let url = pm.environment.get('URL');\r",
											"url += 'services/gigya/login';\r",
											"\r",
											"pm.sendRequest(\r",
											"    {\r",
											"        url: url,\r",
											"        method: 'POST',\r",
											"        header: {\r",
											"            \"Content-Type\": \"application/json\"\r",
											"        },\r",
											"        body: {\r",
											"            mode: 'form-data',\r",
											"            raw: JSON.stringify({\r",
											"                  \"email\": pm.environment.get('teachSkip'),\r",
											"                  \"password\": pm.environment.get('password')\r",
											"            })\r",
											"        }\r",
											"    },\r",
											"    function (err, response) {\r",
											"        pm.environment.set('token', response.json().token);\r",
											"    },\r",
											"\r",
											"    function (err, response) {\r",
											"        pm.environment.set('refreshtoken', response.json().refreshToken);\r",
											"    }\r",
											");"
										],
										"type": "text/javascript",
										"id": "c531dde1-9542-45ca-bb99-1b664ed0c8ef"
									}
								}
							],
							"_postman_id": "2d5a22e1-9e9c-45a6-b73a-99ce1c07bd03",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{token}}"
									}
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "schoolCode",
											"value": "{{invalidSchoolCode}}",
											"type": "text"
										}
									],
									"options": {}
								},
								"url": "{{URL}}user/institution/"
							},
							"response": []
						},
						{
							"name": "Return error for user joining unverified school",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"pm.test(\"Institution is unverified\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"Institution is unverified\");\r",
											"});"
										],
										"type": "text/javascript",
										"id": "691fa5eb-a5b8-4b07-adf4-6ad547ee91c6"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let url = pm.environment.get('URL');\r",
											"url += 'services/gigya/login';\r",
											"\r",
											"pm.sendRequest(\r",
											"    {\r",
											"        url: url,\r",
											"        method: 'POST',\r",
											"        header: {\r",
											"            \"Content-Type\": \"application/json\"\r",
											"        },\r",
											"        body: {\r",
											"            mode: 'form-data',\r",
											"            raw: JSON.stringify({\r",
											"                  \"email\": pm.environment.get('teachSkip'),\r",
											"                  \"password\": pm.environment.get('password')\r",
											"            })\r",
											"        }\r",
											"    },\r",
											"    function (err, response) {\r",
											"        pm.environment.set('token', response.json().token);\r",
											"    },\r",
											"\r",
											"    function (err, response) {\r",
											"        pm.environment.set('refreshtoken', response.json().refreshToken);\r",
											"    }\r",
											");"
										],
										"type": "text/javascript",
										"id": "91aa0d0b-c688-4187-bf82-cfe162f2239e"
									}
								}
							],
							"_postman_id": "3d4d29dc-e762-43c5-8407-2e7c40be4fa6",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{token}}"
									}
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "schoolCode",
											"value": "{{unverifiedSchoolCode}}",
											"type": "text"
										}
									],
									"options": {}
								},
								"url": "{{URL}}user/institution/"
							},
							"response": []
						}
					],
					"_postman_id": "29177200-f5b4-4ff2-816f-9d2f07e34c59",
					"_postman_isSubFolder": true
				}
			],
			"_postman_id": "2fd834af-a6a1-42e6-a101-af840b1eb44c"
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"",
					"",
					"",
					""
				],
				"id": "d08e5257-0dba-4766-84c9-bcbd753a9b94"
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				],
				"id": "07675b5e-098e-49b1-b188-6a9238197461"
			}
		}
	]
}
