{
	"info": {
		"_postman_id": "bdeb6c96-bcd5-475c-9f1a-bccac5b8725d",
		"name": "Global GO API CI/CD",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "access code",
			"item": [
				{
					"name": "Access code health",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"pm.test(\"Permission is not usable\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.eql(\"Permission is not usable.\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/xml",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{URL}}accessCodes/{{accessCode}}/health",
							"host": [
								"{{URL}}accessCodes"
							],
							"path": [
								"{{accessCode}}",
								"health"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "announcement",
			"item": [
				{
					"name": "Get all active announcements.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}announcements/",
							"host": [
								"{{URL}}announcements"
							],
							"path": [
								""
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "books",
			"item": [
				{
					"name": "Return all books - paremeters request",
					"item": [
						{
							"name": "via page",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Is on page 3\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.page).to.eql(3);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{URL}}books?page=3",
									"host": [
										"{{URL}}books"
									],
									"query": [
										{
											"key": "page",
											"value": "3"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "via keyword",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"pm.test(\"has Trial\",function(){ \r",
											"    var x = [];\r",
											"    for(var i = 0; i < jsonData.data.length; i++){\r",
											"        if (jsonData.data[i].name.toLowerCase().match(\"trial\")){\r",
											"            x.push(jsonData.data[i].name)\r",
											"        }\r",
											"    }\r",
											"    pm.expect(x.length).to.eql(jsonData.data.length);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{URL}}books?keyword=Trial series",
									"host": [
										"{{URL}}books"
									],
									"query": [
										{
											"key": "keyword",
											"value": "Trial series"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "via country id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{URL}}books?country_id[]=13",
									"host": [
										"{{URL}}books"
									],
									"query": [
										{
											"key": "country_id[]",
											"value": "13"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "via curriculum id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{URL}}books?curriculum_id=3",
									"host": [
										"{{URL}}books"
									],
									"query": [
										{
											"key": "curriculum_id",
											"value": "3"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "via subject id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{URL}}books?subject_id=3",
									"host": [
										"{{URL}}books"
									],
									"query": [
										{
											"key": "subject_id",
											"value": "3"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "via year level id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{URL}}books?year_level_id=3",
									"host": [
										"{{URL}}books"
									],
									"query": [
										{
											"key": "year_level_id",
											"value": "3"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "via is series with demo 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Series is demo\",function(){ \r",
											"    var x = [];\r",
											"    for(var i = 0; i < jsonData.data.length; i++){\r",
											"        if (jsonData.data[i].trial_id != null){\r",
											"            console.log(x);\r",
											"            x.push(jsonData.data[i].is_enabled)\r",
											"        }\r",
											"    }\r",
											"    pm.expect(x.length).to.eql(jsonData.data.length);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{URL}}books?is_series_with_trial=1",
									"host": [
										"{{URL}}books"
									],
									"query": [
										{
											"key": "is_series_with_trial",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "via is series with demo 0",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Series is demo\",function(){ \r",
											"    var x = [];\r",
											"    for(var i = 0; i < jsonData.data.length; i++){\r",
											"        if (jsonData.data[i].trial_id == null){\r",
											"            console.log(x);\r",
											"            x.push(jsonData.data[i].is_enabled)\r",
											"        }\r",
											"    }\r",
											"    pm.expect(x.length).to.eql(jsonData.data.length);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{URL}}books?is_series_with_trial=0",
									"host": [
										"{{URL}}books"
									],
									"query": [
										{
											"key": "is_series_with_trial",
											"value": "0"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "via is series is enabled",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Series are enabled\",function(){ \r",
											"    var x = [];\r",
											"    for(var i = 0; i < jsonData.data.length; i++){\r",
											"        if (jsonData.data[i].is_enabled == '1'){\r",
											"            console.log(x);\r",
											"            x.push(jsonData.data[i].is_enabled)\r",
											"        }\r",
											"    }\r",
											"    pm.expect(x.length).to.eql(jsonData.data.length);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{URL}}books?is_enabled=1",
									"host": [
										"{{URL}}books"
									],
									"query": [
										{
											"key": "is_enabled",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "via is series is_trial 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Series is Trial\",function(){ \r",
											"    var x = [];\r",
											"    for(var i = 0; i < jsonData.data.length; i++){\r",
											"        if (jsonData.data[i].trial_id != null){\r",
											"            console.log(x);\r",
											"            x.push(jsonData.data[i].is_trial_id)\r",
											"        }\r",
											"    }\r",
											"    pm.expect(x.length).to.eql(jsonData.data.length);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{URL}}books?is_series_with_trial=1",
									"host": [
										"{{URL}}books"
									],
									"query": [
										{
											"key": "is_series_with_trial",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "via is series is_trial 0",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Series is Trial\",function(){ \r",
											"    var x = [];\r",
											"    for(var i = 0; i < jsonData.data.length; i++){\r",
											"        if (jsonData.data[i].trial_id == null){\r",
											"            console.log(x);\r",
											"            x.push(jsonData.data[i].trial_id)\r",
											"        }\r",
											"    }\r",
											"    pm.expect(x.length).to.eql(jsonData.data.length);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{URL}}books?is_series_with_trial=0",
									"host": [
										"{{URL}}books"
									],
									"query": [
										{
											"key": "is_series_with_trial",
											"value": "0"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "via order field and order direction",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{URL}}books?order_field=name&order_direction=DESC",
									"host": [
										"{{URL}}books"
									],
									"query": [
										{
											"key": "order_field",
											"value": "name"
										},
										{
											"key": "order_direction",
											"value": "DESC"
										}
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Return list of all books",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}books/",
							"host": [
								"{{URL}}books"
							],
							"path": [
								""
							],
							"query": [
								{
									"key": "page",
									"value": "3",
									"disabled": true
								},
								{
									"key": "keyword",
									"value": "AQA",
									"disabled": true
								},
								{
									"key": "curriculum_id",
									"value": "2",
									"disabled": true
								},
								{
									"key": "is_trial",
									"value": "1",
									"disabled": true
								},
								{
									"key": "is_series_with_demo",
									"value": "1",
									"disabled": true
								},
								{
									"key": "is_enabled",
									"value": "0",
									"disabled": true
								},
								{
									"key": "country_id",
									"value": "13",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Return book details",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}books/2265",
							"host": [
								"{{URL}}books"
							],
							"path": [
								"2265"
							]
						}
					},
					"response": []
				},
				{
					"name": "Return book details not found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Book is not found\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.data.description).to.eql(\"Book not found. Make sure id is correct.\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}books/1000939",
							"host": [
								"{{URL}}books"
							],
							"path": [
								"1000939"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "contents",
			"item": [
				{
					"name": "Return content details",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}contents/2020",
							"host": [
								"{{URL}}contents"
							],
							"path": [
								"2020"
							]
						}
					},
					"response": []
				},
				{
					"name": "Return content details not found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"pm.test(\"Content not found\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.data.description).to.eql(\"Content not found. Make sure id is correct.\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}contents/19192020",
							"host": [
								"{{URL}}contents"
							],
							"path": [
								"19192020"
							]
						}
					},
					"response": []
				},
				{
					"name": "Return list of details of content",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}contents/2000/details",
							"host": [
								"{{URL}}contents"
							],
							"path": [
								"2000",
								"details"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "country",
			"item": [
				{
					"name": "Get all countries",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"249 Countries returned\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.data.length).to.eql(249);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}countries",
							"host": [
								"{{URL}}countries"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all countries invalid endpoint",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}countrie",
							"host": [
								"{{URL}}countrie"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "curriculums",
			"item": [
				{
					"name": "Get all curriculums",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Verify return list of all curriculums is able to get a response code 200\"] = responseCode.code === 200;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}curriculums/",
							"host": [
								"{{URL}}curriculums"
							],
							"path": [
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all curriculums via country_id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Country is Australia\",function(){ \r",
									"    var x = [];\r",
									"    for(var i = 0; i < jsonData.data.length; i++){\r",
									"        if (jsonData.data[i].country_id = 13){\r",
									"            console.log(x);\r",
									"            x.push(jsonData.data[i].country_id)\r",
									"        }\r",
									"    }\r",
									"    pm.expect(x.length).to.eql(jsonData.data.length);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}curriculums/?country_id[]=13",
							"host": [
								"{{URL}}curriculums"
							],
							"path": [
								""
							],
							"query": [
								{
									"key": "country_id[]",
									"value": "13"
								}
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "[M] Edjin",
			"item": [
				{
					"name": "Edjin User Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Demo id is not null\", function() {\r",
									"var jsonData = pm.response.toJSON();\r",
									"pm.expect(jsonData).not.eq(null);\r",
									"\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let url = pm.environment.get('URL');\r",
									"url += 'services/gigya/login';\r",
									"\r",
									"pm.sendRequest(\r",
									"    {\r",
									"        url: url,\r",
									"        method: 'POST',\r",
									"        header: {\r",
									"            \"Content-Type\": \"application/json\"\r",
									"        },\r",
									"        body: {\r",
									"            mode: 'form-data',\r",
									"            raw: JSON.stringify({\r",
									"                  \"email\": pm.environment.get('edjinUser'),\r",
									"                  \"password\": pm.environment.get('password')\r",
									"            })\r",
									"        }\r",
									"    },\r",
									"    function (err, response) {\r",
									"        pm.environment.set('token', response.json().token);\r",
									"    },\r",
									"\r",
									"    function (err, response) {\r",
									"        pm.environment.set('refreshtoken', response.json().refreshToken);\r",
									"    }\r",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}services/edjin/user/getToken",
							"host": [
								"{{URL}}services"
							],
							"path": [
								"edjin",
								"user",
								"getToken"
							]
						}
					},
					"response": []
				},
				{
					"name": "Go user not existing in edjin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"pm.test(\"User is not existing in Edjin\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.data.description).to.eql(\"User needs to be created first in Edjin.\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let url = pm.environment.get('URL');\r",
									"let email = pm.environment.get('noResourceUser');\r",
									"let password = pm.environment.get('password');\r",
									"url += 'services/gigya/login';\r",
									"\r",
									"pm.sendRequest(\r",
									"    {\r",
									"        url: url,\r",
									"        method: 'POST',\r",
									"        header: {\r",
									"            \"Content-Type\": \"application/json\"\r",
									"        },\r",
									"        body: {\r",
									"            mode: 'form-data',\r",
									"            raw: JSON.stringify({\r",
									"                  \"email\": email,\r",
									"                  \"password\": password\r",
									"            })\r",
									"        }\r",
									"    },\r",
									"    function (err, response) {\r",
									"        pm.environment.set('token', response.json().token);\r",
									"    },\r",
									"\r",
									"    function (err, response) {\r",
									"        pm.environment.set('refreshtoken', response.json().refreshToken);\r",
									"    }\r",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}services/edjin/user/getToken",
							"host": [
								"{{URL}}services"
							],
							"path": [
								"edjin",
								"user",
								"getToken"
							]
						}
					},
					"response": []
				},
				{
					"name": "Edjin User Invalid Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"pm.test(\"Invalid JWT token\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.data.description).to.eql(\"E_INVALID_JWT_TOKEN: jwt malformed\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{invalidtoken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}services/edjin/user/getToken",
							"host": [
								"{{URL}}services"
							],
							"path": [
								"edjin",
								"user",
								"getToken"
							]
						}
					},
					"response": []
				},
				{
					"name": "Edjin Product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Product id is 335\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.productId).to.eql(335);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}services/edjin/product/getProduct/335",
							"host": [
								"{{URL}}services"
							],
							"path": [
								"edjin",
								"product",
								"getProduct",
								"335"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Elevate",
			"item": [
				{
					"name": "Elevate Credentials",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let url = pm.environment.get('URL');\r",
									"url += 'services/gigya/login';\r",
									"\r",
									"pm.sendRequest(\r",
									"    {\r",
									"        url: url,\r",
									"        method: 'POST',\r",
									"        header: {\r",
									"            \"Content-Type\": \"application/json\"\r",
									"        },\r",
									"        body: {\r",
									"            mode: 'form-data',\r",
									"            raw: JSON.stringify({\r",
									"                  \"email\": pm.environment.get('elevateUser'),\r",
									"                  \"password\": pm.environment.get('password')\r",
									"            })\r",
									"        }\r",
									"    },\r",
									"    function (err, response) {\r",
									"        pm.environment.set('token', response.json().token);\r",
									"    },\r",
									"\r",
									"    function (err, response) {\r",
									"        pm.environment.set('refreshtoken', response.json().refreshToken);\r",
									"    }\r",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"tabID\": 4451,\r\n    \"domain\":\"https://www.anz-go-uat.cambridge.edu.au/go/\",\r\n    \"isbn\":\"9781108580212\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}services/elevate/getCredentials",
							"host": [
								"{{URL}}services"
							],
							"path": [
								"elevate",
								"getCredentials"
							],
							"query": [
								{
									"key": "domain",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Elevate Credentials Invalid token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{invalidtoken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"tabID\": 4451,\r\n    \"domain\":\"https://www.anz-go-uat.cambridge.edu.au/go/\",\r\n    \"isbn\":\"9781108580212\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}services/elevate/getCredentials",
							"host": [
								"{{URL}}services"
							],
							"path": [
								"elevate",
								"getCredentials"
							],
							"query": [
								{
									"key": "",
									"value": "",
									"disabled": true
								},
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "formats",
			"item": [
				{
					"name": "formats - parameter request",
					"item": [
						{
							"name": "Get all formats filtered via page",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"is Page 2\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.page).to.eql(2);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{URL}}formats?page=2",
									"host": [
										"{{URL}}formats"
									],
									"query": [
										{
											"key": "page",
											"value": "2"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Get all formats",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Verify return list of all formats is able to get a response code 200\"] = responseCode.code === 200;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}formats/",
							"host": [
								"{{URL}}formats"
							],
							"path": [
								""
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "gigya",
			"item": [
				{
					"name": "User login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Verify return list of all books is able to get a response code 200\"] = responseCode.code === 200;\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"postman.setEnvironmentVariable(\"token\", jsonData.token);\r",
									"postman.setEnvironmentVariable(\"user_id\", jsonData.user_id);\r",
									"postman.setEnvironmentVariable(\"refreshToken\", jsonData.refreshToken);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "email",
									"value": "qateachadmin@pte-mailbox.cambridgedev.org",
									"type": "text"
								},
								{
									"key": "password",
									"value": "globalgo22",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{URL}}services/gigya/login",
							"host": [
								"{{URL}}services"
							],
							"path": [
								"gigya",
								"login"
							],
							"query": [
								{
									"key": "email",
									"value": "qateach_reg8.pen@pte-mailbox.cambridgedev.org",
									"disabled": true
								},
								{
									"key": "password",
									"value": "d3TEhLb3XeIl",
									"disabled": true
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "[M] Institutions",
			"item": [
				{
					"name": "Return institution details via oid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}institutions/{{OID}}",
							"host": [
								"{{URL}}institutions"
							],
							"path": [
								"{{OID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Return error for invalid institution oid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"pm.test(\"Success is false\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.success).to.eql(false);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}institutions/{{invalidOID}}",
							"host": [
								"{{URL}}institutions"
							],
							"path": [
								"{{invalidOID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Return users of institution",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let url = pm.environment.get('URL');\r",
									"url += 'services/gigya/login';\r",
									"\r",
									"pm.sendRequest(\r",
									"    {\r",
									"        url: url,\r",
									"        method: 'POST',\r",
									"        header: {\r",
									"            \"Content-Type\": \"application/json\"\r",
									"        },\r",
									"        body: {\r",
									"            mode: 'form-data',\r",
									"            raw: JSON.stringify({\r",
									"                  \"email\": pm.environment.get('teacherAdminUser'),\r",
									"                  \"password\": pm.environment.get('password')\r",
									"            })\r",
									"        }\r",
									"    },\r",
									"\r",
									"    function (err, response) {\r",
									"        pm.environment.set('token', response.json().token);\r",
									"    },\r",
									"\r",
									"    function (err, response) {\r",
									"        pm.environment.set('refreshtoken', response.json().refreshToken);\r",
									"    }\r",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "{{URL}}institutions/{{OID}}/users",
							"host": [
								"{{URL}}institutions"
							],
							"path": [
								"{{OID}}",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Return error of users with invalid Institution",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let url = pm.environment.get('URL');\r",
									"let email = pm.environment.get('teacherAdminUser');\r",
									"let password = pm.environment.get('password');\r",
									"url += 'services/gigya/login';\r",
									"\r",
									"pm.sendRequest(\r",
									"    {\r",
									"        url: url,\r",
									"        method: 'POST',\r",
									"        header: {\r",
									"            \"Content-Type\": \"application/json\"\r",
									"        },\r",
									"        body: {\r",
									"            mode: 'form-data',\r",
									"            raw: JSON.stringify({\r",
									"                  \"email\": email,\r",
									"                  \"password\": password\r",
									"            })\r",
									"        }\r",
									"    },\r",
									"    function (err, response) {\r",
									"        pm.environment.set('token', response.json().token);\r",
									"    },\r",
									"\r",
									"    function (err, response) {\r",
									"        pm.environment.set('refreshtoken', response.json().refreshToken);\r",
									"    }\r",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}institutions/{{invalidOID}}/users",
							"host": [
								"{{URL}}institutions"
							],
							"path": [
								"{{invalidOID}}",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Return error for users of institution with invalid token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{invalidtoken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}institutions/{{OID}}/users",
							"host": [
								"{{URL}}institutions"
							],
							"path": [
								"{{OID}}",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Institution Invalid Authorization",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"pm.test(\"Sucess is false\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.success).to.eql(false);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{invalidtoken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{URL}}institutions/?name=&city&region&coutnry&regionCode&telephone&url&addressLine1&addressLine2",
							"host": [
								"{{URL}}institutions"
							],
							"path": [
								""
							],
							"query": [
								{
									"key": "name",
									"value": ""
								},
								{
									"key": "city",
									"value": ""
								},
								{
									"key": "region",
									"value": ""
								},
								{
									"key": "coutnry",
									"value": ""
								},
								{
									"key": "regionCode",
									"value": ""
								},
								{
									"key": "telephone",
									"value": ""
								},
								{
									"key": "url",
									"value": ""
								},
								{
									"key": "addressLine1",
									"value": ""
								},
								{
									"key": "addressLine2",
									"value": ""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Institution Invalid input",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"pm.test(\"Sucess is false\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.success).to.eql(false);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{URL}}institutions/?name=&city=&region=&country=&regionCode=&telephone=&url=&addressLine1=&addressLine2=",
							"host": [
								"{{URL}}institutions"
							],
							"path": [
								""
							],
							"query": [
								{
									"key": "name",
									"value": ""
								},
								{
									"key": "city",
									"value": ""
								},
								{
									"key": "region",
									"value": ""
								},
								{
									"key": "country",
									"value": ""
								},
								{
									"key": "regionCode",
									"value": ""
								},
								{
									"key": "telephone",
									"value": ""
								},
								{
									"key": "url",
									"value": ""
								},
								{
									"key": "addressLine1",
									"value": ""
								},
								{
									"key": "addressLine2",
									"value": ""
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Integrations",
			"item": [
				{
					"name": "Return all Integration",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}integrations/",
							"host": [
								"{{URL}}integrations"
							],
							"path": [
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "HM Integration",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Is Edjin Integration\", function () {\r",
									"  pm.expect(jsonData.name).to.eql(\"Edjin\");\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"postman.setEnvironmentVariable(\"edjinClientId\", jsonData.client_id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}integrations/1",
							"host": [
								"{{URL}}integrations"
							],
							"path": [
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "GoElevate Integration",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Is Elevate Integration\", function () {\r",
									"  pm.expect(jsonData.name).to.eql(\"Elevate\");\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"postman.setEnvironmentVariable(\"goelevateClientId\", jsonData.client_id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}integrations/2",
							"host": [
								"{{URL}}integrations"
							],
							"path": [
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "Epub Integration",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Is Epub Integration\", function () {\r",
									"  pm.expect(jsonData.name).to.eql(\"EPub\");\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"postman.setEnvironmentVariable(\"epubClientId\", jsonData.client_id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}integrations/3",
							"host": [
								"{{URL}}integrations"
							],
							"path": [
								"3"
							]
						}
					},
					"response": []
				},
				{
					"name": "ITB Integration",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Is ITB Integration\", function () {\r",
									"  pm.expect(jsonData.name).to.eql(\"Interactive Textbook\");\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"postman.setEnvironmentVariable(\"itbClientId\", jsonData.client_id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}integrations/4",
							"host": [
								"{{URL}}integrations"
							],
							"path": [
								"4"
							]
						}
					},
					"response": []
				},
				{
					"name": "Testhub Integration",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Is Invalid Integration\", function () {\r",
									"  pm.expect(jsonData.name).to.eql(\"Testhub\");\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"postman.setEnvironmentVariable(\"testhubClientId\", jsonData.client_id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}integrations/5",
							"host": [
								"{{URL}}integrations"
							],
							"path": [
								"5"
							]
						}
					},
					"response": []
				},
				{
					"name": "Digital Checkpoints Integration",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Is Invalid Integration\", function () {\r",
									"  pm.expect(jsonData.name).to.eql(\"Digital Checkpoints\");\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"postman.setEnvironmentVariable(\"checkpointsClientId\", jsonData.client_id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}integrations/6",
							"host": [
								"{{URL}}integrations"
							],
							"path": [
								"6"
							]
						}
					},
					"response": []
				},
				{
					"name": "Go Provisioning Integration",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Go Provisioning Integration\", function () {\r",
									"  pm.expect(jsonData.name).to.eql(\"GO Provisioning\");\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"postman.setEnvironmentVariable(\"gopovisioningClientId\", jsonData.client_id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}integrations/7",
							"host": [
								"{{URL}}integrations"
							],
							"path": [
								"7"
							]
						}
					},
					"response": []
				},
				{
					"name": "Invalid Integration",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.test(\"Is Invalid Integration\", function () {\r",
									"  pm.expect(jsonData.message).to.eql(\"Integration not found.\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}integrations/8",
							"host": [
								"{{URL}}integrations"
							],
							"path": [
								"8"
							]
						}
					},
					"response": []
				},
				{
					"name": "Return user edjin resources",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let url = pm.environment.get('URL');\r",
									"url += 'services/gigya/login';\r",
									"\r",
									"pm.sendRequest(\r",
									"    {\r",
									"        url: url,\r",
									"        method: 'POST',\r",
									"        header: {\r",
									"            \"Content-Type\": \"application/json\"\r",
									"        },\r",
									"        body: {\r",
									"            mode: 'form-data',\r",
									"            raw: JSON.stringify({\r",
									"                  \"email\": pm.environment.get('userWithAllResource'),\r",
									"                  \"password\": pm.environment.get('password')\r",
									"            })\r",
									"        }\r",
									"    },\r",
									"    function (err, response) {\r",
									"        pm.environment.set('token', response.json().token);\r",
									"    },\r",
									"\r",
									"    function (err, response) {\r",
									"        pm.environment.set('refreshtoken', response.json().refreshToken);\r",
									"    }\r",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}integrations/{{edjinClientId}}/userResources",
							"host": [
								"{{URL}}integrations"
							],
							"path": [
								"{{edjinClientId}}",
								"userResources"
							]
						}
					},
					"response": []
				},
				{
					"name": "Return user elevate resources",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let url = pm.environment.get('URL');\r",
									"url += 'services/gigya/login';\r",
									"\r",
									"pm.sendRequest(\r",
									"    {\r",
									"        url: url,\r",
									"        method: 'POST',\r",
									"        header: {\r",
									"            \"Content-Type\": \"application/json\"\r",
									"        },\r",
									"        body: {\r",
									"            mode: 'form-data',\r",
									"            raw: JSON.stringify({\r",
									"                  \"email\": pm.environment.get('userWithAllResource'),\r",
									"                  \"password\": pm.environment.get('password')\r",
									"            })\r",
									"        }\r",
									"    },\r",
									"    function (err, response) {\r",
									"        pm.environment.set('token', response.json().token);\r",
									"    },\r",
									"\r",
									"    function (err, response) {\r",
									"        pm.environment.set('refreshtoken', response.json().refreshToken);\r",
									"    }\r",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}integrations/{{goelevateClientId}}/userResources",
							"host": [
								"{{URL}}integrations"
							],
							"path": [
								"{{goelevateClientId}}",
								"userResources"
							]
						}
					},
					"response": []
				},
				{
					"name": "Return user Epub resources",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let url = pm.environment.get('URL');\r",
									"url += 'services/gigya/login';\r",
									"\r",
									"pm.sendRequest(\r",
									"    {\r",
									"        url: url,\r",
									"        method: 'POST',\r",
									"        header: {\r",
									"            \"Content-Type\": \"application/json\"\r",
									"        },\r",
									"        body: {\r",
									"            mode: 'form-data',\r",
									"            raw: JSON.stringify({\r",
									"                  \"email\": pm.environment.get('userWithAllResource'),\r",
									"                  \"password\": pm.environment.get('password')\r",
									"            })\r",
									"        }\r",
									"    },\r",
									"    function (err, response) {\r",
									"        pm.environment.set('token', response.json().token);\r",
									"    },\r",
									"\r",
									"    function (err, response) {\r",
									"        pm.environment.set('refreshtoken', response.json().refreshToken);\r",
									"    }\r",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}integrations/{{epubClientId}}/userResources",
							"host": [
								"{{URL}}integrations"
							],
							"path": [
								"{{epubClientId}}",
								"userResources"
							]
						}
					},
					"response": []
				},
				{
					"name": "Return user ITB resources",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let url = pm.environment.get('URL');\r",
									"url += 'services/gigya/login';\r",
									"\r",
									"pm.sendRequest(\r",
									"    {\r",
									"        url: url,\r",
									"        method: 'POST',\r",
									"        header: {\r",
									"            \"Content-Type\": \"application/json\"\r",
									"        },\r",
									"        body: {\r",
									"            mode: 'form-data',\r",
									"            raw: JSON.stringify({\r",
									"                  \"email\": pm.environment.get('userWithAllResource'),\r",
									"                  \"password\": pm.environment.get('password')\r",
									"            })\r",
									"        }\r",
									"    },\r",
									"    function (err, response) {\r",
									"        pm.environment.set('token', response.json().token);\r",
									"    },\r",
									"\r",
									"    function (err, response) {\r",
									"        pm.environment.set('refreshtoken', response.json().refreshToken);\r",
									"    }\r",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}integrations/{{itbClientId}}/userResources",
							"host": [
								"{{URL}}integrations"
							],
							"path": [
								"{{itbClientId}}",
								"userResources"
							]
						}
					},
					"response": []
				},
				{
					"name": "Return user Testhub resources",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let url = pm.environment.get('URL');\r",
									"url += 'services/gigya/login';\r",
									"\r",
									"pm.sendRequest(\r",
									"    {\r",
									"        url: url,\r",
									"        method: 'POST',\r",
									"        header: {\r",
									"            \"Content-Type\": \"application/json\"\r",
									"        },\r",
									"        body: {\r",
									"            mode: 'form-data',\r",
									"            raw: JSON.stringify({\r",
									"                  \"email\": pm.environment.get('userWithAllResource'),\r",
									"                  \"password\": pm.environment.get('password')\r",
									"            })\r",
									"        }\r",
									"    },\r",
									"    function (err, response) {\r",
									"        pm.environment.set('token', response.json().token);\r",
									"    },\r",
									"\r",
									"    function (err, response) {\r",
									"        pm.environment.set('refreshtoken', response.json().refreshToken);\r",
									"    }\r",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}integrations/{{testhubClientId}}/userResources",
							"host": [
								"{{URL}}integrations"
							],
							"path": [
								"{{testhubClientId}}",
								"userResources"
							]
						}
					},
					"response": []
				},
				{
					"name": "Return user Digital Checkpoints resources",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let url = pm.environment.get('URL');\r",
									"url += 'services/gigya/login';\r",
									"\r",
									"pm.sendRequest(\r",
									"    {\r",
									"        url: url,\r",
									"        method: 'POST',\r",
									"        header: {\r",
									"            \"Content-Type\": \"application/json\"\r",
									"        },\r",
									"        body: {\r",
									"            mode: 'form-data',\r",
									"            raw: JSON.stringify({\r",
									"                  \"email\": pm.environment.get('userWithAllResource'),\r",
									"                  \"password\": pm.environment.get('password')\r",
									"            })\r",
									"        }\r",
									"    },\r",
									"    function (err, response) {\r",
									"        pm.environment.set('token', response.json().token);\r",
									"    },\r",
									"\r",
									"    function (err, response) {\r",
									"        pm.environment.set('refreshtoken', response.json().refreshToken);\r",
									"    }\r",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}integrations/{{checkpointsClientId}}/userResources",
							"host": [
								"{{URL}}integrations"
							],
							"path": [
								"{{checkpointsClientId}}",
								"userResources"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "[M] resources",
			"item": [
				{
					"name": "Return all resources - paremeter request",
					"item": [
						{
							"name": "Loads all user resources by page",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"is page 1\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.page).to.eql(1);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let url = pm.environment.get('URL');\r",
											"url += 'services/gigya/login';\r",
											"\r",
											"pm.sendRequest(\r",
											"    {\r",
											"        url: url,\r",
											"        method: 'POST',\r",
											"        header: {\r",
											"            \"Content-Type\": \"application/json\"\r",
											"        },\r",
											"        body: {\r",
											"            mode: 'form-data',\r",
											"            raw: JSON.stringify({\r",
											"                  \"email\": pm.environment.get('userWithAllResource'),\r",
											"                  \"password\": pm.environment.get('password')\r",
											"            })\r",
											"        }\r",
											"    },\r",
											"    function (err, response) {\r",
											"        pm.environment.set('token', response.json().token);\r",
											"    },\r",
											"\r",
											"    function (err, response) {\r",
											"        pm.environment.set('refreshtoken', response.json().refreshToken);\r",
											"    }\r",
											");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{URL}}resources/?page=1",
									"host": [
										"{{URL}}resources"
									],
									"path": [
										""
									],
									"query": [
										{
											"key": "page",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Loads all user resources by order and order direction",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let url = pm.environment.get('URL');\r",
											"url += 'services/gigya/login';\r",
											"\r",
											"pm.sendRequest(\r",
											"    {\r",
											"        url: url,\r",
											"        method: 'POST',\r",
											"        header: {\r",
											"            \"Content-Type\": \"application/json\"\r",
											"        },\r",
											"        body: {\r",
											"            mode: 'form-data',\r",
											"            raw: JSON.stringify({\r",
											"                  \"email\": pm.environment.get('userWithAllResource'),\r",
											"                  \"password\": pm.environment.get('password')\r",
											"            })\r",
											"        }\r",
											"    },\r",
											"    function (err, response) {\r",
											"        pm.environment.set('token', response.json().token);\r",
											"    },\r",
											"\r",
											"    function (err, response) {\r",
											"        pm.environment.set('refreshtoken', response.json().refreshToken);\r",
											"    }\r",
											");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{URL}}resources/?order_field=name&order_direction=desc",
									"host": [
										"{{URL}}resources"
									],
									"path": [
										""
									],
									"query": [
										{
											"key": "order_field",
											"value": "name"
										},
										{
											"key": "order_direction",
											"value": "desc"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Loads all user resources by is_active",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let url = pm.environment.get('URL');\r",
											"url += 'services/gigya/login';\r",
											"\r",
											"pm.sendRequest(\r",
											"    {\r",
											"        url: url,\r",
											"        method: 'POST',\r",
											"        header: {\r",
											"            \"Content-Type\": \"application/json\"\r",
											"        },\r",
											"        body: {\r",
											"            mode: 'form-data',\r",
											"            raw: JSON.stringify({\r",
											"                  \"email\": pm.environment.get('userWithAllResource'),\r",
											"                  \"password\": pm.environment.get('password')\r",
											"            })\r",
											"        }\r",
											"    },\r",
											"    function (err, response) {\r",
											"        pm.environment.set('token', response.json().token);\r",
											"    },\r",
											"\r",
											"    function (err, response) {\r",
											"        pm.environment.set('refreshtoken', response.json().refreshToken);\r",
											"    }\r",
											");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{URL}}resources/?is_active=1",
									"host": [
										"{{URL}}resources"
									],
									"path": [
										""
									],
									"query": [
										{
											"key": "is_active",
											"value": "1"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Loads all user resources which are series details",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let url = pm.environment.get('URL');\r",
									"url += 'services/gigya/login';\r",
									"\r",
									"pm.sendRequest(\r",
									"    {\r",
									"        url: url,\r",
									"        method: 'POST',\r",
									"        header: {\r",
									"            \"Content-Type\": \"application/json\"\r",
									"        },\r",
									"        body: {\r",
									"            mode: 'form-data',\r",
									"            raw: JSON.stringify({\r",
									"                  \"email\": pm.environment.get('userWithAllResource'),\r",
									"                  \"password\": pm.environment.get('password')\r",
									"            })\r",
									"        }\r",
									"    },\r",
									"    function (err, response) {\r",
									"        pm.environment.set('token', response.json().token);\r",
									"    },\r",
									"\r",
									"    function (err, response) {\r",
									"        pm.environment.set('refreshtoken', response.json().refreshToken);\r",
									"    }\r",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}resources/",
							"host": [
								"{{URL}}resources"
							],
							"path": [
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Loads all user resources which are series with valid authorization",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Verify return list of all user resources with invalid authorization is able to get a response code 401\"] = responseCode.code === 401;\r",
									"\r",
									"var data = JSON.parse(responseBody);\r",
									"tests[\"Verify return list of all user resources with invalid authorization is able to get message 'InvalidJwtToken'\"] = data.message === \"InvalidJwtToken\";\r",
									"\r",
									"tests[\"Verify return list of all user resources with invalid authorization is able to get success message false\"] = data.success === false;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{invalidtoken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}resources/",
							"host": [
								"{{URL}}resources"
							],
							"path": [
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Activate Access code Invalid Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Verify return list of all user resources is able to get a response code 401\"] = responseCode.code === 401;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{invalidtoken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}resources?proof={{accessCode}}",
							"host": [
								"{{URL}}resources"
							],
							"query": [
								{
									"key": "proof",
									"value": "{{accessCode}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Activate Reactivation code Invalid Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Verify return list of all user resources is able to get a response code 401\"] = responseCode.code === 401;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{invalidtoken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}resources?proof=37E8-DRXM-6E3F-VR2R&print_reactivation_proof=R96E-V9WD-28WH-4M9K",
							"host": [
								"{{URL}}resources"
							],
							"query": [
								{
									"key": "proof",
									"value": "37E8-DRXM-6E3F-VR2R"
								},
								{
									"key": "proof",
									"value": "R96E-V9WD-28WH-4M9K",
									"disabled": true
								},
								{
									"key": "print_reactivation_proof",
									"value": "R96E-V9WD-28WH-4M9K"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Activate using a non trial entitlement id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Verify return list of all user resources is able to get a response code 200\"] = responseCode.code === 404;"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let url = pm.environment.get('URL');\r",
									"url += 'services/gigya/login';\r",
									"\r",
									"pm.sendRequest(\r",
									"    {\r",
									"        url: url,\r",
									"        method: 'POST',\r",
									"        header: {\r",
									"            \"Content-Type\": \"application/json\"\r",
									"        },\r",
									"        body: {\r",
									"            mode: 'form-data',\r",
									"            raw: JSON.stringify({\r",
									"                  \"email\": pm.environment.get('edjinUser'),\r",
									"                  \"password\": pm.environment.get('password')\r",
									"            })\r",
									"        }\r",
									"    },\r",
									"    function (err, response) {\r",
									"        pm.environment.set('token', response.json().token);\r",
									"    },\r",
									"\r",
									"    function (err, response) {\r",
									"        pm.environment.set('refreshtoken', response.json().refreshToken);\r",
									"    }\r",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}resources?trial_id={{nontrial_id}}",
							"host": [
								"{{URL}}resources"
							],
							"query": [
								{
									"key": "trial_id",
									"value": "{{nontrial_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Activate Trial code Invalid Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Verify return list of all user resources is able to get a response code 401\"] = responseCode.code === 401;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{invalidtoken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}resources?trial_id=4754",
							"host": [
								"{{URL}}resources"
							],
							"query": [
								{
									"key": "trial_id",
									"value": "4754"
								}
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "series",
			"item": [
				{
					"name": "Series tabs parameter request",
					"item": [
						{
							"name": "Return the specific series tab via seriesID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{URL}}series/333/tabs",
									"host": [
										"{{URL}}series"
									],
									"path": [
										"333",
										"tabs"
									]
								}
							},
							"response": []
						},
						{
							"name": "Return the specific series tab via is_public",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{URL}}series/333/tabs?is_public=1",
									"host": [
										"{{URL}}series"
									],
									"path": [
										"333",
										"tabs"
									],
									"query": [
										{
											"key": "is_public",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Return the specific series tab via user_access",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{URL}}series/333/tabs?user_access=teacher",
									"host": [
										"{{URL}}series"
									],
									"path": [
										"333",
										"tabs"
									],
									"query": [
										{
											"key": "user_access",
											"value": "teacher"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Return the specific series tab via authorization_type",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{URL}}series/333/tabs?authorization_type=free",
									"host": [
										"{{URL}}series"
									],
									"path": [
										"333",
										"tabs"
									],
									"query": [
										{
											"key": "authorization_type",
											"value": "free"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Return the specific series tab via include",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{URL}}series/333/tabs?inlcude[]=configuration",
									"host": [
										"{{URL}}series"
									],
									"path": [
										"333",
										"tabs"
									],
									"query": [
										{
											"key": "inlcude[]",
											"value": "configuration"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Return the specific series tab via order_field and order_direction",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{URL}}series/333/tabs?order_field=name&order_direction=desc",
									"host": [
										"{{URL}}series"
									],
									"path": [
										"333",
										"tabs"
									],
									"query": [
										{
											"key": "order_field",
											"value": "name"
										},
										{
											"key": "order_direction",
											"value": "desc"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Series titles parameter request",
					"item": [
						{
							"name": "Return the specific series title via series_id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{URL}}series/333/titles",
									"host": [
										"{{URL}}series"
									],
									"path": [
										"333",
										"titles"
									]
								}
							},
							"response": []
						},
						{
							"name": "Return the specific series title via is_enabled 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var responseJson = pm.response.json();\r",
											"pm.test(\"Series are enabled = 1\",function(){ \r",
											"    var x = [];\r",
											"    for(var i = 0; i < responseJson.data.length; i++){\r",
											"        if (responseJson.data[i].is_enabled == '1'){\r",
											"            x.push(responseJson.data[i].is_enabled)\r",
											"        }\r",
											"    }\r",
											"    pm.expect(x.length).to.eql(responseJson.data.length);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{URL}}series/333/titles?is_enabled=1",
									"host": [
										"{{URL}}series"
									],
									"path": [
										"333",
										"titles"
									],
									"query": [
										{
											"key": "is_enabled",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Return list of series via is enabled 0",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var responseJson = pm.response.json();\r",
											"pm.test(\"Series not enabled\",function(){ \r",
											"    var x = [];\r",
											"    for(var i = 0; i < responseJson.data.length; i++){\r",
											"        if (responseJson.data[i].is_enabled == '0'){\r",
											"            x.push(responseJson.data[i].is_enabled)\r",
											"        }\r",
											"    }\r",
											"    pm.expect(x.length).to.eql(responseJson.data.length);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{URL}}series/333/titles?is_enabled=0",
									"host": [
										"{{URL}}series"
									],
									"path": [
										"333",
										"titles"
									],
									"query": [
										{
											"key": "is_enabled",
											"value": "0"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Return the list of series titles via curriculum_id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{URL}}series/139/titles?curriculum_id[]=3",
									"host": [
										"{{URL}}series"
									],
									"path": [
										"139",
										"titles"
									],
									"query": [
										{
											"key": "curriculum_id[]",
											"value": "3"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Return the list of series titles via subject_id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{URL}}series/139/titles?subject_id[]=1",
									"host": [
										"{{URL}}series"
									],
									"path": [
										"139",
										"titles"
									],
									"query": [
										{
											"key": "subject_id[]",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Return the list of series titles via yearlevel_id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{URL}}series/139/titles?year_level_id[]=21",
									"host": [
										"{{URL}}series"
									],
									"path": [
										"139",
										"titles"
									],
									"query": [
										{
											"key": "year_level_id[]",
											"value": "21"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Return the list of series titles via hasdemo_id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Demo id is not null\", function() {\r",
											"var jsonData = pm.response.json();\r",
											"pm.expect(jsonData.data.demo_id).not.eq(null);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{URL}}series/300/titles?has_demo_id=1",
									"host": [
										"{{URL}}series"
									],
									"path": [
										"300",
										"titles"
									],
									"query": [
										{
											"key": "has_demo_id",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Return the list of series titles via order_field and order_direction",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{URL}}series/300/titles?order_field=name&order_direction=desc",
									"host": [
										"{{URL}}series"
									],
									"path": [
										"300",
										"titles"
									],
									"query": [
										{
											"key": "order_field",
											"value": "name"
										},
										{
											"key": "order_direction",
											"value": "desc"
										}
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Return list of series",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Verify return list of all series is able to get a response code 200\"] = responseCode.code === 200;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}series/",
							"host": [
								"{{URL}}series"
							],
							"path": [
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Return list of series via pretty url",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Series is Step Up: Health and Physical Education for Queensland\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.data[0].name).to.eql(\"Step Up: Health and Physical Education for Queensland\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}series?pretty_url=Step-Up-Health-and-Physical-Education-for-Queensland",
							"host": [
								"{{URL}}series"
							],
							"query": [
								{
									"key": "pretty_url",
									"value": "Step-Up-Health-and-Physical-Education-for-Queensland"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Return series details",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Series id is 333\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.series_id).to.eql(333);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}series/333",
							"host": [
								"{{URL}}series"
							],
							"path": [
								"333"
							]
						}
					},
					"response": []
				},
				{
					"name": "Return series details not found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Verify return list of series details not found is able to get a response code 404\"] = responseCode.code === 404;\r",
									"\r",
									"var data = JSON.parse(responseBody);\r",
									"tests[\"Verify return list of series details not found is able to get message 'Series not found.'\"] = data.message === \"Series not found.\";\r",
									"\r",
									"tests[\"Verify return list of series details not found is able to get success message false\"] = data.success === false;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}series/333000",
							"host": [
								"{{URL}}series"
							],
							"path": [
								"333000"
							]
						}
					},
					"response": []
				},
				{
					"name": "Return series details tabs",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Verify return list of series details tabs is able to get a response code 200\"] = responseCode.code === 200;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}series/333/tabs",
							"host": [
								"{{URL}}series"
							],
							"path": [
								"333",
								"tabs"
							]
						}
					},
					"response": []
				},
				{
					"name": "Return the list of series titles",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Verify return list of series details titles is able to get a response code 200\"] = responseCode.code === 200;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}series/333/titles",
							"host": [
								"{{URL}}series"
							],
							"path": [
								"333",
								"titles"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "subjects",
			"item": [
				{
					"name": "Return list of all subjects",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}subjects/",
							"host": [
								"{{URL}}subjects"
							],
							"path": [
								""
							],
							"query": [
								{
									"key": "country_id",
									"value": "",
									"disabled": true
								},
								{
									"key": "is_enabled",
									"value": "1",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Return list of subjects by country_id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}subjects/?country_id[]=13",
							"host": [
								"{{URL}}subjects"
							],
							"path": [
								""
							],
							"query": [
								{
									"key": "country_id[]",
									"value": "13"
								}
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "tabs",
			"item": [
				{
					"name": "tabs- parameter request",
					"item": [
						{
							"name": "Return the list of tab contents via page filter",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var data = JSON.parse(responseBody);\r",
											"tests[\"Verify return list of tab contents via page filter is able to get page = 2\"] = data.page === 2;\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{URL}}tabs/4797/contents?page=2",
									"host": [
										"{{URL}}tabs"
									],
									"path": [
										"4797",
										"contents"
									],
									"query": [
										{
											"key": "page",
											"value": "2"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Return the list of tab contents via order field and order direction=ASC",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Verify return list of tab contents via order field and order direction is able to get a response code 200\"] = responseCode.code === 200;\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{URL}}tabs/4797/contents?order_field=heading&order_direction=ASC",
									"host": [
										"{{URL}}tabs"
									],
									"path": [
										"4797",
										"contents"
									],
									"query": [
										{
											"key": "order_field",
											"value": "heading"
										},
										{
											"key": "order_direction",
											"value": "ASC"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Return the list of tab contents",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Verify return list of tab contents is able to get a response code 200\"] = responseCode.code === 200;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}tabs/4797/contents",
							"host": [
								"{{URL}}tabs"
							],
							"path": [
								"4797",
								"contents"
							]
						}
					},
					"response": []
				},
				{
					"name": "Return the list of tab contents not found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Verify return list of tab contents not found is able to get a response code 404\"] = responseCode.code === 404;\r",
									"\r",
									"var data = JSON.parse(responseBody);\r",
									"tests[\"Verify return list of tab contents not found is able to get message 'Tab not found.'\"] = data.message === \"Tab not found.\";\r",
									"\r",
									"tests[\"Verify return list of tab contents not found is able to get success message false\"] = data.success === false;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}tabs/1004797/contents",
							"host": [
								"{{URL}}tabs"
							],
							"path": [
								"1004797",
								"contents"
							]
						}
					},
					"response": []
				},
				{
					"name": "Return tab record",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Verify return tab record is able to get a response code 200\"] = responseCode.code === 200;\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}tabs/3899",
							"host": [
								"{{URL}}tabs"
							],
							"path": [
								"3899"
							]
						}
					},
					"response": []
				},
				{
					"name": "Return tab via include",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Verify return tab record is able to get a response code 200\"] = responseCode.code === 200;\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}tabs/3899?include[]=configuration",
							"host": [
								"{{URL}}tabs"
							],
							"path": [
								"3899"
							],
							"query": [
								{
									"key": "include[]",
									"value": "configuration"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Return tab record not found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Verify return tab record is able to get a response code 404\"] = responseCode.code === 404;\r",
									"\r",
									"var data = JSON.parse(responseBody);\r",
									"tests[\"Verify return tab record is able to get message 'Tab not found.'\"] = data.message === \"Tab not found.\";\r",
									"\r",
									"tests[\"Verify return tab record able to get success message false\"] = data.success === false;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}tabs/1004797",
							"host": [
								"{{URL}}tabs"
							],
							"path": [
								"1004797"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "titles",
			"item": [
				{
					"name": "titles parameter request",
					"item": [
						{
							"name": "Return titlevia is_enabled",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Verify return title detail is able to get a response code 200\"] = responseCode.code === 200;"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{URL}}titles/?is_enabled=1",
									"host": [
										"{{URL}}titles"
									],
									"path": [
										""
									],
									"query": [
										{
											"key": "is_enabled",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Return title via pretty_url",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Verify return title detail is able to get a response code 200\"] = responseCode.code === 200;"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{URL}}titles/?pretty_url=Dynamic-English-Skills-for-the-Australian-Curriculum-A-multilevel-approach-Year-7",
									"host": [
										"{{URL}}titles"
									],
									"path": [
										""
									],
									"query": [
										{
											"key": "pretty_url",
											"value": "Dynamic-English-Skills-for-the-Australian-Curriculum-A-multilevel-approach-Year-7"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Return title via include",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Verify return title detail is able to get a response code 200\"] = responseCode.code === 200;"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{URL}}titles/?include[]=configuration",
									"host": [
										"{{URL}}titles"
									],
									"path": [
										""
									],
									"query": [
										{
											"key": "include[]",
											"value": "configuration"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "tab titles parameter request",
					"item": [
						{
							"name": "Return the list of tabs of titles via titleID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Verify return list of title tabs is able to get a response code 200\"] = responseCode.code === 200;"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{URL}}titles/2657/tabs",
									"host": [
										"{{URL}}titles"
									],
									"path": [
										"2657",
										"tabs"
									]
								}
							},
							"response": []
						},
						{
							"name": "Return the list of tabs of title via include",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Verify return list of title tabs is able to get a response code 200\"] = responseCode.code === 200;"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{URL}}titles/2657/tabs?include[]=configuration",
									"host": [
										"{{URL}}titles"
									],
									"path": [
										"2657",
										"tabs"
									],
									"query": [
										{
											"key": "include[]",
											"value": "configuration"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Return the list of tabs of title via is_restricted",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Verify return list of title tabs is able to get a response code 200\"] = responseCode.code === 200;"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{URL}}titles/2657/tabs?is_restricted=1",
									"host": [
										"{{URL}}titles"
									],
									"path": [
										"2657",
										"tabs"
									],
									"query": [
										{
											"key": "is_restricted",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Return the list of title tabs via order_field and order_direction",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Verify return list of title tabs is able to get a response code 200\"] = responseCode.code === 200;"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{URL}}titles/2657/tabs?order_field=name&order_direction=desc",
									"host": [
										"{{URL}}titles"
									],
									"path": [
										"2657",
										"tabs"
									],
									"query": [
										{
											"key": "order_field",
											"value": "name"
										},
										{
											"key": "order_direction",
											"value": "desc"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Return title details",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Verify return title detail is able to get a response code 200\"] = responseCode.code === 200;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}titles/2776",
							"host": [
								"{{URL}}titles"
							],
							"path": [
								"2776"
							]
						}
					},
					"response": []
				},
				{
					"name": "Return title details not found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Verify return title detail not found is able to get a response code 404\"] = responseCode.code === 404;\r",
									"\r",
									"var data = JSON.parse(responseBody);\r",
									"tests[\"Verify return title detail not found is able to get a message 'Title not found.'\"] = data.message === \"Title not found.\";\r",
									"\r",
									"tests[\"Verify return title detail not found is able to get a success message false\"] = data.success === false;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}titles/10000",
							"host": [
								"{{URL}}titles"
							],
							"path": [
								"10000"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "trial",
			"item": [
				{
					"name": "Return tabs of trial",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}trials/{{trial_id}}/tabs",
							"host": [
								"{{URL}}trials"
							],
							"path": [
								"{{trial_id}}",
								"tabs"
							]
						}
					},
					"response": []
				},
				{
					"name": "Return error message for no tabs of trial",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"pm.test(\"Tab not Found\", function(){\r",
									" pm.expect(jsonData.message).to.eql(\"Tab not found.\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}trials/{{notabtrial_id}}/tabs",
							"host": [
								"{{URL}}trials"
							],
							"path": [
								"{{notabtrial_id}}",
								"tabs"
							]
						}
					},
					"response": []
				},
				{
					"name": "Return error message for non trial entitlement",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"pm.test(\"Entitlement is not trial\", function(){\r",
									" pm.expect(jsonData.message).to.eql(\"Unable to search resources.\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}trials/{{nontrial_id}}/tabs",
							"host": [
								"{{URL}}trials"
							],
							"path": [
								"{{nontrial_id}}",
								"tabs"
							]
						}
					},
					"response": []
				},
				{
					"name": "Return error message for trial entitlement not existing",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"pm.test(\"Entitlement not Found\", function(){\r",
									" pm.expect(jsonData.message).to.eql(\"Unable to locate demo entitlement for book.\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}trials/423121/tabs",
							"host": [
								"{{URL}}trials"
							],
							"path": [
								"423121",
								"tabs"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "[M] user",
			"item": [
				{
					"name": "Trial product page",
					"item": [
						{
							"name": "Return flag if user is eligible to activate a Trial resource",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"pm.test(\"User is Eligible\", function () {\r",
											"    pm.expect(jsonData.data.isEligible).to.eql(true);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let url = pm.environment.get('URL');\r",
											"url += 'services/gigya/login';\r",
											"\r",
											"pm.sendRequest(\r",
											"    {\r",
											"        url: url,\r",
											"        method: 'POST',\r",
											"        header: {\r",
											"            \"Content-Type\": \"application/json\"\r",
											"        },\r",
											"        body: {\r",
											"            mode: 'form-data',\r",
											"            raw: JSON.stringify({\r",
											"                  \"email\": pm.environment.get('trialUser'),\r",
											"                  \"password\": pm.environment.get('password')\r",
											"            })\r",
											"        }\r",
											"    },\r",
											"    function (err, response) {\r",
											"        pm.environment.set('token', response.json().token);\r",
											"    },\r",
											"\r",
											"    function (err, response) {\r",
											"        pm.environment.set('refreshtoken', response.json().refreshToken);\r",
											"    }\r",
											");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{URL}}users/trials/{{trialGeo}}",
									"host": [
										"{{URL}}users"
									],
									"path": [
										"trials",
										"{{trialGeo}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Return flag if user has active subscription on trial product",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"pm.test(\"User has active subscription on trial\", function () {\r",
											"    pm.expect(jsonData.data.description).to.eql(\"The user has an active trial subscription\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let url = pm.environment.get('URL');\r",
											"url += 'services/gigya/login';\r",
											"\r",
											"pm.sendRequest(\r",
											"    {\r",
											"        url: url,\r",
											"        method: 'POST',\r",
											"        header: {\r",
											"            \"Content-Type\": \"application/json\"\r",
											"        },\r",
											"        body: {\r",
											"            mode: 'form-data',\r",
											"            raw: JSON.stringify({\r",
											"                  \"email\": pm.environment.get('trialUser'),\r",
											"                  \"password\": pm.environment.get('password')\r",
											"            })\r",
											"        }\r",
											"    },\r",
											"    function (err, response) {\r",
											"        pm.environment.set('token', response.json().token);\r",
											"    },\r",
											"\r",
											"    function (err, response) {\r",
											"        pm.environment.set('refreshtoken', response.json().refreshToken);\r",
											"    }\r",
											");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{URL}}users/trials/{{trialVCE}}",
									"host": [
										"{{URL}}users"
									],
									"path": [
										"trials",
										"{{trialVCE}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Return flag if user has maxed out the activation of a trial product",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"pm.test(\"User has active subscription on trial\", function () {\r",
											"    pm.expect(jsonData.data.description).to.eql(\"The trial has reached its activation limit\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let url = pm.environment.get('URL');\r",
											"url += 'services/gigya/login';\r",
											"\r",
											"pm.sendRequest(\r",
											"    {\r",
											"        url: url,\r",
											"        method: 'POST',\r",
											"        header: {\r",
											"            \"Content-Type\": \"application/json\"\r",
											"        },\r",
											"        body: {\r",
											"            mode: 'form-data',\r",
											"            raw: JSON.stringify({\r",
											"                  \"email\": pm.environment.get('trialUser'),\r",
											"                  \"password\": pm.environment.get('password')\r",
											"            })\r",
											"        }\r",
											"    },\r",
											"    function (err, response) {\r",
											"        pm.environment.set('token', response.json().token);\r",
											"    },\r",
											"\r",
											"    function (err, response) {\r",
											"        pm.environment.set('refreshtoken', response.json().refreshToken);\r",
											"    }\r",
											");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{URL}}users/trials/{{trialBS}}",
									"host": [
										"{{URL}}users"
									],
									"path": [
										"trials",
										"{{trialBS}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "[M] Created Institution",
					"item": [
						{
							"name": "Return user institution via cache = 1",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let url = pm.environment.get('URL');\r",
											"url += 'services/gigya/login';\r",
											"\r",
											"pm.sendRequest(\r",
											"    {\r",
											"        url: url,\r",
											"        method: 'POST',\r",
											"        header: {\r",
											"            \"Content-Type\": \"application/json\"\r",
											"        },\r",
											"        body: {\r",
											"            mode: 'form-data',\r",
											"            raw: JSON.stringify({\r",
											"                  \"email\": pm.environment.get('teacherAdminUser'),\r",
											"                  \"password\": pm.environment.get('password')\r",
											"            })\r",
											"        }\r",
											"    },\r",
											"    function (err, response) {\r",
											"        pm.environment.set('token', response.json().token);\r",
											"    },\r",
											"\r",
											"    function (err, response) {\r",
											"        pm.environment.set('refreshtoken', response.json().refreshToken);\r",
											"    }\r",
											");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "cache",
											"value": "1",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{URL}}user/institutions",
									"host": [
										"{{URL}}user"
									],
									"path": [
										"institutions"
									]
								}
							},
							"response": []
						},
						{
							"name": "Return user institution via cache = 0",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let url = pm.environment.get('URL');\r",
											"url += 'services/gigya/login';\r",
											"\r",
											"pm.sendRequest(\r",
											"    {\r",
											"        url: url,\r",
											"        method: 'POST',\r",
											"        header: {\r",
											"            \"Content-Type\": \"application/json\"\r",
											"        },\r",
											"        body: {\r",
											"            mode: 'form-data',\r",
											"            raw: JSON.stringify({\r",
											"                  \"email\": pm.environment.get('teacherAdminUser'),\r",
											"                  \"password\": pm.environment.get('password')\r",
											"            })\r",
											"        }\r",
											"    },\r",
											"    function (err, response) {\r",
											"        pm.environment.set('token', response.json().token);\r",
											"    },\r",
											"\r",
											"    function (err, response) {\r",
											"        pm.environment.set('refreshtoken', response.json().refreshToken);\r",
											"    }\r",
											");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "cache",
											"value": "0",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{URL}}user/institutions",
									"host": [
										"{{URL}}user"
									],
									"path": [
										"institutions"
									]
								}
							},
							"response": []
						},
						{
							"name": "Return user institution via cache Invalid Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"pm.test(\"Success is false\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.success).to.eql(false);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{invalidtoken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{URL}}user/institutions?cache=1",
									"host": [
										"{{URL}}user"
									],
									"path": [
										"institutions"
									],
									"query": [
										{
											"key": "cache",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Return error using invalid cache value",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"pm.test(\"Success is false\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.success).to.eql(false);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{URL}}user/institutions?cache=2",
									"host": [
										"{{URL}}user"
									],
									"path": [
										"institutions"
									],
									"query": [
										{
											"key": "cache",
											"value": "2"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Return user institution via skip = 1",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let url = pm.environment.get('URL');\r",
											"url += 'services/gigya/login';\r",
											"\r",
											"pm.sendRequest(\r",
											"    {\r",
											"        url: url,\r",
											"        method: 'POST',\r",
											"        header: {\r",
											"            \"Content-Type\": \"application/json\"\r",
											"        },\r",
											"        body: {\r",
											"            mode: 'form-data',\r",
											"            raw: JSON.stringify({\r",
											"                  \"email\": pm.environment.get('teachSkip'),\r",
											"                  \"password\": pm.environment.get('password')\r",
											"            })\r",
											"        }\r",
											"    },\r",
											"    function (err, response) {\r",
											"        pm.environment.set('token', response.json().token);\r",
											"    },\r",
											"\r",
											"    function (err, response) {\r",
											"        pm.environment.set('refreshtoken', response.json().refreshToken);\r",
											"    }\r",
											");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"has skipped true\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.isSkipped).to.eql(true);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "{{URL}}user/institutions?skip=1",
									"host": [
										"{{URL}}user"
									],
									"path": [
										"institutions"
									],
									"query": [
										{
											"key": "skip",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Return user institution via skip = 0",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let url = pm.environment.get('URL');\r",
											"url += 'services/gigya/login';\r",
											"\r",
											"pm.sendRequest(\r",
											"    {\r",
											"        url: url,\r",
											"        method: 'POST',\r",
											"        header: {\r",
											"            \"Content-Type\": \"application/json\"\r",
											"        },\r",
											"        body: {\r",
											"            mode: 'form-data',\r",
											"            raw: JSON.stringify({\r",
											"                  \"email\": pm.environment.get('teachSkip'),\r",
											"                  \"password\": pm.environment.get('password')\r",
											"            })\r",
											"        }\r",
											"    },\r",
											"    function (err, response) {\r",
											"        pm.environment.set('token', response.json().token);\r",
											"    },\r",
											"\r",
											"    function (err, response) {\r",
											"        pm.environment.set('refreshtoken', response.json().refreshToken);\r",
											"    }\r",
											");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"has not skipped false\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.isSkipped).to.eql(false);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "{{URL}}user/institutions?skip=0",
									"host": [
										"{{URL}}user"
									],
									"path": [
										"institutions"
									],
									"query": [
										{
											"key": "skip",
											"value": "0"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Return error for users that has existing institution and is joining a new institution",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"pm.test(\"User already has existing institution\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.data.description).to.eql(\"Make sure no institution already exists.\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let url = pm.environment.get('URL');\r",
											"url += 'services/gigya/login';\r",
											"\r",
											"pm.sendRequest(\r",
											"    {\r",
											"        url: url,\r",
											"        method: 'POST',\r",
											"        header: {\r",
											"            \"Content-Type\": \"application/json\"\r",
											"        },\r",
											"        body: {\r",
											"            mode: 'form-data',\r",
											"            raw: JSON.stringify({\r",
											"                  \"email\": pm.environment.get('teacherAdminUser'),\r",
											"                  \"password\": pm.environment.get('password')\r",
											"            })\r",
											"        }\r",
											"    },\r",
											"    function (err, response) {\r",
											"        pm.environment.set('token', response.json().token);\r",
											"    },\r",
											"\r",
											"    function (err, response) {\r",
											"        pm.environment.set('refreshtoken', response.json().refreshToken);\r",
											"    }\r",
											");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "schoolCode",
											"value": "{{schoolCode}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{URL}}user/institution/",
									"host": [
										"{{URL}}user"
									],
									"path": [
										"institution",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Return error for invalid auth joining institution",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{invalidtoken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "schoolCode",
											"value": "{{schoolCode}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{URL}}user/institution/",
									"host": [
										"{{URL}}user"
									],
									"path": [
										"institution",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Return error for user using invalid join school code",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"pm.test(\"Institution not found\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"Institution not found.\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let url = pm.environment.get('URL');\r",
											"url += 'services/gigya/login';\r",
											"\r",
											"pm.sendRequest(\r",
											"    {\r",
											"        url: url,\r",
											"        method: 'POST',\r",
											"        header: {\r",
											"            \"Content-Type\": \"application/json\"\r",
											"        },\r",
											"        body: {\r",
											"            mode: 'form-data',\r",
											"            raw: JSON.stringify({\r",
											"                  \"email\": pm.environment.get('teachSkip'),\r",
											"                  \"password\": pm.environment.get('password')\r",
											"            })\r",
											"        }\r",
											"    },\r",
											"    function (err, response) {\r",
											"        pm.environment.set('token', response.json().token);\r",
											"    },\r",
											"\r",
											"    function (err, response) {\r",
											"        pm.environment.set('refreshtoken', response.json().refreshToken);\r",
											"    }\r",
											");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "schoolCode",
											"value": "{{invalidSchoolCode}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{URL}}user/institution/",
									"host": [
										"{{URL}}user"
									],
									"path": [
										"institution",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Return error for user joining unverified school",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"pm.test(\"Institution is unverified\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"Institution is unverified\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let url = pm.environment.get('URL');\r",
											"url += 'services/gigya/login';\r",
											"\r",
											"pm.sendRequest(\r",
											"    {\r",
											"        url: url,\r",
											"        method: 'POST',\r",
											"        header: {\r",
											"            \"Content-Type\": \"application/json\"\r",
											"        },\r",
											"        body: {\r",
											"            mode: 'form-data',\r",
											"            raw: JSON.stringify({\r",
											"                  \"email\": pm.environment.get('teachSkip'),\r",
											"                  \"password\": pm.environment.get('password')\r",
											"            })\r",
											"        }\r",
											"    },\r",
											"    function (err, response) {\r",
											"        pm.environment.set('token', response.json().token);\r",
											"    },\r",
											"\r",
											"    function (err, response) {\r",
											"        pm.environment.set('refreshtoken', response.json().refreshToken);\r",
											"    }\r",
											");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "schoolCode",
											"value": "{{unverifiedSchoolCode}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{URL}}user/institution/",
									"host": [
										"{{URL}}user"
									],
									"path": [
										"institution",
										""
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "year levels",
			"item": [
				{
					"name": "Get all year levels.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Verify return all year levels is able to get a response code 200\"] = responseCode.code === 200;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}yearlevels/",
							"host": [
								"{{URL}}yearlevels"
							],
							"path": [
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all year level via country_id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Verify return all year levels is able to get a response code 200\"] = responseCode.code === 200;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}yearlevels/?country_id[]=13",
							"host": [
								"{{URL}}yearlevels"
							],
							"path": [
								""
							],
							"query": [
								{
									"key": "country_id[]",
									"value": "13"
								}
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "[M] siteLicenses",
			"item": [
				{
					"name": "[TA] Loads all site license resources that attributed to the institution",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let url = pm.environment.get('URL');\r",
									"url += 'services/gigya/login';\r",
									"\r",
									"pm.sendRequest(\r",
									"    {\r",
									"        url: url,\r",
									"        method: 'POST',\r",
									"        header: {\r",
									"            \"Content-Type\": \"application/json\"\r",
									"        },\r",
									"        body: {\r",
									"            mode: 'form-data',\r",
									"            raw: JSON.stringify({\r",
									"                  \"email\": pm.environment.get('teacherSitelicence'),\r",
									"                  \"password\": pm.environment.get('password')\r",
									"            })\r",
									"        }\r",
									"    },\r",
									"    function (err, response) {\r",
									"        pm.environment.set('token', response.json().token);\r",
									"    }\r",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}siteLicenses/?page=1",
							"host": [
								"{{URL}}siteLicenses"
							],
							"path": [
								""
							],
							"query": [
								{
									"key": "page",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[S] Accessing the siteLicense endpoint",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});\r",
									"\r",
									"var data = JSON.parse(responseBody);\r",
									"tests[\"Verify that a Student accessing siteLicences endpoint will get a message = 'Unable to retrive data due to user role restrictions.'\"] = data.message === 'Unable to retrive data due to user role restrictions.';"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let url = pm.environment.get('URL');\r",
									"url += 'services/gigya/login';\r",
									"let caDate = pm.cDate;\r",
									"\r",
									"pm.sendRequest(\r",
									"    {\r",
									"        url: url,\r",
									"        method: 'POST',\r",
									"        header: {\r",
									"            \"Content-Type\": \"application/json\"\r",
									"        },\r",
									"        body: {\r",
									"            mode: 'form-data',\r",
									"            raw: JSON.stringify({\r",
									"                  \"email\": pm.environment.get('student'),\r",
									"                  \"password\": pm.environment.get('password')\r",
									"            })\r",
									"        }\r",
									"    },\r",
									"    function (err, response) {\r",
									"        pm.environment.set('token', response.json().token);\r",
									"    }\r",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}siteLicenses/?page=1",
							"host": [
								"{{URL}}siteLicenses"
							],
							"path": [
								""
							],
							"query": [
								{
									"key": "page",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[T] Activate Site License Access code",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Verify Teacher who activate a site license code is able to get a response code 403\"] = responseCode.code === 403;\r",
									"\r",
									"var data = JSON.parse(responseBody);\r",
									"tests[\"Verify Teacher who activate a site license code is able to get a code == 73270047\"] = data.data.code === 73270047;\r",
									"\r",
									"tests[\"Verify Teacher who activate a site license code is able to get a description = 'Make sure user role is teacher admin.'\"] = data.data.description === \"Make sure user role is teacher admin.\";"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let url = pm.environment.get('URL');\r",
									"url += 'services/gigya/login';\r",
									"\r",
									"pm.sendRequest(\r",
									"    {\r",
									"        url: url,\r",
									"        method: 'POST',\r",
									"        header: {\r",
									"            \"Content-Type\": \"application/json\"\r",
									"        },\r",
									"        body: {\r",
									"            mode: 'form-data',\r",
									"            raw: JSON.stringify({\r",
									"                  \"email\": pm.environment.get('teacher'),\r",
									"                  \"password\": pm.environment.get('password')\r",
									"            })\r",
									"        }\r",
									"    },\r",
									"    function (err, response) {\r",
									"        pm.environment.set('token', response.json().token);\r",
									"    }\r",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "proof",
									"value": "SITE-QX48-N86B-JWDZ",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{URL}}siteLicenses/",
							"host": [
								"{{URL}}siteLicenses"
							],
							"path": [
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "[S] Activate Site License Access code",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Verify Teacher who activate a site license code is able to get a response code 403\"] = responseCode.code === 403;\r",
									"\r",
									"var data = JSON.parse(responseBody);\r",
									"tests[\"Verify Teacher who activate a site license code is able to get a code == 73270047\"] = data.data.code === 73270047;\r",
									"\r",
									"tests[\"Verify Teacher who activate a site license code is able to get a description = 'Make sure user role is teacher admin.'\"] = data.data.description === \"Make sure user role is teacher admin.\";"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let url = pm.environment.get('URL');\r",
									"url += 'services/gigya/login';\r",
									"let caDate = pm.cDate;\r",
									"\r",
									"pm.sendRequest(\r",
									"    {\r",
									"        url: url,\r",
									"        method: 'POST',\r",
									"        header: {\r",
									"            \"Content-Type\": \"application/json\"\r",
									"        },\r",
									"        body: {\r",
									"            mode: 'form-data',\r",
									"            raw: JSON.stringify({\r",
									"                  \"email\": pm.environment.get('student'),\r",
									"                  \"password\": pm.environment.get('password')\r",
									"            })\r",
									"        }\r",
									"    },\r",
									"    function (err, response) {\r",
									"        pm.environment.set('token', response.json().token);\r",
									"    }\r",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "proof",
									"value": "SITE-QX48-N86B-JWDZ",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{URL}}siteLicenses/",
							"host": [
								"{{URL}}siteLicenses"
							],
							"path": [
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "[T] Activate Access code with teacher not attributed to an institution",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Verify teacher not attributed to an institution is able to get a response code 422\"] = responseCode.code === 422;\r",
									"\r",
									"var data = JSON.parse(responseBody);\r",
									"tests[\"Verify Teacher not attributed to an institution who activate a site license code is able to get a message = 'Unable to store site license.'\"] = data.message === 'Unable to store site license.';"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let url = pm.environment.get('URL');\r",
									"url += 'services/gigya/login';\r",
									"\r",
									"pm.sendRequest(\r",
									"    {\r",
									"        url: url,\r",
									"        method: 'POST',\r",
									"        header: {\r",
									"            \"Content-Type\": \"application/json\"\r",
									"        },\r",
									"        body: {\r",
									"            mode: 'form-data',\r",
									"            raw: JSON.stringify({\r",
									"                  \"email\": pm.environment.get('teacherwithoutInstitution'),\r",
									"                  \"password\": pm.environment.get('password')\r",
									"            })\r",
									"        }\r",
									"    },\r",
									"    function (err, response) {\r",
									"        pm.environment.set('token', response.json().token);\r",
									"    }\r",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "proof",
									"value": "NX24-YNKX-Z6RC-6M6R",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{URL}}siteLicenses/",
							"host": [
								"{{URL}}siteLicenses"
							],
							"path": [
								""
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "upload users",
			"item": [
				{
					"name": "[TA] Uploading user via user_uploads endpoint",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var data = JSON.parse(responseBody);\r",
									"tests[\"Verify that a teacher admin is able to get a message = 'Bulk User Upload success.'\"] = data.message === 'Bulk User Upload success.';\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"postman.setEnvironmentVariable(\"userUploadId\", jsonData.data.user_upload.id);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var moment = require('moment');\r",
									"\r",
									"if (pm.environment.get('currentdate') != moment().format((\"YYYYMMDD\"))){\r",
									"    pm.environment.set('counter', 0);\r",
									"    pm.environment.set('currentdate', moment().format((\"YYYYMMDD\")));\r",
									"}\r",
									"\r",
									"pm.environment.set('counter', (pm.environment.get('counter') + 1));\r",
									"let useremail = \"APIauto\" + pm.environment.get('currentdate') + pm.environment.get('env') + pm.environment.get('counter') + \"@pte-mailbox.cambridgedev.org\";\r",
									"let filename = \"APIauto\" + pm.environment.get('currentdate') + pm.environment.get('env') + pm.environment.get('counter') + \".xlsx\";\r",
									"\r",
									"var body = {\r",
									"  \"users\": [\r",
									"    {\r",
									"      \"first_name\": \"APIauto\",\r",
									"      \"last_name\": \"Student 1\",\r",
									"      \"role\": \"student\",\r",
									"      \"password\": \"qapass@123\",\r",
									"      \"email_address\": useremail\r",
									"    }\r",
									"  ],\r",
									"  \"filename\": filename\r",
									"};\r",
									"\r",
									"var body_str = JSON.stringify(body); //body was defined in the previous step\r",
									" pm.environment.set ('bodyUpload', body_str);\r",
									"\r",
									"let url = pm.environment.get('URL');\r",
									"url += 'services/gigya/login';\r",
									"\r",
									"pm.sendRequest(\r",
									"    {\r",
									"        url: url,\r",
									"        method: 'POST',\r",
									"        header: {\r",
									"            \"Content-Type\": \"application/json\"\r",
									"        },\r",
									"        body: {\r",
									"            mode: 'form-data',\r",
									"            raw: JSON.stringify({\r",
									"                  \"email\": pm.environment.get('teacherAdmin'),\r",
									"                  \"password\": pm.environment.get('password')\r",
									"            })\r",
									"        }\r",
									"    },\r",
									"    function (err, response) {\r",
									"        pm.environment.set('token', response.json().token);\r",
									"    }\r",
									");\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{bodyUpload}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}user_uploads",
							"host": [
								"{{URL}}user_uploads"
							]
						}
					},
					"response": []
				},
				{
					"name": "[T] Uploading user in user_uploads endpoint",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});\r",
									"\r",
									"var data = JSON.parse(responseBody);\r",
									"tests[\"Verify that a teacher client accessing user_upload endpoint will get a message = 'Forbidden'\"] = data.message === 'Forbidden';"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let url = pm.environment.get('URL');\r",
									"url += 'services/gigya/login';\r",
									"\r",
									"pm.sendRequest(\r",
									"    {\r",
									"        url: url,\r",
									"        method: 'POST',\r",
									"        header: {\r",
									"            \"Content-Type\": \"application/json\"\r",
									"        },\r",
									"        body: {\r",
									"            mode: 'form-data',\r",
									"            raw: JSON.stringify({\r",
									"                  \"email\": pm.environment.get('teacher'),\r",
									"                  \"password\": pm.environment.get('password')\r",
									"            })\r",
									"        }\r",
									"    },\r",
									"    function (err, response) {\r",
									"        pm.environment.set('token', response.json().token);\r",
									"    }\r",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"users\": [\r\n    {\r\n      \"first_name\": \"Bulk\",\r\n      \"last_name\": \"Student 1\",\r\n      \"role\": \"student\",\r\n      \"password\": \"qapass@123\",\r\n      \"email_address\": \"bulk1stud112621qa1@pte-mailbox.cambridgedev.org\"\r\n    },\r\n    {\r\n      \"first_name\": \"Bulk\",\r\n      \"last_name\": \"Student 2\",\r\n      \"role\": \"student\",\r\n      \"password\": \"qapass@123\",\r\n      \"email_address\": \"bulk1stud112621qa2@pte-mailbox.cambridgedev.org\"\r\n    },\r\n    {\r\n      \"first_name\": \"Bulk\",\r\n      \"last_name\": \"Student 3\",\r\n      \"role\": \"student\",\r\n      \"password\": \"qapass@123\",\r\n      \"email_address\": \"bulk1stud112621qa3@pte-mailbox.cambridgedev.org\"\r\n    },\r\n    {\r\n      \"first_name\": \"Bulk\",\r\n      \"last_name\": \"Teacher 4\",\r\n      \"role\": \"teacher\",\r\n      \"password\": \"qapass@123\",\r\n      \"email_address\": \"bulk1tch112621qa4@pte-mailbox.cambridgedev.org\"\r\n    },\r\n    {\r\n      \"first_name\": \"Bulk\",\r\n      \"last_name\": \"Student 5\",\r\n      \"role\": \"student\",\r\n      \"password\": \"qapass@123\",\r\n      \"email_address\": \"bulk1stud112621qa5@pte-mailbox.cambridgedev.org\"\r\n    }\r\n  ],\r\n  \"filename\": \"test.xslx\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}user_uploads",
							"host": [
								"{{URL}}user_uploads"
							]
						}
					},
					"response": []
				},
				{
					"name": "[S] Uploading user in user_uploads endpoint",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});\r",
									"\r",
									"var data = JSON.parse(responseBody);\r",
									"tests[\"Verify that a student client posting on user_upload endpoint will get a message = 'Forbidden'\"] = data.message === 'Forbidden';"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let url = pm.environment.get('URL');\r",
									"url += 'services/gigya/login';\r",
									"\r",
									"pm.sendRequest(\r",
									"    {\r",
									"        url: url,\r",
									"        method: 'POST',\r",
									"        header: {\r",
									"            \"Content-Type\": \"application/json\"\r",
									"        },\r",
									"        body: {\r",
									"            mode: 'form-data',\r",
									"            raw: JSON.stringify({\r",
									"                  \"email\": pm.environment.get('student'),\r",
									"                  \"password\": pm.environment.get('password')\r",
									"            })\r",
									"        }\r",
									"    },\r",
									"    function (err, response) {\r",
									"        pm.environment.set('token', response.json().token);\r",
									"    }\r",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"users\": [\r\n    {\r\n      \"first_name\": \"Bulk\",\r\n      \"last_name\": \"Student 1\",\r\n      \"role\": \"student\",\r\n      \"password\": \"qapass@123\",\r\n      \"email_address\": \"bulk1stud112621qa1@pte-mailbox.cambridgedev.org\"\r\n    },\r\n    {\r\n      \"first_name\": \"Bulk\",\r\n      \"last_name\": \"Student 2\",\r\n      \"role\": \"student\",\r\n      \"password\": \"qapass@123\",\r\n      \"email_address\": \"bulk1stud112621qa2@pte-mailbox.cambridgedev.org\"\r\n    },\r\n    {\r\n      \"first_name\": \"Bulk\",\r\n      \"last_name\": \"Student 3\",\r\n      \"role\": \"student\",\r\n      \"password\": \"qapass@123\",\r\n      \"email_address\": \"bulk1stud112621qa3@pte-mailbox.cambridgedev.org\"\r\n    },\r\n    {\r\n      \"first_name\": \"Bulk\",\r\n      \"last_name\": \"Teacher 4\",\r\n      \"role\": \"teacher\",\r\n      \"password\": \"qapass@123\",\r\n      \"email_address\": \"bulk1tch112621qa4@pte-mailbox.cambridgedev.org\"\r\n    },\r\n    {\r\n      \"first_name\": \"Bulk\",\r\n      \"last_name\": \"Student 5\",\r\n      \"role\": \"student\",\r\n      \"password\": \"qapass@123\",\r\n      \"email_address\": \"bulk1stud112621qa5@pte-mailbox.cambridgedev.org\"\r\n    }\r\n  ],\r\n  \"filename\": \"test.xslx\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}user_uploads",
							"host": [
								"{{URL}}user_uploads"
							]
						}
					},
					"response": []
				},
				{
					"name": "Status updates [IN_PROGRESS] using user_uploads endpoint",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var data = JSON.parse(responseBody);\r",
									"tests[\"Verify that a valid client request is able to get a message = 'User upload successfully updated.'\"] = data.message === 'User upload successfully updated.';\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var moment = require('moment');\r",
									"\r",
									"if (pm.environment.get('currentdate') != moment().format((\"YYYYMMDD\"))){\r",
									"    pm.environment.set('currentdate', moment().format((\"YYYYMMDD\")));\r",
									"}\r",
									"\r",
									"let eventid = \"APIauto\" + pm.environment.get('currentdate') + pm.environment.get('env') + pm.environment.get('counter');\r",
									"\r",
									"var body = {\r",
									"   \"status\" : \"IN_PROGRESS\",\r",
									"   \"event_id\" : eventid\r",
									"};\r",
									"\r",
									"var body_str = JSON.stringify(body); //body was defined in the previous step\r",
									" pm.environment.set ('bodyUpload', body_str);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token_userupload}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{bodyUpload}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}user_uploads/{{userUploadId}}",
							"host": [
								"{{URL}}user_uploads"
							],
							"path": [
								"{{userUploadId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Status updates [COMPLETED] using user_uploads endpoint",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var data = JSON.parse(responseBody);\r",
									"tests[\"Verify that a valid client request is able to get a message = 'User upload successfully updated.'\"] = data.message === 'User upload successfully updated.';"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token_userupload}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"status\" : \"COMPLETED\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}user_uploads/{{userUploadId}}",
							"host": [
								"{{URL}}user_uploads"
							],
							"path": [
								"{{userUploadId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Status updates using user_uploads with invalid authorization",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"var data = JSON.parse(responseBody);\r",
									"tests[\"Verify that a client with invalid auth token will get a message = 'InvalidApiToken'\"] = data.message === 'InvalidApiToken';"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{invalidtoken_userupload}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"status\" : \"IN_PROGRESS\",\r\n   \"event_id\" : \"event12022101\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}user_uploads/6",
							"host": [
								"{{URL}}user_uploads"
							],
							"path": [
								"6"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "user reports",
			"item": [
				{
					"name": "[TA] getting list of onboarding file uploaded within the institution",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"postman.setEnvironmentVariable(\"userUploadId\", jsonData.data[0].id);\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let url = pm.environment.get('URL');\r",
									"url += 'services/gigya/login';\r",
									"\r",
									"pm.sendRequest(\r",
									"    {\r",
									"        url: url,\r",
									"        method: 'POST',\r",
									"        header: {\r",
									"            \"Content-Type\": \"application/json\"\r",
									"        },\r",
									"        body: {\r",
									"            mode: 'form-data',\r",
									"            raw: JSON.stringify({\r",
									"                  \"email\": pm.environment.get('teacherAdmin'),\r",
									"                  \"password\": pm.environment.get('password')\r",
									"            })\r",
									"        }\r",
									"    },\r",
									"    function (err, response) {\r",
									"        pm.environment.set('token', response.json().token);\r",
									"    }\r",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "{{URL}}user_uploads/",
							"host": [
								"{{URL}}user_uploads"
							],
							"path": [
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "[T] getting list of onboarding file uploaded within the institution",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});\r",
									"\r",
									"var data = JSON.parse(responseBody);\r",
									"tests[\"Verify that a teacher client accessing user_upload endpoint will get a message = 'Forbidden'\"] = data.message === 'Forbidden';"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let url = pm.environment.get('URL');\r",
									"url += 'services/gigya/login';\r",
									"\r",
									"pm.sendRequest(\r",
									"    {\r",
									"        url: url,\r",
									"        method: 'POST',\r",
									"        header: {\r",
									"            \"Content-Type\": \"application/json\"\r",
									"        },\r",
									"        body: {\r",
									"            mode: 'form-data',\r",
									"            raw: JSON.stringify({\r",
									"                  \"email\": pm.environment.get('teacher'),\r",
									"                  \"password\": pm.environment.get('password')\r",
									"            })\r",
									"        }\r",
									"    },\r",
									"    function (err, response) {\r",
									"        pm.environment.set('token', response.json().token);\r",
									"    }\r",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "{{URL}}user_uploads/",
							"host": [
								"{{URL}}user_uploads"
							],
							"path": [
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "[T] Getting specific user file upload within the institution",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});\r",
									"\r",
									"var data = JSON.parse(responseBody);\r",
									"tests[\"Verify that a teacher client accessing user_upload endpoint will get a message = 'Forbidden'\"] = data.message === 'Forbidden';"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "{{URL}}user_uploads/{{userUploadId}}",
							"host": [
								"{{URL}}user_uploads"
							],
							"path": [
								"{{userUploadId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[S] getting list of onboarding file uploaded within the institution",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});\r",
									"\r",
									"var data = JSON.parse(responseBody);\r",
									"tests[\"Verify that a student client accessing user_upload endpoint will get a message = 'Forbidden'\"] = data.message === 'Forbidden';"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let url = pm.environment.get('URL');\r",
									"url += 'services/gigya/login';\r",
									"let caDate = pm.cDate;\r",
									"\r",
									"pm.sendRequest(\r",
									"    {\r",
									"        url: url,\r",
									"        method: 'POST',\r",
									"        header: {\r",
									"            \"Content-Type\": \"application/json\"\r",
									"        },\r",
									"        body: {\r",
									"            mode: 'form-data',\r",
									"            raw: JSON.stringify({\r",
									"                  \"email\": pm.environment.get('student'),\r",
									"                  \"password\": pm.environment.get('password')\r",
									"            })\r",
									"        }\r",
									"    },\r",
									"    function (err, response) {\r",
									"        pm.environment.set('token', response.json().token);\r",
									"    }\r",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "{{URL}}user_uploads/",
							"host": [
								"{{URL}}user_uploads"
							],
							"path": [
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "[S] Getting specific user file upload within the institution",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});\r",
									"\r",
									"var data = JSON.parse(responseBody);\r",
									"tests[\"Verify that a student client accessing user_upload endpoint will get a message = 'Forbidden'\"] = data.message === 'Forbidden';"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "{{URL}}user_uploads/{{userUploadId}}",
							"host": [
								"{{URL}}user_uploads"
							],
							"path": [
								"{{userUploadId}}"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"",
					"",
					"",
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}