{
	"info": {
		"_postman_id": "6218eff5-3b34-4aa5-ae8b-0866904ac6f2",
		"name": "PEAS Collection V2 (QA, Staging, Live)",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Authorization",
			"item": [
				{
					"name": "Creating auth token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Verify that a client of web service with valid origin url when generating a authtoken is able to get a response code 200\"] = responseCode.code === 200;\r",
									"\r",
									"var data = JSON.parse(responseBody);\r",
									"tests[\"Verify that a client of web service with valid origin url when generating a authtoken is able to get a response message Token successfully created.\"] = data.message === \"Token successfully created.\";\r",
									"\r",
									"tests[\"Verify Success message is true\"] = data.success === true;\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"postman.setEnvironmentVariable(\"refreshtoken\", jsonData.data.refreshToken);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"origin_url\" : \"{{origin_url}}\",\r\n\t\"secret_key\" : \"{{secret_key}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/token",
							"host": [
								"{{URL}}"
							],
							"path": [
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "Unauthorized with invalid secret key creation of auth token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Verify that a client of web service with valid origin url when generating a authtoken is able to get a response code 401\"] = responseCode.code === 401;\r",
									"\r",
									"var data = JSON.parse(responseBody);\r",
									"tests[\"Verify that a client of web service with invalid secret key when generating a authtoken is able to get a response message Unable to generate token.\"] = data.message === \"Unable to generate token.\";\r",
									"\r",
									"tests[\"Verify Success message is false\"] = data.success === false;\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"origin_url\" : \"{{origin_url}}\",\r\n\t\"secret_key\" : \"Unauthorized\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/token",
							"host": [
								"{{URL}}"
							],
							"path": [
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "Unauthorized with invalid  origin url creation of auth token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Verify that a client of web service with valid origin url when generating a authtoken is able to get a response code 401\"] = responseCode.code === 401;\r",
									"\r",
									"var data = JSON.parse(responseBody);\r",
									"tests[\"Verify that a client of web service with invalid origin url when generating a authtoken is able to get a response message Unable to generate token.\"] = data.message === \"Unable to generate token.\";\r",
									"\r",
									"tests[\"Verify Success message is false\"] = data.success === false;\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"origin_url\" : \"cambridge.edu.au/go\",\r\n\t\"secret_key\" : \"83wue1eYyGX7Bs6pG8\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/token",
							"host": [
								"{{URL}}"
							],
							"path": [
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "Generates new JWT using Refresh Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Verify that a client of web service with valid refresh token when refreshing authorization is able to get a response code 200\"] = responseCode.code === 200;\r",
									"\r",
									"var data = JSON.parse(responseBody);\r",
									"tests[\"Verify that a client of web service with valid refresh token when refreshing authorization is able to get a message 'Token successfully refreshed.'.\"] = data.message === \"Token successfully refreshed.\";\r",
									"\r",
									"tests[\"Verify Success message is true\"] = data.success === true;\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"refresh_token\" : \"{{refreshtoken}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/token/refresh",
							"host": [
								"{{URL}}"
							],
							"path": [
								"token",
								"refresh"
							]
						}
					},
					"response": []
				},
				{
					"name": "Generates new JWT using Refresh Token with invalid refresh token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Verify that a client of web service with invalid refresh token when refreshing authorization is able to get a response code 401\"] = responseCode.code === 401;\r",
									"\r",
									"var data = JSON.parse(responseBody);\r",
									"tests[\"Verify that a client of web service with invalid refresh token when refreshing authorization is able to get a message 'Unable to refresh token.'.\"] = data.message === \"Unable to refresh token.\";\r",
									"\r",
									"tests[\"Verify Success message is false\"] = data.success === false;\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"refresh_token\" : \"{{invalidtoken}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/token/refresh",
							"host": [
								"{{URL}}"
							],
							"path": [
								"token",
								"refresh"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Products",
			"item": [
				{
					"name": "Products - parameters request",
					"item": [
						{
							"name": "Get All products via metafields and keyword",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Verify that a client of web service with valid auth token when getting list of product iva metafield and keyword is able to get a response code 200\"] = responseCode.code === 200;\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{URL}}/products?metaFields=CMS_Name&keyword=GCAP",
									"host": [
										"{{URL}}"
									],
									"path": [
										"products"
									],
									"query": [
										{
											"key": "metaFields",
											"value": "CMS_Name"
										},
										{
											"key": "keyword",
											"value": "GCAP"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get All products via orderField and orderDirection",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Verify that a client of web service with valid auth token when getting list of product via orderField and orderDirection is able to get a response code 200\"] = responseCode.code === 200;\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{URL}}/products?orderField=StaffID&orderDirection=DESC",
									"host": [
										"{{URL}}"
									],
									"path": [
										"products"
									],
									"query": [
										{
											"key": "orderField",
											"value": "StaffID"
										},
										{
											"key": "orderDirection",
											"value": "DESC"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Get All products",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Verify that a client of web service with valid auth token when getting list of product is able to get a response code 200\"] = responseCode.code === 200;\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}/products/",
							"host": [
								"{{URL}}"
							],
							"path": [
								"products",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Unauthorized of getting All products",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Verify that a client of web service with invalid auth token when getting list of product is able to get a response code 401\"] = responseCode.code === 401;\r",
									"\r",
									"var data = JSON.parse(responseBody);\r",
									"tests[\"Verify that a client of web service with invalid auth token when getting list of product message is equal to 'InvalidJwtToken'\"] = data.message === 'InvalidJwtToken';"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{invalidtoken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}/products/",
							"host": [
								"{{URL}}"
							],
							"path": [
								"products",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Get specific product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Verify that a client of web service with valid auth token when getting list of product is able to get a response code 200\"] = responseCode.code === 200;\r",
									"\r",
									"var data = JSON.parse(responseBody);\r",
									"tests[\"Verify that a client of web service with valid auth token when getting specific product 'id' is equal to '1000'\"] = data.id === 1000;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}/products/1000",
							"host": [
								"{{URL}}"
							],
							"path": [
								"products",
								"1000"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get specific product unauthorized token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Verify that a client of web service with invalid auth token when getting list of product is able to get a response code 401\"] = responseCode.code === 401;\r",
									"\r",
									"var data = JSON.parse(responseBody);\r",
									"tests[\"Verify that a client of web service with invalid auth token when getting specific product success message is 'false\"] = data.success === false;\r",
									"\r",
									"tests[\"Verify that a client of web service with invalid auth token when getting specific product message is 'InvalidJwtToken'\"] = data.message === 'InvalidJwtToken';"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{invalidtoken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}/products/5000",
							"host": [
								"{{URL}}"
							],
							"path": [
								"products",
								"5000"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get specific product not found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Verify that a client of web service with valid auth token when getting specific product not found is able to get a response code 404\"] = responseCode.code === 404;\r",
									"\r",
									"var data = JSON.parse(responseBody);\r",
									"tests[\"Verify that a client of web service with valid auth token when getting specific product message is 'Product not found.'\"] = data.message === 'Product not found.';"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}/products/5000",
							"host": [
								"{{URL}}"
							],
							"path": [
								"products",
								"5000"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create products",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Verify that a client of web service with valid auth token when creating a product is able to get a response code 201\"] = responseCode.code === 201;\r",
									"\r",
									"var data = JSON.parse(responseBody);\r",
									"tests[\"Verify that a client of web service with valid auth token when creating a product success is equal to true\"] = data.success === true;\r",
									"\r",
									"tests[\"Verify that a client of web service with valid auth token when creating a product message is 'Product successfully added.'\"] = data.message === 'Product successfully added.';\r",
									"\r",
									"pm.environment.set(\"product_id\", data.data.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"metadata\" : \"{\\\"Name\\\": \\\"Teacher Resource package\\\", \\\"Tabs\\\" : [], \\\"ISBN_13\\\": null, \\\"StaffID\\\": 500118, \\\"CMS_Name\\\": \\\"Dynamic Variable\\\", \\\"CMS_Notes\\\": \\\"This is a CMS NOTES\\\", \\\"Description\\\": null, \\\"Total_Codes\\\": null, \\\"CreationDate\\\": \\\"2020-09-05 13:00:00.000000\\\", \\\"edumar_titleID\\\": null, \\\"CMS_Setup_Notes\\\": null, \\\"CMS_Setup_Complete\\\": \\\"Y\\\", \\\"Total_Subscription\\\": null, \\\"Activate_Page_Message\\\": null}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/products/",
							"host": [
								"{{URL}}"
							],
							"path": [
								"products",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Create products with invalid authorization",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Verify that a client of web service with invalid auth token when getting list of product is able to get a response code 401\"] = responseCode.code === 401;\r",
									"\r",
									"var data = JSON.parse(responseBody);\r",
									"tests[\"Verify that a client of web service with invalid auth token when creating a product success is equal to false\"] = data.success === false;\r",
									"\r",
									"tests[\"Verify that a client of web service with invalid auth token when creating a product message is 'InvalidJwtToken'\"] = data.message === 'InvalidJwtToken';"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{invalidtoken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"metadata\" : \"{\\\"Name\\\": \\\"Teacher Resource package\\\", \\\"Tabs\\\" : [], \\\"ISBN_13\\\": null, \\\"StaffID\\\": 500118, \\\"CMS_Name\\\": \\\"Dynamic Variable\\\", \\\"CMS_Notes\\\": \\\"This is a CMS NOTES\\\", \\\"Description\\\": null, \\\"Total_Codes\\\": null, \\\"CreationDate\\\": \\\"2020-09-05 13:00:00.000000\\\", \\\"edumar_titleID\\\": null, \\\"CMS_Setup_Notes\\\": null, \\\"CMS_Setup_Complete\\\": \\\"Y\\\", \\\"Total_Subscription\\\": null, \\\"Activate_Page_Message\\\": null}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/products/",
							"host": [
								"{{URL}}"
							],
							"path": [
								"products",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Create products Unprocessable entity",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Verify that a client of web service with unprocessable entity when creating a product is able to get a response code 422\"] = responseCode.code === 422;\r",
									"\r",
									"var data = JSON.parse(responseBody);\r",
									"tests[\"Verify that a client of web service with unprocessable entity when creating a product success is equal to false\"] = data.success === false;\r",
									"\r",
									"tests[\"Verify that a client of web service with unprocessable entity when creating a product message is 'Unable to store product.'\"] = data.message === 'Unable to store product.';"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"metadata\" : \"{\\\"ISN_13\\\": asfasfa, \\\"StaffID\\\": 500118, \\\"CMS_Name\\\": \\\"Dynamic Variable\\\", \\\"CMS_Notes\\\": \\\"This is a CMS NOTES\\\", \\\"Description\\\": null, \\\"Total_Codes\\\": null, \\\"CreationDate\\\": \\\"2020-09-05 13:00:00.000000\\\", \\\"edumar_titleID\\\": null, \\\"CMS_Setup_Notes\\\": null, \\\"CMS_Setup_Complete\\\": \\\"Y\\\", \\\"Total_Subscription\\\": null, \\\"Activate_Page_Message\\\": null}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/products/",
							"host": [
								"{{URL}}"
							],
							"path": [
								"products",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Specific product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Verify that a client of web service with valid auth token when updating a product is able to get a response code 200\"] = responseCode.code === 200;\r",
									"\r",
									"var data = JSON.parse(responseBody);\r",
									"tests[\"Verify that a client of web service with valid auth token when updating a product success is equal to true\"] = data.success === true;\r",
									"\r",
									"tests[\"Verify that a client of web service with valid auth token when updating a product message is 'Product successfully updated.'\"] = data.message === 'Product successfully updated.';"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"metadata\" : \"{\\\"Name\\\": \\\"Teacher Resource package\\\", \\\"Tabs\\\" : [], \\\"ISN_13\\\": null, \\\"StaffID\\\": 500118, \\\"CMS_Name\\\": \\\"Create product API Update\\\", \\\"CMS_Notes\\\": \\\"This is a CMS NOTES\\\", \\\"Description\\\": null, \\\"Total_Codes\\\": null, \\\"CreationDate\\\": \\\"2020-09-05 13:00:00.000000\\\", \\\"edumar_titleID\\\": null, \\\"CMS_Setup_Notes\\\": null, \\\"CMS_Setup_Complete\\\": \\\"Y\\\", \\\"Total_Subscription\\\": null, \\\"Activate_Page_Message\\\": null}\",\r\n    \"archived_at\" : null\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/products/{{product_id}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"products",
								"{{product_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Unauthorized update of specific product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Verify that a client of web service with invalid auth token when updating a product is able to get a response code 401\"] = responseCode.code === 401;\r",
									"\r",
									"var data = JSON.parse(responseBody);\r",
									"tests[\"Verify that a client of web service with invalid auth token when updating a product success is equal to false\"] = data.success === false;\r",
									"\r",
									"tests[\"Verify that a client of web service with invalid auth token when updating a product message is 'InvalidJwtToken'\"] = data.message === 'InvalidJwtToken';"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{invalidtoken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"metadata\" : \"{\\\"Name\\\": \\\"Teacher Resource package\\\", \\\"Tabs\\\" : [], \\\"ISN_13\\\": null, \\\"StaffID\\\": 500118, \\\"CMS_Name\\\": \\\"Create product API Update\\\", \\\"CMS_Notes\\\": \\\"This is a CMS NOTES\\\", \\\"Description\\\": null, \\\"Total_Codes\\\": null, \\\"CreationDate\\\": \\\"2020-09-05 13:00:00.000000\\\", \\\"edumar_titleID\\\": null, \\\"CMS_Setup_Notes\\\": null, \\\"CMS_Setup_Complete\\\": \\\"Y\\\", \\\"Total_Subscription\\\": null, \\\"Activate_Page_Message\\\": null}\",\r\n    \"archived_at\" : null\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/products/{{product_id}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"products",
								"{{product_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Specific product not found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Verify that a client of web service with valid auth token when updating a product not found is able to get a response code 404\"] = responseCode.code === 404;\r",
									"\r",
									"var data = JSON.parse(responseBody);\r",
									"tests[\"Verify that a client of web service with valid auth token when updating a product not found success is equal to false\"] = data.success === false;\r",
									"\r",
									"tests[\"Verify that a client of web service with valid auth token when updating a product not found message is 'Product not found.'\"] = data.message === 'Product not found.';"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"metadata\" : \"{\\\"Name\\\": \\\"Teacher Resource package\\\", \\\"Tabs\\\" : [], \\\"ISN_13\\\": null, \\\"StaffID\\\": 500118, \\\"CMS_Name\\\": \\\"Create product API Update\\\", \\\"CMS_Notes\\\": \\\"This is a CMS NOTES\\\", \\\"Description\\\": null, \\\"Total_Codes\\\": null, \\\"CreationDate\\\": \\\"2020-09-05 13:00:00.000000\\\", \\\"edumar_titleID\\\": null, \\\"CMS_Setup_Notes\\\": null, \\\"CMS_Setup_Complete\\\": \\\"Y\\\", \\\"Total_Subscription\\\": null, \\\"Activate_Page_Message\\\": null}\",\r\n    \"archived_at\" : null\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/products/100000",
							"host": [
								"{{URL}}"
							],
							"path": [
								"products",
								"100000"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Specific product with unprocessable entity",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Verify that a client of web service with unprocessable entity when updating a product is able to get a response code 422\"] = responseCode.code === 422;\r",
									"\r",
									"var data = JSON.parse(responseBody);\r",
									"tests[\"Verify that a client of web service with unprocessable entity when updating a product is equal to false\"] = data.success === false;\r",
									"\r",
									"tests[\"Verify that a client of web service with unprocessable entity when updating a product is 'Unable to update product.'\"] = data.message === 'Unable to update product.';"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"metadata\" : \"{\\\"Name\\\": \\\"Teacher Resource package\\\", \\\"Tabs\\\" : [], \\\"ISN_13\\\": @12314124, \\\"StaffID\\\": 500118, \\\"CMS_Name\\\": \\\"Create product API Update\\\", \\\"CMS_Notes\\\": \\\"This is a CMS NOTES\\\", \\\"Description\\\": null, \\\"Total_Codes\\\": null, \\\"CreationDate\\\": \\\"2020-09-05 13:00:00.000000\\\", \\\"edumar_titleID\\\": null, \\\"CMS_Setup_Notes\\\": null, \\\"CMS_Setup_Complete\\\": \\\"Y\\\", \\\"Total_Subscription\\\": null, \\\"Activate_Page_Message\\\": null}\",\r\n    \"archived_at\" : null\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/products/{{product_id}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"products",
								"{{product_id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Entitlement",
			"item": [
				{
					"name": "Entitlement - parameter request",
					"item": [
						{
							"name": "Get All Entitlements via filter product id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Verify that a client of web service with valid auth token when getting list of entitlements via filter of product_id is able to get a response code 200\"] = responseCode.code === 200;"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{URL}}/entitlements?product_id=624",
									"host": [
										"{{URL}}"
									],
									"path": [
										"entitlements"
									],
									"query": [
										{
											"key": "product_id",
											"value": "624"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Get All Entitlements",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Verify that a client of web service with valid auth token when getting list of entitlements is able to get a response code 200\"] = responseCode.code === 200;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}/entitlements/",
							"host": [
								"{{URL}}"
							],
							"path": [
								"entitlements",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Unauthorized getting All of Entitlements",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Verify that a client of web service with invalid auth token when getting list of entitlements is able to get a response code 401\"] = responseCode.code === 401;\r",
									"\r",
									"var data = JSON.parse(responseBody);\r",
									"tests[\"Verify that a client of web service with invalid auth token when getting list of entitlement success is equal to false\"] = data.success === false;\r",
									"\r",
									"tests[\"Verify that a client of web service with invalid auth token when getting list of entitlement message is 'InvalidJwtToken\"] = data.message === 'InvalidJwtToken';"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{invalidtoken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}/entitlements/",
							"host": [
								"{{URL}}"
							],
							"path": [
								"entitlements",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Create new entitlement",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Verify that a client of web service with valid auth token when creating new entitlements is able to get a response code 201\"] = responseCode.code === 201;\r",
									"\r",
									"var data = JSON.parse(responseBody);\r",
									"tests[\"Verify that a client of web service with valid auth token when creating new entitlements success is equal to true\"] = data.success === true;\r",
									"\r",
									"tests[\"Verify that a client of web service with valid auth token when creating new entitlements message is 'Entitlement successfully added.\"] = data.message === 'Entitlement successfully added.';\r",
									"\r",
									"pm.environment.set(\"entitlement_id\", data.data.entitlement.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"product_id\" : {{product_id}},\r\n\"entitlement_type_id\" : 1,\r\n\"metadata\" : \"{\\\"Demo\\\": \\\"N\\\", \\\"HmID\\\": null, \\\"Type\\\": \\\"duration\\\", \\\"Price\\\": null, \\\"Active\\\": \\\"Y\\\", \\\"QACheck\\\": \\\"N\\\", \\\"StaffID\\\": 500118, \\\"Duration\\\": \\\"500\\\", \\\"UsageMax\\\": \\\"3\\\", \\\"CMS_Notes\\\": \\\"\\\", \\\"Visibility\\\": \\\"Private\\\", \\\"Description\\\": \\\"Activate_Page_Message=NULL Days\\\", \\\"Total_Codes\\\": 8328, \\\"CreationDate\\\": \\\"2020-09-05 16:14:54.000000\\\", \\\"PublicMessage\\\": null, \\\"Public_Message\\\": \\\"\\\", \\\"LimitActivation\\\": \\\"Y\\\", \\\"Total_Subscriptions\\\": 1005}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/entitlements/",
							"host": [
								"{{URL}}"
							],
							"path": [
								"entitlements",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Create new entitlement with invalid token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Verify that a client of web service with invalid auth token when creating new entitlements is able to get a response code 401\"] = responseCode.code === 401;\r",
									"\r",
									"var data = JSON.parse(responseBody);\r",
									"tests[\"Verify that a client of web service with invalid auth token when creating new entitlements success is equal to false\"] = data.success === false;\r",
									"\r",
									"tests[\"Verify that a client of web service with invalid auth token when creating new entitlements message is 'InvalidJwtToken\"] = data.message === 'InvalidJwtToken';"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{invalidtoken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"product_id\" : {{product_id}},\r\n\"entitlement_type_id\" : 1,\r\n\"metadata\" : \"{\\\"Demo\\\": \\\"N\\\", \\\"HmID\\\": null, \\\"Type\\\": \\\"duration\\\", \\\"Price\\\": null, \\\"Active\\\": \\\"Y\\\", \\\"QACheck\\\": \\\"N\\\", \\\"StaffID\\\": 500118, \\\"Duration\\\": \\\"500\\\", \\\"UsageMax\\\": \\\"3\\\", \\\"CMS_Notes\\\": \\\"\\\", \\\"Visibility\\\": \\\"Private\\\", \\\"Description\\\": \\\"Activate_Page_Message=NULL Days\\\", \\\"Total_Codes\\\": 8328, \\\"CreationDate\\\": \\\"2020-09-05 16:14:54.000000\\\", \\\"PublicMessage\\\": null, \\\"Public_Message\\\": \\\"\\\", \\\"LimitActivation\\\": \\\"Y\\\", \\\"Total_Subscriptions\\\": 1005}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/entitlements/",
							"host": [
								"{{URL}}"
							],
							"path": [
								"entitlements",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Create new entitlement with unprocessable entity",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Verify that a client of web service with valid auth token when creating new entitlements with unprocessable entity is able to get a response code 422\"] = responseCode.code === 422\r",
									"\r",
									"var data = JSON.parse(responseBody);\r",
									"tests[\"Verify that a client of web service with valid auth token when creating new entitlements with unprocessable entity success is equal to false\"] = data.success === false;\r",
									"\r",
									"tests[\"Verify that a client of web service with valid auth token when creating new entitlements with unprocessable entity message is 'Unable to store entitlement.\"] = data.message === 'Unable to store entitlement.';"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"product_id\" : {{product_id}},\r\n\"entitlement_type_id\" : 1,\r\n\"metadata\" : \"{\\\"Demo\\\": \\\"N\\\", \\\"HmID\\\": @123141wsf, \\\"Type\\\": \\\"duration\\\", \\\"Price\\\": null, \\\"Active\\\": \\\"Y\\\", \\\"QACheck\\\": \\\"N\\\", \\\"StaffID\\\": 500118, \\\"Duration\\\": \\\"500\\\", \\\"UsageMax\\\": \\\"3\\\", \\\"CMS_Notes\\\": \\\"\\\", \\\"Visibility\\\": \\\"Private\\\", \\\"Description\\\": \\\"Activate_Page_Message=NULL Days\\\", \\\"Total_Codes\\\": 8328, \\\"CreationDate\\\": \\\"2020-09-05 16:14:54.000000\\\", \\\"PublicMessage\\\": null, \\\"Public_Message\\\": \\\"\\\", \\\"LimitActivation\\\": \\\"Y\\\", \\\"Total_Subscriptions\\\": 1005}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/entitlements/",
							"host": [
								"{{URL}}"
							],
							"path": [
								"entitlements",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Getting specific Entitlement",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Verify that a client of web service with valid auth token when getting specific entitlement is able to get a response code 200\"] = responseCode.code === 200;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}/entitlements/4787",
							"host": [
								"{{URL}}"
							],
							"path": [
								"entitlements",
								"4787"
							]
						}
					},
					"response": []
				},
				{
					"name": "Getting specific Entitlement with invalid auth token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Verify that a client of web service with invalid auth token when getting specific entitlement is able to get a response code 401\"] = responseCode.code === 401;\r",
									"\r",
									"var data = JSON.parse(responseBody);\r",
									"tests[\"Verify that a client of web service with invalid auth token when getting specific entitlement success is equal to false\"] = data.success === false;\r",
									"\r",
									"tests[\"Verify that a client of web service with invalid auth token when getting specific entitlement message is 'InvalidJwtToken\"] = data.message === 'InvalidJwtToken';"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{invalidtoken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}/entitlements/{{entitlement_id}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"entitlements",
								"{{entitlement_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Getting specific Entitlement not found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Verify that a client of web service with valid auth token, when getting specific entitlement not found is able to get a response code 404\"] = responseCode.code === 404;\r",
									"\r",
									"var data = JSON.parse(responseBody);\r",
									"tests[\"Verify that a client of web service with valid auth token, when getting specific entitlement not found success is equal to false\"] = data.success === false;\r",
									"\r",
									"tests[\"Verify that a client of web service with valid auth token, when getting specific entitlement not found is 'Entitlement not found.\"] = data.message === 'Entitlement not found.';"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}/entitlements/a",
							"host": [
								"{{URL}}"
							],
							"path": [
								"entitlements",
								"a"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update specific entitlement",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Verify that a client of web service with valid auth token when updating entitlements is able to get a response code 200\"] = responseCode.code === 200;\r",
									"\r",
									"var data = JSON.parse(responseBody);\r",
									"tests[\"Verify that a client of web service with valid auth token when updating new entitlements success is equal to true\"] = data.success === true;\r",
									"\r",
									"tests[\"Verify that a client of web service with valid auth token when updating new entitlements message is 'Entitlement successfully updated.\"] = data.message === 'Entitlement successfully updated.';"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"product_id\" : {{product_id}},\r\n\"entitlement_type_id\" : 1,\r\n\"metadata\" : \"{\\\"Demo\\\": \\\"N\\\", \\\"HmID\\\": null, \\\"Type\\\": \\\"duration\\\", \\\"Price\\\": null, \\\"Active\\\": \\\"Y\\\", \\\"QACheck\\\": \\\"N\\\", \\\"StaffID\\\": 500118, \\\"Duration\\\": \\\"500\\\", \\\"UsageMax\\\": \\\"3\\\", \\\"CMS_Notes\\\": \\\"\\\", \\\"Visibility\\\": \\\"Private\\\", \\\"Description\\\": \\\"Activate_Page_Message=NULL Days\\\", \\\"Total_Codes\\\": 8328, \\\"CreationDate\\\": \\\"2020-09-05 16:14:54.000000\\\", \\\"PublicMessage\\\": null, \\\"Public_Message\\\": \\\"Updated\\\", \\\"LimitActivation\\\": \\\"Y\\\", \\\"Total_Subscriptions\\\": 1005}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/entitlements/{{entitlement_id}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"entitlements",
								"{{entitlement_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update specific entitlement with unauthorized token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Verify that a client of web service with invalid auth token when updating entitlements is able to get a response code 401\"] = responseCode.code === 401;\r",
									"\r",
									"var data = JSON.parse(responseBody);\r",
									"tests[\"Verify that a client of web service with invalid auth token when updating new entitlements success is equal to false\"] = data.success === false;\r",
									"\r",
									"tests[\"Verify that a client of web service with invalid auth token when updating new entitlements message is 'InvalidJwtToken\"] = data.message === 'InvalidJwtToken';"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{invalidtoken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"product_id\" : {{product_id}},\r\n\"entitlement_type_id\" : 1,\r\n\"metadata\" : \"{\\\"Demo\\\": \\\"N\\\", \\\"HmID\\\": null, \\\"Type\\\": \\\"duration\\\", \\\"Price\\\": null, \\\"Active\\\": \\\"Y\\\", \\\"QACheck\\\": \\\"N\\\", \\\"StaffID\\\": 500118, \\\"Duration\\\": \\\"500\\\", \\\"UsageMax\\\": \\\"3\\\", \\\"CMS_Notes\\\": \\\"\\\", \\\"Visibility\\\": \\\"Private\\\", \\\"Description\\\": \\\"Activate_Page_Message=NULL Days\\\", \\\"Total_Codes\\\": 8328, \\\"CreationDate\\\": \\\"2020-09-05 16:14:54.000000\\\", \\\"PublicMessage\\\": null, \\\"Public_Message\\\": \\\"Updated\\\", \\\"LimitActivation\\\": \\\"Y\\\", \\\"Total_Subscriptions\\\": 1005}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/entitlements/4036",
							"host": [
								"{{URL}}"
							],
							"path": [
								"entitlements",
								"4036"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Batches",
			"item": [
				{
					"name": "Batches - request parameters",
					"item": [
						{
							"name": "Get All Batches via parameter page",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Verify that a client of web service with valid auth token when getting list of batches via batches parameter page is able to get a response code 200\"] = responseCode.code === 200;\r",
											"\r",
											"var data = JSON.parse(responseBody);\r",
											"tests[\"Verify that a client of web service with valid auth token when when getting list of batches via batches parameter page is equal to true\"] = data.page === 2;"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{URL}}/batches?page=2",
									"host": [
										"{{URL}}"
									],
									"path": [
										"batches"
									],
									"query": [
										{
											"key": "page",
											"value": "2"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get All Batches via parameter entitlement_id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Verify that a client of web service with valid auth token when getting list of batches via batches parameter entitlement_id is able to get a response code 200\"] = responseCode.code === 200;\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{URL}}/batches?entitlement_id={{entitlement_id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"batches"
									],
									"query": [
										{
											"key": "entitlement_id",
											"value": "{{entitlement_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get All Batches via parameter admin_id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Verify that a client of web service with valid auth token when getting list of batches via batches parameter admin_id is able to get a response code 200\"] = responseCode.code === 200;\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{URL}}/batches?admin_id=500118",
									"host": [
										"{{URL}}"
									],
									"path": [
										"batches"
									],
									"query": [
										{
											"key": "admin_id",
											"value": "500118"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get All Batches via parameter name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Verify that a client of web service with valid auth token when getting list of batches via batches parameter name is able to get a response code 200\"] = responseCode.code === 200;\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{URL}}/batches?name=test",
									"host": [
										"{{URL}}"
									],
									"path": [
										"batches"
									],
									"query": [
										{
											"key": "name",
											"value": "test"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Get All Batches",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Verify that a client of web service with valid auth token when getting list of batches is able to get a response code 200\"] = responseCode.code === 200;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}/batches/",
							"host": [
								"{{URL}}"
							],
							"path": [
								"batches",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Batches with invalid token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Verify that a client of web service with invalid auth token when getting list of batches is able to get a response code 401\"] = responseCode.code === 401;\r",
									"\r",
									"var data = JSON.parse(responseBody);\r",
									"tests[\"Verify that a client of web service with invalid auth token when getting list of batches success is equal to false\"] = data.success === false;\r",
									"\r",
									"tests[\"Verify that a client of web service with invalid auth token when getting list of batches success is equal to 'InvalidJwtToken'\"] = data.message === 'InvalidJwtToken';"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{invalidtoken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}/batches/",
							"host": [
								"{{URL}}"
							],
							"path": [
								"batches",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Create new batches 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"setTimeout(() => {}, 120000)\r",
									"\r",
									"tests[\"Verify that a client of web service with valid auth token when creating new batches of code is able to get a response code 201\"] = responseCode.code === 201;\r",
									"\r",
									"var data = JSON.parse(responseBody);\r",
									"tests[\"Verify that a client of web service with valid auth token when creating new batches of code success is equal to true\"] = data.success === true;\r",
									"\r",
									"tests[\"Verify that a client of web service with valid auth token when creating new batches of code message is 'Batch successfully added.\"] = data.message === 'Batch successfully added.';\r",
									"\r",
									"pm.environment.set(\"batch_id\", data.data.batch.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"entitlement_id\" : {{entitlement_id}},\r\n\"proof_pattern_id\" : 1,\r\n\"admin_id\" : 500118,\r\n\"name\" : \"API batches name\",\r\n\"notes\" : null,\r\n\"total_codes\" : 100,\r\n\"limit\" : 3,\r\n\"is_active\" : true,\r\n\"expired_at\" : null,\r\n\"created_at\": \"2020-09-08 12:51:44\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/batches/",
							"host": [
								"{{URL}}"
							],
							"path": [
								"batches",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Create new batches 20",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"setTimeout(() => {}, 120000)\r",
									"\r",
									"tests[\"Verify that a client of web service with valid auth token when creating new batches of code is able to get a response code 201\"] = responseCode.code === 201;\r",
									"\r",
									"var data = JSON.parse(responseBody);\r",
									"tests[\"Verify that a client of web service with valid auth token when creating new batches of code success is equal to true\"] = data.success === true;\r",
									"\r",
									"tests[\"Verify that a client of web service with valid auth token when creating new batches of code message is 'Batch successfully added.\"] = data.message === 'Batch successfully added.';\r",
									"\r",
									"pm.environment.set(\"batch_id\", data.data.batch.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"entitlement_id\" : {{entitlement_id}},\r\n\"proof_pattern_id\" : 1,\r\n\"admin_id\" : 500118,\r\n\"name\" : \"API batches name\",\r\n\"notes\" : null,\r\n\"total_codes\" : 100,\r\n\"limit\" : 3,\r\n\"is_active\" : true,\r\n\"expired_at\" : null,\r\n\"created_at\": \"2020-09-08 12:51:44\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/batches/",
							"host": [
								"{{URL}}"
							],
							"path": [
								"batches",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Create new batches 50",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"setTimeout(() => {}, 120000)\r",
									"\r",
									"tests[\"Verify that a client of web service with valid auth token when creating new batches of code is able to get a response code 201\"] = responseCode.code === 201;\r",
									"\r",
									"var data = JSON.parse(responseBody);\r",
									"tests[\"Verify that a client of web service with valid auth token when creating new batches of code success is equal to true\"] = data.success === true;\r",
									"\r",
									"tests[\"Verify that a client of web service with valid auth token when creating new batches of code message is 'Batch successfully added.\"] = data.message === 'Batch successfully added.';\r",
									"\r",
									"pm.environment.set(\"batch_id\", data.data.batch.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"entitlement_id\" : {{entitlement_id}},\r\n\"proof_pattern_id\" : 1,\r\n\"admin_id\" : 500118,\r\n\"name\" : \"API batches name\",\r\n\"notes\" : null,\r\n\"total_codes\" : 100,\r\n\"limit\" : 3,\r\n\"is_active\" : true,\r\n\"expired_at\" : null,\r\n\"created_at\": \"2020-09-08 12:51:44\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/batches/",
							"host": [
								"{{URL}}"
							],
							"path": [
								"batches",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Create new batches 100",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"setTimeout(() => {}, 120000)\r",
									"\r",
									"tests[\"Verify that a client of web service with valid auth token when creating new batches of code is able to get a response code 201\"] = responseCode.code === 201;\r",
									"\r",
									"var data = JSON.parse(responseBody);\r",
									"tests[\"Verify that a client of web service with valid auth token when creating new batches of code success is equal to true\"] = data.success === true;\r",
									"\r",
									"tests[\"Verify that a client of web service with valid auth token when creating new batches of code message is 'Batch successfully added.\"] = data.message === 'Batch successfully added.';\r",
									"\r",
									"pm.environment.set(\"batch_id\", data.data.batch.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"entitlement_id\" : {{entitlement_id}},\r\n\"proof_pattern_id\" : 1,\r\n\"admin_id\" : 500118,\r\n\"name\" : \"API batches name\",\r\n\"notes\" : null,\r\n\"total_codes\" : 100,\r\n\"limit\" : 3,\r\n\"is_active\" : true,\r\n\"expired_at\" : null,\r\n\"created_at\": \"2020-09-08 12:51:44\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/batches/",
							"host": [
								"{{URL}}"
							],
							"path": [
								"batches",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Create new batches 200",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"setTimeout(() => {}, 120000)\r",
									"\r",
									"tests[\"Verify that a client of web service with valid auth token when creating new batches of code is able to get a response code 201\"] = responseCode.code === 201;\r",
									"\r",
									"var data = JSON.parse(responseBody);\r",
									"tests[\"Verify that a client of web service with valid auth token when creating new batches of code success is equal to true\"] = data.success === true;\r",
									"\r",
									"tests[\"Verify that a client of web service with valid auth token when creating new batches of code message is 'Batch successfully added.\"] = data.message === 'Batch successfully added.';\r",
									"\r",
									"pm.environment.set(\"batch_id\", data.data.batch.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"entitlement_id\" : {{entitlement_id}},\r\n\"proof_pattern_id\" : 1,\r\n\"admin_id\" : 500118,\r\n\"name\" : \"API batches name\",\r\n\"notes\" : null,\r\n\"total_codes\" : 100,\r\n\"limit\" : 3,\r\n\"is_active\" : true,\r\n\"expired_at\" : null,\r\n\"created_at\": \"2020-09-08 12:51:44\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/batches/",
							"host": [
								"{{URL}}"
							],
							"path": [
								"batches",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Create new batches with unauthorized token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Verify that a client of web service with invalid auth token when creating new batches of code is able to get a response code 401\"] = responseCode.code === 401;\r",
									"\r",
									"var data = JSON.parse(responseBody);\r",
									"tests[\"Verify that a client of web service with invalid auth token when creating new batches of code success is equal to false\"] = data.success === false;\r",
									"\r",
									"tests[\"Verify that a client of web service with invalid auth token when creating new batches of code message is 'InvalidJwtToken\"] = data.message === 'InvalidJwtToken';"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{invalidtoken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"entitlement_id\" : {{entitlement_id}},\r\n\"proof_pattern_id\" : 1,\r\n\"admin_id\" : 500118,\r\n\"name\" : \"API batches name\",\r\n\"notes\" : null,\r\n\"total_codes\" : 100,\r\n\"limit\" : 3,\r\n\"is_active\" : true,\r\n\"expired_at\" : null,\r\n\"created_at\": \"2020-09-08 12:51:44\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/batches/",
							"host": [
								"{{URL}}"
							],
							"path": [
								"batches",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Create new batches with unprocessable entity",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Verify that a client of web service with valid auth token, when creating new batches of code with unprocessable entity is able to get a response code 422\"] = responseCode.code === 422;\r",
									"\r",
									"var data = JSON.parse(responseBody);\r",
									"tests[\"Verify that a client of web service with valid auth token, when creating new batches of code with unprocessable entity is equal to false\"] = data.success === false;\r",
									"\r",
									"tests[\"Verify that a client of web service with valid auth token, when creating new batches of code with unprocessable entity message is 'Unable to store batch.\"] = data.message === 'Unable to store batch.';"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"entitlement_id\" : {{entitlement_id}},\r\n\"proof_pattern_id\" : 1,\r\n\"admin_id\" : 500118,\r\n\"name\" : \"API batches name\",\r\n\"notes\" : null,\r\n\"total_codes\" : 100,\r\n\"limit\" : 3,\r\n\"is_active\" : \"True\",\r\n\"expired_at\" : null,\r\n\"created_at\": \"2020-09-08 12:51:44\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/batches/",
							"host": [
								"{{URL}}"
							],
							"path": [
								"batches",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Get specific batches",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Verify that a client of web service with valid auth token when getting specific batches code is able to get a response code 200\"] = responseCode.code === 200;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}/batches/{{batch_id}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"batches",
								"{{batch_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get specific batches with unauthorized auth token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Verify that a client of web service with invalid auth token when getting specific batches code is able to get a response code 401\"] = responseCode.code === 401;\r",
									"\r",
									"var data = JSON.parse(responseBody);\r",
									"tests[\"Verify that a client of web service with invalid auth token when creating specific batches of code success is equal to false\"] = data.success === false;\r",
									"\r",
									"tests[\"Verify that a client of web service with invalid auth token when creating specific batches of code success is equal to 'InvalidJwtToken'\"] = data.message === 'InvalidJwtToken';"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{invalidtoken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}/batches/{{batch_id}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"batches",
								"{{batch_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update specific batch",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Verify that a client of web service with valid auth token when updating new batches of code is able to get a response code 200\"] = responseCode.code === 200;\r",
									"\r",
									"var data = JSON.parse(responseBody);\r",
									"tests[\"Verify that a client of web service with valid auth token when updating new batches of code success is equal to true\"] = data.success === true;\r",
									"\r",
									"tests[\"Verify that a client of web service with valid auth token when updating new batches of code message is 'Batch successfully updated.\"] = data.message === 'Batch successfully updated.';"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"name\" : \"API batches name Edited\",\r\n\"notes\" : null,\r\n\"expired_at\" : null\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/batches/{{batch_id}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"batches",
								"{{batch_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update specific batch with unauthorized auth token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Verify that a client of web service with valid auth token when updating new batches of code is able to get a response code 401\"] = responseCode.code === 401;\r",
									"\r",
									"var data = JSON.parse(responseBody);\r",
									"tests[\"Verify that a client of web service with valid auth token when updating new batches of code success is equal to false\"] = data.success === false;\r",
									"\r",
									"tests[\"Verify that a client of web service with valid auth token when updating new batches of code message is 'InvalidJwtToken'\"] = data.message === 'InvalidJwtToken';"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{invalidtoken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"name\" : \"API batches name Edited\",\r\n\"notes\" : null,\r\n\"expired_at\" : null\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/batches/{{batch_id}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"batches",
								"{{batch_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update specific batch with unprocessable entity",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Verify that a client of web service with valid auth token when updating new batches of code with unprocessable entity is able to get a response code 422\"] = responseCode.code === 422;\r",
									"\r",
									"var data = JSON.parse(responseBody);\r",
									"tests[\"Verify that a client of web service with valid auth token when new batches of code with unprocessable entity success is equal to false\"] = data.success === false;\r",
									"\r",
									"tests[\"Verify that a client of web service with valid auth token when new batches of code with unprocessable entity message is 'Unable to update batch.\"] = data.message === 'Unable to update batch.';"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"name\" : true,\r\n\"notes\" : null,\r\n\"expired_at\" : null\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/batches/{{batch_id}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"batches",
								"{{batch_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update specific batch permissions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Verify that a client of web service with valid auth token when updating batches of code permissions is able to get a response code 200\"] = responseCode.code === 200;\r",
									"\r",
									"var data = JSON.parse(responseBody);\r",
									"tests[\"Verify that a client of web service with valid auth token when updating batches of code permissions success is equal to true\"] = data.success === true;\r",
									"\r",
									"tests[\"Verify that a client of web service with valid auth token when updating batches of code permissions message is 'Permission successfully updated using batch id.\"] = data.message === 'Permission successfully updated using batch id.';"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"limit\" : 4\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/batches/{{batch_id}}/permissions",
							"host": [
								"{{URL}}"
							],
							"path": [
								"batches",
								"{{batch_id}}",
								"permissions"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update specific batch permissions with unauthorized auth token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Verify that a client of web service with invalid auth token when updating batches of code permissions is able to get a response code 401\"] = responseCode.code === 401;\r",
									"\r",
									"var data = JSON.parse(responseBody);\r",
									"tests[\"Verify that a client of web service with invalid auth token when updating batches of code permissions success is equal to false\"] = data.success === false;\r",
									"\r",
									"tests[\"Verify that a client of web service with invalid auth token when updating batches of code permissions message is 'InvalidJwtToken\"] = data.message === 'InvalidJwtToken';"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{invalidtoken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"limit\" : 4\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/batches/{{batch_id}}/permissions",
							"host": [
								"{{URL}}"
							],
							"path": [
								"batches",
								"{{batch_id}}",
								"permissions"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Permissions",
			"item": [
				{
					"name": "Permissions - parameters request",
					"item": [
						{
							"name": "Get specific permission via keyword parameter",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Verify that a client of web service with valid auth token when getting list of pernissions via keyword is able to get a response code 200\"] = responseCode.code === 200;\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{URL}}/permissions?keyword={{proof}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"permissions"
									],
									"query": [
										{
											"key": "keyword",
											"value": "{{proof}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get specific permission via batch_id parameter",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"setTimeout(() => {}, 5000)\r",
											"\r",
											"tests[\"Verify that a client of web service with valid auth token when getting list of pernissions via bacth_id is able to get a response code 200\"] = responseCode.code === 200;\r",
											"\r",
											"var data = JSON.parse(responseBody);\r",
											"pm.environment.set(\"proof\", data.data[0].proof);\r",
											"\r",
											"pm.environment.set(\"permission_id\", data.data[0].id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{URL}}/permissions?batch_id={{batch_id}}",
									"host": [
										"{{URL}}"
									],
									"path": [
										"permissions"
									],
									"query": [
										{
											"key": "batch_id",
											"value": "{{batch_id}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Get All permissions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Verify that a client of web service with valid auth token when getting list of pernissions is able to get a response code 200\"] = responseCode.code === 200;"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "{{URL}}/permissions/?entitlement_id=4754",
							"host": [
								"{{URL}}"
							],
							"path": [
								"permissions",
								""
							],
							"query": [
								{
									"key": "entitlement_id",
									"value": "4754"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All permissions with unauthorized token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Verify that a client of web service with invalid auth token when getting list of pernissions is able to get a response code 401\"] = responseCode.code === 401;\r",
									"\r",
									"var data = JSON.parse(responseBody);\r",
									"tests[\"Verify that a client of web service with invalid auth token when getting list of pernissions is equal to false\"] = data.success === false;\r",
									"\r",
									"tests[\"Verify that a client of web service with invalid auth token when creating new batches of code message is 'InvalidJwtToken\"] = data.message === 'InvalidJwtToken';\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{invalidtoken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}/permissions/",
							"host": [
								"{{URL}}"
							],
							"path": [
								"permissions",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Get specific permissions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Verify that a client of web service with valid auth token when getting specific pernissions is able to get a response code 200\"] = responseCode.code === 200;\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}/permissions/{{permission_id}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"permissions",
								"{{permission_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get specific permissions with invalid auth token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Verify that a client of web service with invalid auth token when getting specific pernissions is able to get a response code 401\"] = responseCode.code === 401;\r",
									"\r",
									"var data = JSON.parse(responseBody);\r",
									"tests[\"Verify that a client of web service with invalid auth token when getting specific pernissions is able success is equal to false\"] = data.success === false;\r",
									"\r",
									"tests[\"Verify that a client of web service with invalid auth token when getting specific pernissions is able message is 'InvalidJwtToken'\"] = data.message === 'InvalidJwtToken';\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{invalidtoken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}/permissions/{{permission_id}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"permissions",
								"{{permission_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get specific permissions not found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Verify that a client of web service with valid auth token when getting specific pernissions not found is able to get a response code 404\"] = responseCode.code === 404;\r",
									"\r",
									"var data = JSON.parse(responseBody);\r",
									"tests[\"Verify that a client of web service with valid auth token when getting specific pernissions not found success is equal to false\"] = data.success === false;\r",
									"\r",
									"tests[\"Verify that a client of web service with valid auth token when getting specific pernissions not found message is 'Permission not found.'\"] = data.message === 'Permission not found.';\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}/permissions/43877170000",
							"host": [
								"{{URL}}"
							],
							"path": [
								"permissions",
								"43877170000"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create a new permissions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Verify that a client of web service with valid auth token when creating new permissions is able to get a response code 201\"] = responseCode.code === 201;\r",
									"\r",
									"var data = JSON.parse(responseBody);\r",
									"tests[\"Verify that a client of web service with valid auth token when creating new permissions success is equal to true\"] = data.success === true;\r",
									"\r",
									"tests[\"Verify that a client of web service with valid auth token when creating new permissions message is 'Permission successfully added.\"] = data.message === 'Permission successfully added.';"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"entitlement_id\": {{entitlement_id}},\r\n    \"proof\": null,\r\n    \"is_active\": true\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/permissions/",
							"host": [
								"{{URL}}"
							],
							"path": [
								"permissions",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Create a new permissions with invalid auth token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Verify that a client of web service with invalid auth token when creating new permissions is able to get a response code 401\"] = responseCode.code === 401;\r",
									"\r",
									"var data = JSON.parse(responseBody);\r",
									"tests[\"Verify that a client of web service with invalid auth token when creating new permissions success is equal to false\"] = data.success === false;\r",
									"\r",
									"tests[\"Verify that a client of web service with invalid auth token when creating new permissions message is 'InvalidJwtToken\"] = data.message === 'InvalidJwtToken';"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{invalidtoken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"entitlement_id\" : {{entitlement_id}},\r\n    \"proof\": null,\r\n    \"is_active\": true\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/permissions/",
							"host": [
								"{{URL}}"
							],
							"path": [
								"permissions",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Create a new permissions with unprocessable entity",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Verify that a client of web service with valid auth token when creating new permissions with unprocessable entity is able to get a response code 422\"] = responseCode.code === 422;\r",
									"\r",
									"var data = JSON.parse(responseBody);\r",
									"tests[\"Verify that a client of web service with valid auth token when creating new permissions with unprocessable entity success is equal to false\"] = data.success === false;\r",
									"\r",
									"tests[\"Verify that a client of web service with valid auth token when creating new permissions with unprocessable entity message is 'Unable to store permission.\"] = data.message === 'Unable to store Foreign Value.';\r",
									"pm.environment.set(\"variable_key\", \"variable_value\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"entitlement_id\" : true,\r\n    \"proof\": null,\r\n    \"is_active\": true\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/permissions/",
							"host": [
								"{{URL}}"
							],
							"path": [
								"permissions",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Update permission",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Verify that a client of web service with valid auth token when updating permissions of code is able to get a response code 200\"] = responseCode.code === 200;\r",
									"\r",
									"var data = JSON.parse(responseBody);\r",
									"tests[\"Verify that a client of web service with valid auth token when updating permissions of code success is equal to true\"] = data.success === true;\r",
									"\r",
									"tests[\"Verify that a client of web service with valid auth token when updating permissions of code message is 'Permission successfully updated.\"] = data.message === 'Permission successfully updated.';"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"entitlement_id\": {{entitlement_id}},\r\n    \"batch_id\": {{batch_id}},\r\n    \"proof\": \"7W7Y-74DX-8RZC-RQ38\",\r\n    \"limit\": 4,\r\n    \"is_active\": true\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/permissions/{{permission_id}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"permissions",
								"{{permission_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update permission with invalid auth token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Verify that a client of web service with invalid auth token when updating permissions of code is able to get a response code 401\"] = responseCode.code === 401;\r",
									"\r",
									"var data = JSON.parse(responseBody);\r",
									"tests[\"Verify that a client of web service with invalid auth token when updating permissions of code success is equal to false\"] = data.success === false;\r",
									"\r",
									"tests[\"Verify that a client of web service with invalid auth token when updating permissions of code message is 'InvalidJwtToken\"] = data.message === 'InvalidJwtToken';"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{invalidtoken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"entitlement_id\": {{entitlement_id}},\r\n    \"batch_id\": {{batch_id}},\r\n    \"proof\": \"7W7Y-74DX-8RZC-RQ38\",\r\n    \"limit\": 4,\r\n    \"is_active\": true\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/permissions/{{permission_id}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"permissions",
								"{{permission_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update permission not found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Verify that a client of web service with valid auth token when updating permissions of code not found is able to get a response code 404\"] = responseCode.code === 404;\r",
									"\r",
									"var data = JSON.parse(responseBody);\r",
									"tests[\"Verify that a client of web service with valid auth token when updating permissions of code not found success is equal to false\"] = data.success === false;\r",
									"\r",
									"tests[\"Verify that a client of web service with valid auth token when updating permissions of code not found message is 'Permission not found.\"] = data.message === 'Permission not found.';"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"entitlement_id\": 4006,\r\n    \"batch_id\": 6298,\r\n    \"proof\": \"X9Z9-KJDZ-R7MT-VNE2\",\r\n    \"limit\": 4,\r\n    \"is_active\": true\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/permissions/438771712313",
							"host": [
								"{{URL}}"
							],
							"path": [
								"permissions",
								"438771712313"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Activation",
			"item": [
				{
					"name": "Get all Activations - parameters",
					"item": [
						{
							"name": "Get All Entitlement of a User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Verify that a client of web service with valid auth token when getting list of activation is able to get a response code 200\"] = responseCode.code === 200;\r",
											"\r",
											"var data = JSON.parse(responseBody);\r",
											"tests[\"Verify that a client of web service with valid auth token when getting list of activation 'page' default is equal to 1.\"] = data.page === 1;\r",
											"\r",
											"tests[\"Verify that a client of web service with valid auth token when getting list of activation 'perPage' default is equal to 20.\"] = data.perPage === 20;"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{URL}}/activations/",
									"host": [
										"{{URL}}"
									],
									"path": [
										"activations",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Get All Activations by order field",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Verify that a client of web service with valid auth token when getting list of activation via orderfield is able to get a response code 200\"] = responseCode.code === 200;\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{URL}}/activations/?orderField=permission_id",
									"host": [
										"{{URL}}"
									],
									"path": [
										"activations",
										""
									],
									"query": [
										{
											"key": "orderField",
											"value": "permission_id"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get All Activations by order field invalid field",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Verify that a client of web service with invalid orderfield paramater when getting list of activation is able to get a response code 500\"] = responseCode.code === 500;\r",
											"\r",
											"var data = JSON.parse(responseBody);\r",
											"tests[\"Verify that a client of web service with invalid orderfield paramater when getting list of activation is able to get a success = false\"] = data.success === false;\r",
											"\r",
											"var data = JSON.parse(responseBody);\r",
											"tests[\"Verify that a client of web service with invalid orderfield paramater when getting list of activation is able to get a message is equal to 'Error'\"] = data.message === 'Error';\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{URL}}/activations/?orderField=sample",
									"host": [
										"{{URL}}"
									],
									"path": [
										"activations",
										""
									],
									"query": [
										{
											"key": "orderField",
											"value": "sample"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get All Activations is page set manually",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Verify that a client of web service with valid auth token when getting list of activation is able to get a response code 200\"] = responseCode.code === 200;\r",
											"\r",
											"var data = JSON.parse(responseBody);\r",
											"tests[\"Verify that a client of web service with valid auth token when getting list of activation 'page' default is equal to 2.\"] = data.page === 2;\r",
											"\r",
											"tests[\"Verify that a client of web service with valid auth token when getting list of activation 'perPage' default is equal to 20.\"] = data.perPage === 20;"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{URL}}/activations/?page=2",
									"host": [
										"{{URL}}"
									],
									"path": [
										"activations",
										""
									],
									"query": [
										{
											"key": "page",
											"value": "2"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get All Activations is active",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Verify that a client of web service with valid auth token when getting list of activation is able to get a response code 200\"] = responseCode.code === 200;\r",
											"\r",
											"var responseJson = pm.response.json();\r",
											"pm.test(\"list of activation are active = true\",function(){ \r",
											"    var x = [];\r",
											"    for(var i = 0; i < responseJson.data.length; i++){\r",
											"        if (responseJson.data[i].permission.is_active == true){\r",
											"            x.push(responseJson.data[i].permission.is_active)\r",
											"        }\r",
											"    }\r",
											"    pm.expect(x.length).to.eql(responseJson.data.length);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{URL}}/activations/?is_active",
									"host": [
										"{{URL}}"
									],
									"path": [
										"activations",
										""
									],
									"query": [
										{
											"key": "is_active",
											"value": ""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get All Activations via user_id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Verify that a client of web service with valid auth token when getting list of activation via user_id is able to get a response code 200\"] = responseCode.code === 200;"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{URL}}/activations/?user_id=189476",
									"host": [
										"{{URL}}"
									],
									"path": [
										"activations",
										""
									],
									"query": [
										{
											"key": "user_id",
											"value": "189476"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get All Activations via permission_id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"tests[\"Verify that a client of web service with valid auth token when getting list of activation is able to get a response code 200\"] = responseCode.code === 200;"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{URL}}/activations/?permission_id=50603",
									"host": [
										"{{URL}}"
									],
									"path": [
										"activations",
										""
									],
									"query": [
										{
											"key": "permission_id",
											"value": "50603"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Get All Activations",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Verify that a client of web service with valid auth token when getting list of activation is able to get a response code 200\"] = responseCode.code === 200;\r",
									"\r",
									"var data = JSON.parse(responseBody);\r",
									"tests[\"Verify that a client of web service with valid auth token when getting list of activation 'page' default is equal to 1.\"] = data.page === 1;\r",
									"\r",
									"tests[\"Verify that a client of web service with valid auth token when getting list of activation 'perPage' default is equal to 20.\"] = data.perPage === 20;"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \r\n    \"owner_id\": [\"d130293b55ff4e56944a1d0a22676f15\"]\r\n \r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/activations/",
							"host": [
								"{{URL}}"
							],
							"path": [
								"activations",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Unauthorized Getting of All Activations",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Verify that a client of web service with invalid auth token when getting list of activation is able to get a response code 401\"] = responseCode.code === 401;\r",
									"\r",
									"var data = JSON.parse(responseBody);\r",
									"tests[\"Verify that a client of web service with invalid auth token when getting list of activation success is equal to false\"] = data.success === false;\r",
									"\r",
									"tests[\"Verify that a client of web service with invalid auth token when getting list of activation is able to see message 'InvalidJwtToken'\"] = data.message === 'InvalidJwtToken';"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{invalidtoken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}/activations/",
							"host": [
								"{{URL}}"
							],
							"path": [
								"activations",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Specific Activation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Verify that a client of web service with valid auth token when getting specific activation is able to get a response code 200\"] = responseCode.code === 200;\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}/activations/1440",
							"host": [
								"{{URL}}"
							],
							"path": [
								"activations",
								"1440"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Specific activation not in the record",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Verify that a client of web service with valid auth token when getting specific activation not in the record is able to get a response code 404\"] = responseCode.code === 404;\r",
									"\r",
									"var data = JSON.parse(responseBody);\r",
									"tests[\"Verify that a client of web service with invalid auth token  when getting specific activation not in the record is equal to 'Activation not found.'\"] = data.message === 'Activation not found.';"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}/activations/4",
							"host": [
								"{{URL}}"
							],
							"path": [
								"activations",
								"4"
							]
						}
					},
					"response": []
				},
				{
					"name": "Unauthorized getting of Specific Activation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Verify that a client of web service with invalid auth token when getting specific activation is able to get a response code 401\"] = responseCode.code === 401;\r",
									"\r",
									"var data = JSON.parse(responseBody);\r",
									"tests[\"Verify that a client of web service with invalid auth token when getting specific activation message is equal to 'InvalidJwtToken'\"] = data.message === 'InvalidJwtToken';"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{invalidtoken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}/activations/1440",
							"host": [
								"{{URL}}"
							],
							"path": [
								"activations",
								"1440"
							]
						}
					},
					"response": []
				},
				{
					"name": "Adding permission to a user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Verify that a client of web service with valid auth token when adding permission to a user is able to get a response code 201\"] = responseCode.code === 201;\r",
									"\r",
									"var data = JSON.parse(responseBody);\r",
									"tests[\"Verify that a client of web service with valid auth token when adding permission to a user success is equal to true\"] = data.success === true;\r",
									"\r",
									"tests[\"Verify that a client of web service with valid auth token when adding permission to a user message is equal to 'Activation successfully added.'\"] = data.message === 'Activation successfully added.';"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"permission_id\" : {{permission_id}},\r\n    \"user_id\" : \"API test\",\r\n    \"ended_at\" : \"2020-09-05 00:00:00\",\r\n    \"activated_at\" : \"2020-09-05 00:00:00\",\r\n    \"metadata\": \"{\\\"Notes\\\": null, \\\"Archive\\\": null, \\\"CreatedBy\\\": null, \\\"ArchiveDate\\\": null, \\\"PurchaseType\\\": \\\"CODE\\\", \\\"DateDeactivated\\\": null }\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL1}}/activations/",
							"host": [
								"{{URL1}}"
							],
							"path": [
								"activations",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Adding permission to a user with invalid auth token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Verify that a client of web service with invalid auth token when adding permission to a user is able to get a response code 401\"] = responseCode.code === 401;\r",
									"\r",
									"var data = JSON.parse(responseBody);\r",
									"tests[\"Verify that a client of web service with invalid auth token when adding permission to a user success is equal to false\"] = data.success === false;\r",
									"\r",
									"tests[\"Verify that a client of web service with invalid auth token when adding permission to a user message is equal to 'InvalidJwtToken'\"] = data.message === 'InvalidJwtToken';"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{invalidtoken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"permission_id\" : {{permission_id}},\r\n    \"user_id\" : \"API test\",\r\n    \"ended_at\" : \"2020-09-05 00:00:00\",\r\n    \"activated_at\" : \"2020-09-05 00:00:00\",\r\n    \"metadata\": \"{\\\"Notes\\\": null, \\\"Archive\\\": null, \\\"CreatedBy\\\": null, \\\"ArchiveDate\\\": null, \\\"PurchaseType\\\": \\\"CODE\\\", \\\"DateDeactivated\\\": null }\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL1}}/activations/",
							"host": [
								"{{URL1}}"
							],
							"path": [
								"activations",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Adding permission to a user with unprocessable entity",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Verify that a client of web service with valid auth token when adding permission to a user with uncprocessable entity is able to get a response code 422\"] = responseCode.code === 422;\r",
									"\r",
									"var data = JSON.parse(responseBody);\r",
									"tests[\"Verify that a client of web service with valid auth token when adding permission to a user with unprocessable entity success is equal to false\"] = data.success === false;\r",
									"\r",
									"tests[\"Verify that a client of web service with valid auth token when adding permission to a user with unprocessable entity message is equal to 'Unable to store activation.'\"] = data.message === 'Unable to store activation.';"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"permission_id\" : 123142124,\r\n    \"user_id\" : \"API test\",\r\n    \"ended_at\" : \"2020-09-05 00:00:00\",\r\n    \"activated_at\" : \"2020-09-05 00:00:00\",\r\n    \"metadata\": \"{\\\"Notes\\\": null, \\\"Archive\\\": null, \\\"CreatedBy\\\": null, \\\"ArchiveDate\\\": null, \\\"PurchaseType\\\": \\\"CODE\\\", \\\"DateDeactivated\\\": null }\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL1}}/activations/",
							"host": [
								"{{URL1}}"
							],
							"path": [
								"activations",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete products",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Verify that a client of web service with valid auth token when deleting a product is able to get a response code 200\"] = responseCode.code === 200;\r",
									"\r",
									"var data = JSON.parse(responseBody);\r",
									"tests[\"Verify that a client of web service with valid auth token when deleting a product success is equal to true\"] = data.success === true;\r",
									"\r",
									"tests[\"Verify that a client of web service with valid auth token when deleting a product message is 'Product successfully deleted.'\"] = data.message === 'Product successfully deleted.';"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"metadata\" : \"{\\\"ISBN_13\\\": null, \\\"StaffID\\\": 500118, \\\"CMS_Name\\\": \\\"Create product API\\\", \\\"CMS_Notes\\\": \\\"This is a CMS NOTES\\\", \\\"Description\\\": null, \\\"Total_Codes\\\": null, \\\"CreationDate\\\": \\\"2020-09-05 13:00:00.000000\\\", \\\"edumar_titleID\\\": null, \\\"CMS_Setup_Notes\\\": null, \\\"CMS_Setup_Complete\\\": \\\"Y\\\", \\\"Total_Subscription\\\": null, \\\"Activate_Page_Message\\\": null}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/products/{{product_id}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"products",
								"{{product_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Unauthorized user Deleting products",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Verify that a client of web service with invalid auth token when deleting a product is able to get a response code 401\"] = responseCode.code === 401;\r",
									"\r",
									"var data = JSON.parse(responseBody);\r",
									"tests[\"Verify that a client of web service with invalid auth token when deleting a product success is equal to false\"] = data.success === false;\r",
									"\r",
									"tests[\"Verify that a client of web service with invalid auth token when deleting a product message is 'InvalidJwtToken'\"] = data.message === 'InvalidJwtToken';"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{invalidtoken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"metadata\" : \"{\\\"ISN_13\\\": null, \\\"StaffID\\\": 500118, \\\"CMS_Name\\\": \\\"Create product API\\\", \\\"CMS_Notes\\\": \\\"This is a CMS NOTES\\\", \\\"Description\\\": null, \\\"Total_Codes\\\": null, \\\"CreationDate\\\": \\\"2020-09-05 13:00:00.000000\\\", \\\"edumar_titleID\\\": null, \\\"CMS_Setup_Notes\\\": null, \\\"CMS_Setup_Complete\\\": \\\"Y\\\", \\\"Total_Subscription\\\": null, \\\"Activate_Page_Message\\\": null}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/products/2191",
							"host": [
								"{{URL}}"
							],
							"path": [
								"products",
								"2191"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete product not found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Verify that a client of web service with valid auth token when deleting a product not found is able to get a response code 404\"] = responseCode.code === 404;\r",
									"\r",
									"var data = JSON.parse(responseBody);\r",
									"tests[\"Verify that a client of web service with valid auth token when deleting a product not found success is equal to false\"] = data.success === false;\r",
									"\r",
									"tests[\"Verify that a client of web service with valid auth token when deleting a product not found message is 'Product not found.'\"] = data.message === 'Product not found.';"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"metadata\" : \"{\\\"ISN_13\\\": null, \\\"StaffID\\\": 500118, \\\"CMS_Name\\\": \\\"Create product API\\\", \\\"CMS_Notes\\\": \\\"This is a CMS NOTES\\\", \\\"Description\\\": null, \\\"Total_Codes\\\": null, \\\"CreationDate\\\": \\\"2020-09-05 13:00:00.000000\\\", \\\"edumar_titleID\\\": null, \\\"CMS_Setup_Notes\\\": null, \\\"CMS_Setup_Complete\\\": \\\"Y\\\", \\\"Total_Subscription\\\": null, \\\"Activate_Page_Message\\\": null}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/products/10000",
							"host": [
								"{{URL}}"
							],
							"path": [
								"products",
								"10000"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"let url = pm.environment.get('URL');",
					"url += '/token/';",
					"",
					"pm.sendRequest(",
					"    {",
					"        url: url,",
					"        method: 'POST',",
					"        header: {",
					"            \"Content-Type\": \"application/json\"",
					"        },",
					"        body: {",
					"            mode: 'raw',",
					"            raw: JSON.stringify({",
					"                  \"origin_url\": pm.environment.get('origin_url'),",
					"                  \"secret_key\": pm.environment.get('secret_key')",
					"            })",
					"        }",
					"    },",
					"    function (err, response) {",
					"        pm.environment.set('token', response.json().data.token);",
					"    },",
					"",
					"    function (err, response) {",
					"        pm.environment.set('refreshtoken', response.json().data.refreshToken);",
					"    }",
					");"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}